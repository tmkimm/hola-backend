{"version":3,"file":"isPasswordValidWithAdmin.js","sourceRoot":"/","sources":["api/middlewares/isPasswordValidWithAdmin.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,kEAA4C;AAC5C,6DAA4D;AAC5D,6DAAwC;AAExC,cAAc;AACd,IAAM,wBAAwB,GAAG,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;QACjG,KAAmB,GAAG,CAAC,IAAI,EAAzB,EAAE,QAAA,EAAE,QAAQ,cAAA,CAAc;QAC5B,SAAS,GAAG,OAAO,CAAC;QAC1B,IAAI,EAAE,KAAK,eAAM,CAAC,OAAO,IAAI,QAAQ,KAAK,eAAM,CAAC,aAAa,EAAE;YAC9D,GAAG,CAAC,IAAI,GAAG,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;YACzE,IAAI,EAAE,CAAC;SACR;aAAM;YACL,MAAM,IAAI,qBAAW,CAAC,WAAW,EAAE,GAAG,EAAE,wBAAwB,CAAC,CAAC;SACnE;;;KACF,CAAC,CAAC;AAEM,4DAAwB","sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport CustomError from '../../CustomError';\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\nimport config from '../../config/index';\n\n// Admin Login\nconst isPasswordValidWithAdmin = asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n  const { id, password } = req.body;\n  const loginType = 'admin';\n  if (id === config.AdminId && password === config.AdminPassword) {\n    req.user = { idToken: loginType, tokenType: loginType, name: loginType };\n    next();\n  } else {\n    throw new CustomError('authError', 400, 'Id/Password is Invalid');\n  }\n});\n\nexport { isPasswordValidWithAdmin };\n"]}