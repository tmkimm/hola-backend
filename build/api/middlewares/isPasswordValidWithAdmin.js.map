{"version":3,"file":"isPasswordValidWithAdmin.js","sourceRoot":"/","sources":["api/middlewares/isPasswordValidWithAdmin.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,6DAAwC;AACxC,6DAA4D;AAC5D,kEAA4C;AAE5C,cAAc;AACd,IAAM,wBAAwB,GAAG,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;QACjG,KAAmB,GAAG,CAAC,IAAI,EAAzB,EAAE,QAAA,EAAE,QAAQ,cAAA,CAAc;QAC5B,SAAS,GAAG,OAAO,CAAC;QAC1B,IAAI,EAAE,KAAK,eAAM,CAAC,OAAO,IAAI,QAAQ,KAAK,eAAM,CAAC,aAAa,EAAE;YAC9D,GAAG,CAAC,IAAI,GAAG,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;YACzE,IAAI,EAAE,CAAC;SACR;aAAM;YACL,MAAM,IAAI,qBAAW,CAAC,WAAW,EAAE,GAAG,EAAE,wBAAwB,CAAC,CAAC;SACnE;;;KACF,CAAC,CAAC;AAEM,4DAAwB","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport config from '../../config/index';\r\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\r\nimport CustomError from '../../CustomError';\r\n\r\n// Admin Login\r\nconst isPasswordValidWithAdmin = asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n  const { id, password } = req.body;\r\n  const loginType = 'admin';\r\n  if (id === config.AdminId && password === config.AdminPassword) {\r\n    req.user = { idToken: loginType, tokenType: loginType, name: loginType };\r\n    next();\r\n  } else {\r\n    throw new CustomError('authError', 400, 'Id/Password is Invalid');\r\n  }\r\n});\r\n\r\nexport { isPasswordValidWithAdmin };\r\n"]}