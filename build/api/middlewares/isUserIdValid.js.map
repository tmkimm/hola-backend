{"version":3,"file":"isUserIdValid.js","sourceRoot":"/","sources":["api/middlewares/isUserIdValid.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,sDAAgC;AAChC,kEAA4C;AAC5C,6DAA4D;AAC5D,0CAAyC;AAEzC,qBAAqB;AACrB,IAAM,aAAa,GAAG,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;gBACtF,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE,IAAI,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;gBACpD,QAAQ,GAAK,kBAAQ,CAAC,KAAK,SAAnB,CAAoB;gBAEpC,IAAI,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC;oBAAE,MAAM,IAAI,qBAAW,CAAC,eAAe,EAAE,GAAG,EAAE,gBAAgB,CAAC,CAAC;gBAC3F,qBAAM,WAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAA;;gBAAlC,IAAI,GAAG,SAA2B;gBACxC,IAAI,CAAC,IAAI;oBAAE,MAAM,IAAI,qBAAW,CAAC,eAAe,EAAE,GAAG,EAAE,gBAAgB,CAAC,CAAC;gBAEzE,IAAI,EAAE,CAAC;;;;KACR,CAAC,CAAC;AAEM,sCAAa","sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport mongoose from 'mongoose';\nimport CustomError from '../../CustomError';\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\nimport { User } from '../../models/User';\n\n// 사용자 id가 올바른지 확인한다.\nconst isUserIdValid = asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n  const userId = req.params.id || req.body.id || req.query.id;\n  const { ObjectId } = mongoose.Types;\n\n  if (!userId || !ObjectId.isValid(userId)) throw new CustomError('NotFoundError', 404, 'User not found');\n  const user = await User.findById(userId);\n  if (!user) throw new CustomError('NotFoundError', 404, 'User not found');\n\n  next();\n});\n\nexport { isUserIdValid };\n"]}