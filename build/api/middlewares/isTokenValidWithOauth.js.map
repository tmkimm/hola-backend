{"version":3,"file":"isTokenValidWithOauth.js","sourceRoot":"/","sources":["api/middlewares/isTokenValidWithOauth.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { OAuth2Client } from 'google-auth-library';\r\nimport { Request, Response, NextFunction } from 'express';\r\nimport config from '../../config/index';\r\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\r\nimport CustomError from '../../CustomError';\r\n\r\nconst client = new OAuth2Client(config.googleClientID);\r\n\r\n// 클라이언트에게 전달받은 token의 유효성을 체크하고 사용자 정보를 리턴한다.\r\nconst getUserInfoByOauth = async (loginType: string, code: string) => {\r\n  let idToken;\r\n  let name;\r\n  let email;\r\n  try {\r\n    if (loginType === 'google') {\r\n      const ticket = await client.verifyIdToken({\r\n        idToken: code,\r\n        audience: config.googleClientID,\r\n      });\r\n      const payload = ticket.getPayload();\r\n      if (payload) {\r\n        idToken = payload.sub;\r\n        name = payload.name;\r\n        email = payload.email;\r\n      }\r\n    } else if (loginType === 'github') {\r\n      // 인가코드를 이용하여 AccessToken 발급\r\n      const accessToken = await axios.post(\r\n        'https://github.com/login/oauth/access_token',\r\n        {\r\n          code,\r\n          client_id: config.githubClientID,\r\n          client_secret: config.githubClientSecret,\r\n        },\r\n        {\r\n          headers: {\r\n            accept: 'application/json',\r\n          },\r\n        },\r\n      );\r\n\r\n      // 사용자 정보 가져오기\r\n      const { data: userInfo } = await axios.get('https://api.github.com/user', {\r\n        headers: {\r\n          Authorization: `token ${accessToken.data.access_token}`,\r\n        },\r\n      });\r\n      idToken = userInfo.id;\r\n      name = userInfo.name;\r\n    } else if (loginType === 'kakao') {\r\n      // 사용자 정보 가져오기\r\n      const kakaoResponse = await axios.post(\r\n        'https://kapi.kakao.com/v2/user/me',\r\n        {\r\n          property_keys: ['kakao_account.email'],\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${code}`,\r\n          },\r\n        },\r\n      );\r\n      idToken = kakaoResponse.data.id;\r\n      name = kakaoResponse.data.kakao_account.profile.nickname;\r\n    } else if (loginType === 'guest') {\r\n      idToken = 'Guest';\r\n    }\r\n    return { idToken, name, email };\r\n  } catch (error) {\r\n    return { idToken, name, email };\r\n  }\r\n};\r\n\r\n// 클라이언트에게 전달받은 token을 이용해 사용자 정보를 가져온다.\r\n// 각 소셜 로그인에 따라 Oauth 서버를 호출한다.\r\nconst isTokenValidWithOauth = asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n  const { loginType, code } = req.body;\r\n  // 리펙토링 필요\r\n  const { idToken, name, email } = await getUserInfoByOauth(loginType, code);\r\n  if (idToken) {\r\n    req.user = { idToken, tokenType: loginType, name, email };\r\n    next();\r\n  } else {\r\n    throw new CustomError('OauthError', 400, 'Oauth parameter is Invalid');\r\n  }\r\n});\r\n\r\nexport { isTokenValidWithOauth };\r\n"]}