{"version":3,"file":"isTokenValidWithOauth.js","sourceRoot":"/","sources":["api/middlewares/isTokenValidWithOauth.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAA0B;AAE1B,2DAAmD;AACnD,kEAA4C;AAC5C,6DAA4D;AAC5D,6DAAwC;AAExC,IAAM,MAAM,GAAG,IAAI,kCAAY,CAAC,eAAM,CAAC,cAAc,CAAC,CAAC;AAEvD,8CAA8C;AAC9C,IAAM,kBAAkB,GAAG,UAAO,SAAiB,EAAE,IAAY;;;;;;qBAKzD,CAAA,SAAS,KAAK,QAAQ,CAAA,EAAtB,wBAAsB;gBACT,qBAAM,MAAM,CAAC,aAAa,CAAC;wBACxC,OAAO,EAAE,IAAI;wBACb,QAAQ,EAAE,eAAM,CAAC,cAAc;qBAChC,CAAC,EAAA;;gBAHI,MAAM,GAAG,SAGb;gBACI,OAAO,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;gBACpC,IAAI,OAAO,EAAE;oBACX,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC;oBACtB,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;oBACpB,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;iBACvB;;;qBACQ,CAAA,SAAS,KAAK,QAAQ,CAAA,EAAtB,wBAAsB;gBAEX,qBAAM,eAAK,CAAC,IAAI,CAClC,6CAA6C,EAC7C;wBACE,IAAI,MAAA;wBACJ,SAAS,EAAE,eAAM,CAAC,cAAc;wBAChC,aAAa,EAAE,eAAM,CAAC,kBAAkB;qBACzC,EACD;wBACE,OAAO,EAAE;4BACP,MAAM,EAAE,kBAAkB;yBAC3B;qBACF,CACF,EAAA;;gBAZK,WAAW,GAAG,SAYnB;gBAG0B,qBAAM,eAAK,CAAC,GAAG,CAAC,6BAA6B,EAAE;wBACxE,OAAO,EAAE;4BACP,aAAa,EAAE,gBAAS,WAAW,CAAC,IAAI,CAAC,YAAY,CAAE;yBACxD;qBACF,CAAC,EAAA;;gBAJY,QAAQ,GAAK,CAAA,SAIzB,CAAA,KAJoB;gBAKtB,OAAO,GAAG,QAAQ,CAAC,EAAE,CAAC;gBACtB,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;;;qBACZ,CAAA,SAAS,KAAK,OAAO,CAAA,EAArB,wBAAqB;gBAER,qBAAM,eAAK,CAAC,IAAI,CACpC,mCAAmC,EACnC;wBACE,aAAa,EAAE,CAAC,qBAAqB,CAAC;qBACvC,EACD;wBACE,OAAO,EAAE;4BACP,aAAa,EAAE,iBAAU,IAAI,CAAE;yBAChC;qBACF,CACF,EAAA;;gBAVK,aAAa,GAAG,SAUrB;gBACD,OAAO,GAAG,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC;gBAChC,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,QAAQ,CAAC;;;gBACpD,IAAI,SAAS,KAAK,OAAO,EAAE;oBAChC,OAAO,GAAG,OAAO,CAAC;iBACnB;;oBACD,sBAAO,EAAE,OAAO,SAAA,EAAE,IAAI,MAAA,EAAE,KAAK,OAAA,EAAE,EAAC;;;gBAEhC,sBAAO,EAAE,OAAO,SAAA,EAAE,IAAI,MAAA,EAAE,KAAK,OAAA,EAAE,EAAC;;;;KAEnC,CAAC;AAEF,wCAAwC;AACxC,+BAA+B;AAC/B,IAAM,qBAAqB,GAAG,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;gBAC9F,KAAsB,GAAG,CAAC,IAAI,EAA5B,SAAS,eAAA,EAAE,IAAI,UAAA,CAAc;gBAEJ,qBAAM,kBAAkB,CAAC,SAAS,EAAE,IAAI,CAAC,EAAA;;gBAApE,KAA2B,SAAyC,EAAlE,OAAO,aAAA,EAAE,IAAI,UAAA,EAAE,KAAK,WAAA;gBAC5B,IAAI,OAAO,EAAE;oBACX,GAAG,CAAC,IAAI,GAAG,EAAE,OAAO,SAAA,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,MAAA,EAAE,KAAK,OAAA,EAAE,CAAC;oBAC1D,IAAI,EAAE,CAAC;iBACR;qBAAM;oBACL,MAAM,IAAI,qBAAW,CAAC,YAAY,EAAE,GAAG,EAAE,4BAA4B,CAAC,CAAC;iBACxE;;;;KACF,CAAC,CAAC;AAEM,sDAAqB","sourcesContent":["import axios from 'axios';\nimport { NextFunction, Request, Response } from 'express';\nimport { OAuth2Client } from 'google-auth-library';\nimport CustomError from '../../CustomError';\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\nimport config from '../../config/index';\n\nconst client = new OAuth2Client(config.googleClientID);\n\n// 클라이언트에게 전달받은 token의 유효성을 체크하고 사용자 정보를 리턴한다.\nconst getUserInfoByOauth = async (loginType: string, code: string) => {\n  let idToken;\n  let name;\n  let email;\n  try {\n    if (loginType === 'google') {\n      const ticket = await client.verifyIdToken({\n        idToken: code,\n        audience: config.googleClientID,\n      });\n      const payload = ticket.getPayload();\n      if (payload) {\n        idToken = payload.sub;\n        name = payload.name;\n        email = payload.email;\n      }\n    } else if (loginType === 'github') {\n      // 인가코드를 이용하여 AccessToken 발급\n      const accessToken = await axios.post(\n        'https://github.com/login/oauth/access_token',\n        {\n          code,\n          client_id: config.githubClientID,\n          client_secret: config.githubClientSecret,\n        },\n        {\n          headers: {\n            accept: 'application/json',\n          },\n        }\n      );\n\n      // 사용자 정보 가져오기\n      const { data: userInfo } = await axios.get('https://api.github.com/user', {\n        headers: {\n          Authorization: `token ${accessToken.data.access_token}`,\n        },\n      });\n      idToken = userInfo.id;\n      name = userInfo.name;\n    } else if (loginType === 'kakao') {\n      // 사용자 정보 가져오기\n      const kakaoResponse = await axios.post(\n        'https://kapi.kakao.com/v2/user/me',\n        {\n          property_keys: ['kakao_account.email'],\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${code}`,\n          },\n        }\n      );\n      idToken = kakaoResponse.data.id;\n      name = kakaoResponse.data.kakao_account.profile.nickname;\n    } else if (loginType === 'guest') {\n      idToken = 'Guest';\n    }\n    return { idToken, name, email };\n  } catch (error) {\n    return { idToken, name, email };\n  }\n};\n\n// 클라이언트에게 전달받은 token을 이용해 사용자 정보를 가져온다.\n// 각 소셜 로그인에 따라 Oauth 서버를 호출한다.\nconst isTokenValidWithOauth = asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n  const { loginType, code } = req.body;\n  // 리펙토링 필요\n  const { idToken, name, email } = await getUserInfoByOauth(loginType, code);\n  if (idToken) {\n    req.user = { idToken, tokenType: loginType, name, email };\n    next();\n  } else {\n    throw new CustomError('OauthError', 400, 'Oauth parameter is Invalid');\n  }\n});\n\nexport { isTokenValidWithOauth };\n"]}