{"version":3,"file":"isAccessTokenValid.js","sourceRoot":"/","sources":["api/middlewares/isAccessTokenValid.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,0CAAyC;AACzC,6DAA4D;AAC5D,wCAAiE;AACjE,kEAA4C;AAE5C,2BAA2B;AAC3B,IAAM,kBAAkB,GAAG,IAAA,qCAAiB,EAAC,UAAgB,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;;yBACtG,CAAA,GAAG,CAAC,OAAO,CAAC,aAAa,IAAI,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA,EAA3E,wBAA2E;oBACvE,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBAClC,qBAAM,IAAA,eAAS,EAAC,KAAK,CAAC,EAAA;;oBAApC,WAAW,GAAG,SAAsB;oBAC1C,IAAI,CAAC,IAAA,wBAAkB,EAAC,WAAW,CAAC;wBAAE,MAAM,IAAI,qBAAW,CAAC,mBAAmB,EAAE,GAAG,EAAE,eAAe,CAAC,CAAC;oBAE1F,qBAAM,WAAI,CAAC,aAAa,CAAC,WAAW,CAAC,OAAO,CAAC,EAAA;;oBAApD,IAAI,GAAG,SAA6C;oBAC1D,IAAI,CAAC,IAAI,EAAE;wBACT,MAAM,IAAI,qBAAW,CAAC,mBAAmB,EAAE,GAAG,EAAE,gBAAgB,CAAC,CAAC;qBACnE;yBAAM;wBACL,GAAG,CAAC,IAAI,GAAG;4BACT,GAAG,EAAE,IAAI,CAAC,GAAG;4BACb,QAAQ,EAAE,IAAI,CAAC,QAAQ;4BACvB,SAAS,EAAE,IAAI,CAAC,SAAS;yBAC1B,CAAC;qBACH;oBACD,IAAI,EAAE,CAAC;;wBAEP,MAAM,IAAI,qBAAW,CAAC,mBAAmB,EAAE,GAAG,EAAE,iBAAiB,CAAC,CAAC;;;;;CAEtE,CAAC,CAAC;AACM,gDAAkB","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { User } from '../../models/User';\r\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\r\nimport { isValidAccessToken, verifyJWT } from '../../utills/jwt';\r\nimport CustomError from '../../CustomError';\r\n\r\n// Access Token이 유효한지 확인한다.\r\nconst isAccessTokenValid = asyncErrorWrapper(async function (req: Request, res: Response, next: NextFunction) {\r\n  if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {\r\n    const token = req.headers.authorization.split(' ')[1];\r\n    const decodedUser = await verifyJWT(token);\r\n    if (!isValidAccessToken(decodedUser)) throw new CustomError('JsonWebTokenError', 401, 'Invaild Token');\r\n\r\n    const user = await User.findByIdToken(decodedUser.idToken);\r\n    if (!user) {\r\n      throw new CustomError('JsonWebTokenError', 401, 'User not found');\r\n    } else {\r\n      req.user = {\r\n        _id: user._id,\r\n        nickName: user.nickName,\r\n        tokenType: user.tokenType,\r\n      };\r\n    }\r\n    next();\r\n  } else {\r\n    throw new CustomError('JsonWebTokenError', 401, 'Token not found');\r\n  }\r\n});\r\nexport { isAccessTokenValid };\r\n"]}