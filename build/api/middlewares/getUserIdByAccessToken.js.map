{"version":3,"file":"getUserIdByAccessToken.js","sourceRoot":"/","sources":["api/middlewares/getUserIdByAccessToken.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,0CAAyC;AACzC,6DAA4D;AAC5D,kEAA4C;AAC5C,wCAAiE;AAEjE,IAAM,qBAAqB,GAAG,UAAC,aAAiC;IAC9D,OAAO,CAAC,CAAC,CAAC,aAAa,IAAI,aAAa,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACjE,CAAC,CAAC;AAEF,IAAM,QAAQ,GAAG,UAAC,aAAqB;IACrC,OAAO,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC;AAEF,uBAAuB;AACvB,sCAAsC;AACtC,mCAAmC;AACtB,QAAA,sBAAsB,GAAG,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;gBAEpG,aAAa,GAAK,GAAG,CAAC,OAAO,cAAhB,CAAiB;qBAElC,qBAAqB,CAAC,aAAa,CAAC,EAApC,wBAAoC;;;;gBAEhB,qBAAM,IAAA,eAAS,EAAC,QAAQ,CAAC,aAAuB,CAAC,CAAC,EAAA;;gBAAhE,WAAW,GAAG,SAAkD;gBACtE,IAAI,CAAC,IAAA,wBAAkB,EAAC,WAAW,CAAC;oBAAE,MAAM,IAAI,qBAAW,CAAC,mBAAmB,EAAE,GAAG,EAAE,eAAe,CAAC,CAAC;qBACnG,CAAA,KAAK,IAAI,WAAW,CAAA,EAApB,wBAAoB;gBACtB,MAAM,GAAG,WAAW,CAAC,GAAG,CAAC;;oBAEZ,qBAAM,WAAI,CAAC,aAAa,CAAC,WAAW,CAAC,OAAO,CAAC,EAAA;;gBAApD,IAAI,GAAG,SAA6C;gBAC1D,IAAI,IAAI,EAAE;oBACR,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC;iBACnB;;;;;;;gBAIP,GAAG,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;gBAC3B,IAAI,EAAE,CAAC;;;;KACR,CAAC,CAAC","sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { User } from '../../models/User';\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\nimport CustomError from '../../CustomError';\nimport { isValidAccessToken, verifyJWT } from '../../utills/jwt';\n\nconst hasTokenByAuthHeaders = (authorization: string | undefined): boolean => {\n  return !!(authorization && authorization.startsWith('Bearer'));\n};\n\nconst getToken = (authorization: string): string => {\n  return authorization.split(' ')[1];\n};\n\n// 리펙토링 필요(if esle 최소화)\n// Access Token을 이용해 로그인 된 사용자인지 판단한다.\n// 로그인된 사용자일 경우 req.user._id를 세팅한다.\nexport const getUserIdByAccessToken = asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n  let userId;\n  const { authorization } = req.headers;\n\n  if (hasTokenByAuthHeaders(authorization)) {\n    try {\n      const decodedUser = await verifyJWT(getToken(authorization as string));\n      if (!isValidAccessToken(decodedUser)) throw new CustomError('JsonWebTokenError', 401, 'Invaild Token');\n      if ('_id' in decodedUser) {\n        userId = decodedUser._id;\n      } else {\n        const user = await User.findByIdToken(decodedUser.idToken);\n        if (user) {\n          userId = user._id;\n        }\n      }\n    } catch (err) {}\n  }\n  req.user = { _id: userId };\n  next();\n});\n"]}