{"version":3,"file":"nickNameDuplicationCheck.js","sourceRoot":"/","sources":["api/middlewares/nickNameDuplicationCheck.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,0CAAyC;AACzC,6DAA4D;AAE5D,+BAA+B;AAC/B,IAAM,wBAAwB,GAAG,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;gBACjG,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,QAAQ,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;qBACrD,QAAQ,EAAR,wBAAQ;gBACG,qBAAM,WAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAA;;gBAA1C,IAAI,GAAG,SAAmC;gBAChD,IAAI,IAAI,EAAE;oBACR,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;4BAC1B,OAAO,EAAE,yBAAyB;4BAClC,QAAQ,EAAE,IAAI;yBACf,CAAC,EAAC;iBACJ;;;gBAEH,IAAI,EAAE,CAAC;;;;KACR,CAAC,CAAC;AAEM,4DAAwB","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { User } from '../../models/User';\r\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\r\n\r\n// 회원 정보 수정 시 닉네임이 중복되었는지 체크한다.\r\nconst nickNameDuplicationCheck = asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n  const nickName = req.query.nickName || req.body.nickName;\r\n  if (nickName) {\r\n    const user = await User.findByNickName(nickName);\r\n    if (user) {\r\n      return res.status(200).json({\r\n        message: `Nickname is duplicated.`,\r\n        isExists: true,\r\n      });\r\n    }\r\n  }\r\n  next();\r\n});\r\n\r\nexport { nickNameDuplicationCheck };\r\n"]}