{"version":3,"file":"nickNameDuplicationCheck.js","sourceRoot":"/","sources":["api/middlewares/nickNameDuplicationCheck.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,6DAA4D;AAC5D,0CAAyC;AAEzC,+BAA+B;AAC/B,IAAM,wBAAwB,GAAG,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;gBACjG,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,QAAQ,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;qBACrD,QAAQ,EAAR,wBAAQ;gBACG,qBAAM,WAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAA;;gBAA1C,IAAI,GAAG,SAAmC;gBAChD,IAAI,IAAI,EAAE;oBACR,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;4BAC1B,OAAO,EAAE,yBAAyB;4BAClC,QAAQ,EAAE,IAAI;yBACf,CAAC,EAAC;iBACJ;;;gBAEH,IAAI,EAAE,CAAC;;;;KACR,CAAC,CAAC;AAEM,4DAAwB","sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\nimport { User } from '../../models/User';\n\n// 회원 정보 수정 시 닉네임이 중복되었는지 체크한다.\nconst nickNameDuplicationCheck = asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n  const nickName = req.query.nickName || req.body.nickName;\n  if (nickName) {\n    const user = await User.findByNickName(nickName);\n    if (user) {\n      return res.status(200).json({\n        message: `Nickname is duplicated.`,\n        isExists: true,\n      });\n    }\n  }\n  next();\n});\n\nexport { nickNameDuplicationCheck };\n"]}