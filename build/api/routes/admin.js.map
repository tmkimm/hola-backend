{"version":3,"file":"admin.js","sourceRoot":"/","sources":["api/routes/admin.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mCAAkE;AAClE,4CAA6C;AAC7C,6DAA4D;AAE5D,oFAAmF;AAEnF,IAAM,KAAK,GAAG,IAAA,gBAAM,GAAE,CAAC;AAEvB,mBAAe,UAAC,GAAW;IACzB;;;;OAIG;IACH,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAEzB,oBAAoB;IACpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAqDG;IACH,aAAa;IACb,KAAK,CAAC,IAAI,CACR,QAAQ,EACR,mDAAwB,EACxB,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBAC9D,OAAO,GAAK,GAAG,CAAC,IAAa,QAAtB,CAAuB;oBACqC,qBAAM,IAAA,aAAM,EAAC,OAAO,CAAC,EAAA;;oBAA1F,KAAqE,SAAqB,EAAxF,GAAG,SAAA,EAAE,QAAQ,cAAA,EAAE,KAAK,WAAA,EAAE,aAAa,mBAAA,EAAE,WAAW,iBAAA,EAAE,YAAY,kBAAA;oBACtE,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,YAAY,EAAE;wBACjC,QAAQ,EAAE,MAAM;wBAChB,QAAQ,EAAE,IAAI;wBACd,MAAM,EAAE,IAAI;wBACZ,MAAM,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,SAAS;qBAC5C,CAAC,CAAC;oBACH,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;4BAC1B,YAAY,EAAE,IAAI;4BAClB,GAAG,KAAA;4BACH,QAAQ,UAAA;4BACR,KAAK,OAAA;4BACL,aAAa,eAAA;4BACb,WAAW,aAAA;yBACZ,CAAC,EAAC;;;SACJ,CAAC,CACH,CAAC;AACJ,CAAC,EAAC","sourcesContent":["import { Router, Request, Response, NextFunction } from 'express';\nimport { SignIn } from '../../services/auth';\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\nimport { IUser, User as UserModel } from '../../models/User';\nimport { isPasswordValidWithAdmin } from '../middlewares/isPasswordValidWithAdmin';\n\nconst route = Router();\n\nexport default (app: Router) => {\n  /**\n   * @swagger\n   * tags:\n        - name: admin\n   */\n  app.use('/admin', route);\n\n  // #region Admin 로그인\n  /**\n   *\n   * @swagger\n   * paths:\n   *   /admin/login:\n   *    post:\n   *      tags:\n   *        - admin\n   *      summary: Admin 로그인\n   *      description: admin 계정으로 로그인한다.\n   *      requestBody:\n   *        content:\n   *          application/json:\n   *            schema:\n   *              type: object\n   *              properties:\n   *                id:\n   *                  type: string\n   *                  description: admin id\n   *                password:\n   *                  type: string\n   *                  description: admin password\n   *              example:\n   *                id: \"admin\"\n   *                password: \"pw\"\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: object\n   *                properties:\n   *                  loginSuccess:\n   *                    type: boolean\n   *                    description: 로그인 성공 여부\n   *                  _id:\n   *                    type: string\n   *                    description: 사용자 id\n   *                  nickName:\n   *                    type: string\n   *                    description: 닉네임\n   *                  image:\n   *                    type: string\n   *                    description: 사용자 이미지\n   *                  accessToken:\n   *                    type: string\n   *                    description: access token\n   *                example:\n   *                  loginSuccess: true\n   *                  id: \"63455237c1ddf6ff6c0d8d94\"\n   *                  nickName: \"hola\"\n   *                  image: \"default.png\"\n   */\n  // #endregion\n  route.post(\n    '/login',\n    isPasswordValidWithAdmin,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { idToken } = req.user as IUser;\n      const { _id, nickName, image, likeLanguages, accessToken, refreshToken } = await SignIn(idToken);\n      res.cookie('R_AUTH', refreshToken, {\n        sameSite: 'none',\n        httpOnly: true,\n        secure: true,\n        maxAge: 1000 * 60 * 60 * 24 * 14, // 2 Week\n      });\n      return res.status(200).json({\n        loginSuccess: true,\n        _id,\n        nickName,\n        image,\n        likeLanguages,\n        accessToken,\n      });\n    }),\n  );\n};\n"]}