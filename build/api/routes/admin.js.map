{"version":3,"file":"admin.js","sourceRoot":"/","sources":["api/routes/admin.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mCAAkE;AAClE,8CAAiF;AAEjF,6DAA4D;AAC5D,0CAA6D;AAC7D,oFAAmF;AAEnF,IAAM,KAAK,GAAG,IAAA,gBAAM,GAAE,CAAC;AAEvB,mBAAe,UAAC,GAAW;IACzB;;;;OAIG;IACH,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAEzB,oBAAoB;IACpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAqDG;IACH,aAAa;IACb,KAAK,CAAC,IAAI,CACR,QAAQ,EACR,mDAAwB,EACxB,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBAC9D,OAAO,GAAK,GAAG,CAAC,IAAa,QAAtB,CAAuB;oBAChC,mBAAmB,GAAG,IAAI,mBAAW,CAAC,WAAS,CAAC,CAAC;oBACoB,qBAAM,mBAAmB,CAAC,MAAM,CACzG,OAAO,CACR,EAAA;;oBAFK,KAAqE,SAE1E,EAFO,GAAG,SAAA,EAAE,QAAQ,cAAA,EAAE,KAAK,WAAA,EAAE,aAAa,mBAAA,EAAE,WAAW,iBAAA,EAAE,YAAY,kBAAA;oBAGtE,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,YAAY,EAAE;wBACjC,QAAQ,EAAE,MAAM;wBAChB,QAAQ,EAAE,IAAI;wBACd,MAAM,EAAE,IAAI;wBACZ,MAAM,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,SAAS;qBAC5C,CAAC,CAAC;oBACH,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;4BAC1B,YAAY,EAAE,IAAI;4BAClB,GAAG,KAAA;4BACH,QAAQ,UAAA;4BACR,KAAK,OAAA;4BACL,aAAa,eAAA;4BACb,WAAW,aAAA;yBACZ,CAAC,EAAC;;;SACJ,CAAC,CACH,CAAC;AACJ,CAAC,EAAC","sourcesContent":["import { Router, Request, Response, NextFunction } from 'express';\r\nimport { FeedbackService, AuthService, UserService } from '../../services/index';\r\nimport { Feedback as FeedbackModel } from '../../models/Feedback';\r\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\r\nimport { IUser, User as UserModel } from '../../models/User';\r\nimport { isPasswordValidWithAdmin } from '../middlewares/isPasswordValidWithAdmin';\r\n\r\nconst route = Router();\r\n\r\nexport default (app: Router) => {\r\n  /**\r\n   * @swagger\r\n   * tags:\r\n        - name: admin\r\n   */\r\n  app.use('/admin', route);\r\n\r\n  // #region Admin 로그인\r\n  /**\r\n   *\r\n   * @swagger\r\n   * paths:\r\n   *   /admin/login:\r\n   *    post:\r\n   *      tags:\r\n   *        - admin\r\n   *      summary: Admin 로그인\r\n   *      description: admin 계정으로 로그인한다.\r\n   *      requestBody:\r\n   *        content:\r\n   *          application/json:\r\n   *            schema:\r\n   *              type: object\r\n   *              properties:\r\n   *                id:\r\n   *                  type: string\r\n   *                  description: admin id\r\n   *                password:\r\n   *                  type: string\r\n   *                  description: admin password\r\n   *              example:\r\n   *                id: \"admin\"\r\n   *                password: \"pw\"\r\n   *      responses:\r\n   *        200:\r\n   *          description: successful operation\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                type: object\r\n   *                properties:\r\n   *                  loginSuccess:\r\n   *                    type: boolean\r\n   *                    description: 로그인 성공 여부\r\n   *                  _id:\r\n   *                    type: string\r\n   *                    description: 사용자 id\r\n   *                  nickName:\r\n   *                    type: string\r\n   *                    description: 닉네임\r\n   *                  image:\r\n   *                    type: string\r\n   *                    description: 사용자 이미지\r\n   *                  accessToken:\r\n   *                    type: string\r\n   *                    description: access token\r\n   *                example:\r\n   *                  loginSuccess: true\r\n   *                  id: \"63455237c1ddf6ff6c0d8d94\"\r\n   *                  nickName: \"hola\"\r\n   *                  image: \"default.png\"\r\n   */\r\n  // #endregion\r\n  route.post(\r\n    '/login',\r\n    isPasswordValidWithAdmin,\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const { idToken } = req.user as IUser;\r\n      const AuthServiceInstance = new AuthService(UserModel);\r\n      const { _id, nickName, image, likeLanguages, accessToken, refreshToken } = await AuthServiceInstance.SignIn(\r\n        idToken,\r\n      );\r\n      res.cookie('R_AUTH', refreshToken, {\r\n        sameSite: 'none',\r\n        httpOnly: true,\r\n        secure: true,\r\n        maxAge: 1000 * 60 * 60 * 24 * 14, // 2 Week\r\n      });\r\n      return res.status(200).json({\r\n        loginSuccess: true,\r\n        _id,\r\n        nickName,\r\n        image,\r\n        likeLanguages,\r\n        accessToken,\r\n      });\r\n    }),\r\n  );\r\n};\r\n"]}