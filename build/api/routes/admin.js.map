{"version":3,"file":"admin.js","sourceRoot":"/","sources":["api/routes/admin.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mCAAkE;AAClE,8CAAiF;AACjF,kDAAkE;AAClE,6DAA4D;AAC5D,0CAA6D;AAC7D,oFAAmF;AAEnF,IAAM,KAAK,GAAG,IAAA,gBAAM,GAAE,CAAC;AAEvB,mBAAe,UAAC,GAAW;IACzB;;;QAGI;IACJ,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAEzB,YAAY;IACZ,KAAK,CAAC,IAAI,CACR,QAAQ,EACR,mDAAwB,EACxB,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBAC9D,OAAO,GAAK,GAAG,CAAC,IAAa,QAAtB,CAAuB;oBAChC,mBAAmB,GAAG,IAAI,mBAAW,CAAC,WAAS,CAAC,CAAC;oBACoB,qBAAM,mBAAmB,CAAC,MAAM,CACzG,OAAO,CACR,EAAA;;oBAFK,KAAqE,SAE1E,EAFO,GAAG,SAAA,EAAE,QAAQ,cAAA,EAAE,KAAK,WAAA,EAAE,aAAa,mBAAA,EAAE,WAAW,iBAAA,EAAE,YAAY,kBAAA;oBAGtE,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,YAAY,EAAE;wBACjC,QAAQ,EAAE,MAAM;wBAChB,QAAQ,EAAE,IAAI;wBACd,MAAM,EAAE,IAAI;wBACZ,MAAM,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,SAAS;qBAC5C,CAAC,CAAC;oBACH,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;4BAC1B,YAAY,EAAE,IAAI;4BAClB,GAAG,KAAA;4BACH,QAAQ,UAAA;4BACR,KAAK,OAAA;4BACL,aAAa,eAAA;4BACb,WAAW,aAAA;yBACZ,CAAC,EAAC;;;SACJ,CAAC,CACH,CAAC;IAEF,SAAS;IACT,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,UAAgB,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;;wBACvE,KAAsB,GAAG,CAAC,IAAI,EAA5B,MAAM,YAAA,EAAE,OAAO,aAAA,CAAc;wBAE/B,uBAAuB,GAAG,IAAI,uBAAe,CAAC,mBAAa,CAAC,CAAC;wBAClD,qBAAM,uBAAuB,CAAC,gBAAgB,CAAC,MAAM,EAAE,OAAO,CAAC,EAAA;;wBAA1E,QAAQ,GAAG,SAA+D;wBAChF,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAC;;;;KACvC,CAAC,CAAC;AACL,CAAC,EAAC","sourcesContent":["import { Router, Request, Response, NextFunction } from 'express';\nimport { FeedbackService, AuthService, UserService } from '../../services/index';\nimport { Feedback as FeedbackModel } from '../../models/Feedback';\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\nimport { IUser, User as UserModel } from '../../models/User';\nimport { isPasswordValidWithAdmin } from '../middlewares/isPasswordValidWithAdmin';\n\nconst route = Router();\n\nexport default (app: Router) => {\n  /*\n    글에 관련된 Router를 정의한다.\n    등록 / 수정 / 삭제하려는 사용자의 정보는 Access Token을 이용하여 처리한다.\n    */\n  app.use('/admin', route);\n\n  // Admin 로그인\n  route.post(\n    '/login',\n    isPasswordValidWithAdmin,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { idToken } = req.user as IUser;\n      const AuthServiceInstance = new AuthService(UserModel);\n      const { _id, nickName, image, likeLanguages, accessToken, refreshToken } = await AuthServiceInstance.SignIn(\n        idToken,\n      );\n      res.cookie('R_AUTH', refreshToken, {\n        sameSite: 'none',\n        httpOnly: true,\n        secure: true,\n        maxAge: 1000 * 60 * 60 * 24 * 14, // 2 Week\n      });\n      return res.status(200).json({\n        loginSuccess: true,\n        _id,\n        nickName,\n        image,\n        likeLanguages,\n        accessToken,\n      });\n    }),\n  );\n\n  // 어드민 등록\n  route.post('/', async function (req: Request, res: Response, next: NextFunction) {\n    const { rating, content } = req.body;\n\n    const FeedbackServiceInstance = new FeedbackService(FeedbackModel);\n    const feedback = await FeedbackServiceInstance.registerFeedback(rating, content);\n    return res.status(201).json(feedback);\n  });\n};\n"]}