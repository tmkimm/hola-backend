{"version":3,"file":"campaign.js","sourceRoot":"/","sources":["api/routes/campaign.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextFunction, Request, Response, Router } from 'express';\nimport { Types } from 'mongoose';\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\nimport { Advertisement as AdvertisementModel } from '../../models/Advertisement';\nimport { AdvertisementLog as AdvertisementLogModel } from '../../models/AdvertisementLog';\nimport { Campaign as CampaignModel } from '../../models/Campaign';\nimport { CampaignService } from '../../services/campaign';\nimport { isAccessTokenValidWithAdmin } from '../middlewares/isAccessTokenValidWithAdmin';\n\nconst route = Router();\n\nexport default (app: Router) => {\n  /**\n   * @swagger\n   * tags:\n        - name: campaigns\n          description: 캠페인에 관련된 API\n   */\n  app.use('/campaigns', route);\n\n  // #region 캠페인 리스트 조회(페이징)\n  /**\n   * @swagger\n   * paths:\n   *   /campaigns:\n   *    get:\n   *      tags:\n   *        - 캠페인 관리(어드민)\n   *      summary: 캠페인 리스트 조회(Pagination)\n   *      description: 캠페인 리스트를 조회한다.\n   *      parameters:\n   *        - name: accessToken\n   *          in: header\n   *          description: access token\n   *          required: false\n   *          schema:\n   *            type: string\n   *        - name: page\n   *          in: query\n   *          description: 현재 페이지(기본 1)\n   *          required: true\n   *          schema:\n   *            type: number\n   *          example: 1\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: array\n   *                items:\n   *                  $ref: '#/components/schemas/Campaign'\n   */\n  // #endregion\n  route.get(\n    '/',\n    isAccessTokenValidWithAdmin,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { page } = req.query;\n      const CampaignServiceInstance = new CampaignService(CampaignModel, AdvertisementModel, AdvertisementLogModel);\n      const campaigns = await CampaignServiceInstance.findCampaignList(page);\n      return res.status(200).json(campaigns);\n    })\n  );\n\n  // #region 캠페인 상세 보기\n  /**\n   * @swagger\n   * paths:\n   *   /campaigns/{id}:\n   *    get:\n   *      tags:\n   *        - 캠페인 관리(어드민)\n   *      summary: 캠페인 상세 보기\n   *      description: '캠페인 상세 정보를 조회한다.'\n   *      parameters:\n   *        - name: accessToken\n   *          in: header\n   *          description: access token\n   *          required: false\n   *          schema:\n   *            type: string\n   *        - name: id\n   *          in: path\n   *          description: 캠페인 Id\n   *          required: true\n   *          example: '635a91e837ad67001412321a'\n   *          schema:\n   *            type: string\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                $ref: '#/components/schemas/Campaign'\n   *        404:\n   *          description: Campaign not found\n   */\n  // #endregion\n  route.get(\n    '/:id',\n    isAccessTokenValidWithAdmin,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const campaignId = req.params.id;\n      const CampaignServiceInstance = new CampaignService(CampaignModel, AdvertisementModel, AdvertisementLogModel);\n      const campaign = await CampaignServiceInstance.findCampaign(campaignId);\n      return res.status(200).json(campaign);\n    })\n  );\n\n  // #region 캠페인의 광고 리스트 보기\n  /**\n   * @swagger\n   * paths:\n   *   /campaigns/{id}/advertisement:\n   *    get:\n   *      tags:\n   *        - 캠페인 관리(어드민)\n   *      summary: 캠페인의 광고 리스트 보기\n   *      description: '캠페인의 등록된 광고 리스트를 조회한다.'\n   *      parameters:\n   *        - name: accessToken\n   *          in: header\n   *          description: access token\n   *          required: false\n   *          schema:\n   *            type: string\n   *        - name: id\n   *          in: path\n   *          description: 캠페인 Id\n   *          required: true\n   *          example: '635a91e837ad67001412321a'\n   *          schema:\n   *            type: string\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                $ref: '#/components/schemas/Advertisement'\n   */\n  // #endregion\n  route.get(\n    '/:id/advertisements',\n    isAccessTokenValidWithAdmin,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const campaignId = req.params.id;\n      const CampaignServiceInstance = new CampaignService(CampaignModel, AdvertisementModel, AdvertisementLogModel);\n      const campaign = await CampaignServiceInstance.findAdvertisementInCampaign(campaignId);\n      return res.status(200).json(campaign);\n    })\n  );\n\n  // #region 광고 성과 집계\n  /**\n   * @swagger\n   * paths:\n   *   /campaigns/{id}/result:\n   *    get:\n   *      tags:\n   *        - 캠페인 관리(어드민)\n   *      summary: 캠페인의 광고 성과 집계\n   *      description: '광고 성과를 조회한다.'\n   *      parameters:\n   *        - name: accessToken\n   *          in: header\n   *          description: access token\n   *          required: false\n   *          schema:\n   *            type: string\n   *        - name: id\n   *          in: path\n   *          description: 캠페인 Id\n   *          required: true\n   *          example: '635a91e837ad67001412321a'\n   *          schema:\n   *            type: string\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: object\n   *                properties:\n   *                  advertisementType:\n   *                    type: string\n   *                    description: 광고 유형(banner, event)\n   *                    example: 'banner'\n   *                  advertisementId:\n   *                    type: string\n   *                    description: 광고 ID\n   *                    example: '6513fd110c19093e9896c9a2'\n   *                  impression:\n   *                    type: number\n   *                    description: 노출 수\n   *                    example: 10000\n   *                  reach:\n   *                    type: number\n   *                    description: 클릭 수\n   *                    example: 2000\n   *                  reachRate:\n   *                    type: string\n   *                    description: 클릭률(%)\n   *                    example: 20%\n   *                  reachPrice:\n   *                    type: number\n   *                    description: 클릭 비용(클릭 수 * 전환당 단가)\n   *                    example: 1200000\n   */\n  // #endregion\n  route.get(\n    '/:id/result',\n    isAccessTokenValidWithAdmin,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const campaignId = req.params.id;\n      const CampaignServiceInstance = new CampaignService(CampaignModel, AdvertisementModel, AdvertisementLogModel);\n      const campaign = await CampaignServiceInstance.findCampaignResult(campaignId);\n      return res.status(200).json(campaign);\n    })\n  );\n\n  // #region POST - 캠페인 등록\n  /**\n   * @swagger\n   * paths:\n   *   /campaigns:\n   *    post:\n   *      tags:\n   *        - 캠페인 관리(어드민)\n   *      summary: 캠페인 등록\n   *      description: '신규 캠페인를 등록한다.'\n   *      parameters:\n   *        - name: accessToken\n   *          in: header\n   *          description: access token\n   *          required: false\n   *          schema:\n   *            type: string\n   *      requestBody:\n   *        content:\n   *          application/json:\n   *            schema:\n   *              $ref: '#/components/schemas/Campaign'\n   *      responses:\n   *        201:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: array\n   *                items:\n   *                  $ref: '#/components/schemas/Campaign'\n   *        400:\n   *          description: Invaild campaign data\n   *        401:\n   *          $ref: '#/components/responses/UnauthorizedError'\n   */\n  // #endregion\n  route.post(\n    '/',\n    isAccessTokenValidWithAdmin,\n    asyncErrorWrapper(async function (req: Request, res: Response, next: NextFunction) {\n      try {\n        const campaignDTO = req.body;\n        const CampaignServiceInstance = new CampaignService(CampaignModel, AdvertisementModel, AdvertisementLogModel);\n        const campaign = await CampaignServiceInstance.createCampaign(campaignDTO);\n        return res.status(201).json(campaign);\n      } catch (error) {\n        return res.status(400).json({\n          errors: [\n            {\n              location: 'body',\n              param: 'name',\n              error: 'TypeError',\n              message: 'must be String',\n            },\n          ],\n          error,\n        });\n      }\n    })\n  );\n\n  // #region 캠페인 수정\n  /**\n   * @swagger\n   * paths:\n   *   /campaigns/{id}:\n   *    put:\n   *      tags:\n   *        - 캠페인 관리(어드민)\n   *      summary: 캠페인 수정\n   *      description: 캠페인를 수정한다.\n   *      parameters:\n   *        - name: accessToken\n   *          in: header\n   *          description: access token\n   *          required: false\n   *          schema:\n   *            type: string\n   *        - name: id\n   *          in: path\n   *          description: 캠페인 Id\n   *          required: true\n   *          example: '635a91e837ad67001412321a'\n   *          schema:\n   *            type: string\n   *      requestBody:\n   *        content:\n   *          application/json:\n   *            schema:\n   *              $ref: '#/components/schemas/Campaign'\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: array\n   *                items:\n   *                  $ref: '#/components/schemas/Campaign'\n   *        400:\n   *          description: Invaild campaign data\n   *        401:\n   *          $ref: '#/components/responses/UnauthorizedError'\n   */\n  // #endregion\n  route.put(\n    '/:id',\n    isAccessTokenValidWithAdmin,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { id } = req.params;\n      const campaignDTO = req.body;\n      const CampaignServiceInstance = new CampaignService(CampaignModel, AdvertisementModel, AdvertisementLogModel);\n      const campaign = await CampaignServiceInstance.modifyCampaign(Types.ObjectId(id), campaignDTO);\n\n      return res.status(200).json(campaign);\n    })\n  );\n\n  // #region 캠페인 삭제\n  /**\n   * @swagger\n   * paths:\n   *   /campaigns/{id}:\n   *    delete:\n   *      tags:\n   *        - 캠페인 관리(어드민)\n   *      summary: 캠페인 삭제\n   *      description: 캠페인를 삭제한다.\n   *      parameters:\n   *        - name: accessToken\n   *          in: header\n   *          description: access token\n   *          required: false\n   *          schema:\n   *            type: string\n   *        - name: id\n   *          in: path\n   *          description: 캠페인 Id\n   *          required: true\n   *          example: '60213d1c3126991a7cd1d287'\n   *          schema:\n   *            type: string\n   *      responses:\n   *        204:\n   *          description: successful operation\n   *        401:\n   *          $ref: '#/components/responses/UnauthorizedError'\n   *        404:\n   *          description: Campaign not found\n   */\n  // #endregion\n  route.delete(\n    '/:id',\n    isAccessTokenValidWithAdmin,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { id } = req.params;\n      const CampaignServiceInstance = new CampaignService(CampaignModel, AdvertisementModel, AdvertisementLogModel);\n      await CampaignServiceInstance.deleteCampaign(Types.ObjectId(id));\n      return res.status(204).json();\n    })\n  );\n};\n"]}