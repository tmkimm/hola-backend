{"version":3,"file":"reply.js","sourceRoot":"/","sources":["api/routes/reply.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mCAAkE;AAClE,qCAAiC;AACjC,8DAA6D;AAE7D,8CAA0D;AAC1D,8CAA+E;AAC/E,6DAA4D;AAI5D,IAAM,KAAK,GAAG,IAAA,gBAAM,GAAE,CAAC;AAEvB,mBAAe,UAAC,GAAW;IACzB;;;;;;;QAOI;IACJ,GAAG,CAAC,GAAG,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;IAEjC,SAAS;IACT,KAAK,CAAC,IAAI,CACR,GAAG,EACH,0BAAkB,EAClB,6BAAa,EACb,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBAChE,KAAiC,GAAG,CAAC,IAAI,EAAvC,MAAM,YAAA,EAAE,SAAS,eAAA,EAAE,OAAO,aAAA,CAAc;oBAC1C,QAAQ,GAAK,GAAG,CAAC,IAAI,SAAb,CAAc;oBACf,MAAM,GAAK,GAAG,CAAC,IAAa,IAAtB,CAAuB;oBAC1C,IAAI,CAAC,QAAQ;wBAAE,QAAQ,GAAG,oBAAK,CAAC;oBACnB,qBAAM,IAAA,qBAAa,EAAC,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAA;;oBAAxE,IAAI,GAAG,SAAiE;oBAE9E,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAC;;;SACnC,CAAC,CACH,CAAC;IAEF,SAAS;IACT,KAAK,CAAC,KAAK,CACT,MAAM,EACN,0BAAkB,EAClB,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBAChE,UAAU,GAAG,GAAG,CAAC,IAAI,CAAC;oBAC5B,UAAU,CAAC,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;oBAClB,WAAW,GAAK,GAAG,CAAC,IAAa,IAAtB,CAAuB;oBAE/B,qBAAM,IAAA,mBAAW,EAAC,UAAU,EAAE,WAAW,CAAC,EAAA;;oBAApD,OAAO,GAAG,SAA0C;oBAE1D,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,EAAC;;;SACtC,CAAC,CACH,CAAC;IACF,SAAS;IACT,KAAK,CAAC,MAAM,CACV,MAAM,EACN,0BAAkB,EAClB,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBAChE,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;oBACjB,MAAM,GAAK,GAAG,CAAC,IAAa,IAAtB,CAAuB;oBAE1C,qBAAM,IAAA,mBAAW,EAAC,gBAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,MAAM,CAAC,EAAA;;oBAAlD,SAAkD,CAAC;oBAEnD,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAC;;;SAC/B,CAAC,CACH,CAAC;AACJ,CAAC,EAAC","sourcesContent":["import { Router, Request, Response, NextFunction } from 'express';\nimport { Types } from 'mongoose';\nimport { isPostIdValid } from '../middlewares/isPostIdValid';\nimport { IUser } from '../../models/User';\nimport { isAccessTokenValid } from '../middlewares/index';\nimport { registerReply, deleteReply, modifyReply } from '../../services/reply';\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\nimport { Post as PostModel } from '../../models/Post';\nimport { Notification as NotificationModel } from '../../models/Notification';\n\nconst route = Router();\n\nexport default (app: Router) => {\n  /*\n    대댓글에 관련된 Router를 정의한다.\n    등록 / 수정 / 삭제하려는 사용자의 정보는 Access Token을 이용하여 처리한다.\n\n    # POST /posts/replies : 신규 대댓글 등록\n    # PATCH /posts/replies/:id : 대댓글 정보 수정\n    # DELETE /posts/replies/:id : 대댓글 삭제\n    */\n  app.use('/posts/replies', route);\n\n  // 대댓글 등록\n  route.post(\n    '/',\n    isAccessTokenValid,\n    isPostIdValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { postId, commentId, content } = req.body;\n      let { nickName } = req.body;\n      const { _id: userId } = req.user as IUser;\n      if (!nickName) nickName = `사용자`;\n      const post = await registerReply(userId, postId, commentId, content, nickName);\n\n      return res.status(201).json(post);\n    }),\n  );\n\n  // 대댓글 수정\n  route.patch(\n    '/:id',\n    isAccessTokenValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const commentDTO = req.body;\n      commentDTO._id = req.params.id;\n      const { _id: tokenUserId } = req.user as IUser;\n\n      const comment = await modifyReply(commentDTO, tokenUserId);\n\n      return res.status(200).json(comment);\n    }),\n  );\n  // 대댓글 삭제\n  route.delete(\n    '/:id',\n    isAccessTokenValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const replyId = req.params.id;\n      const { _id: userId } = req.user as IUser;\n\n      await deleteReply(Types.ObjectId(replyId), userId);\n\n      return res.status(204).json();\n    }),\n  );\n};\n"]}