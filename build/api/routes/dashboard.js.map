{"version":3,"file":"dashboard.js","sourceRoot":"/","sources":["api/routes/dashboard.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mCAAkE;AAGlE,0CAA6D;AAC7D,8CAAwE;AAExE,6DAA4D;AAC5D,0CAAsD;AACtD,0DAA8E;AAE9E,IAAM,KAAK,GAAG,IAAA,gBAAM,GAAE,CAAC;AAEvB,mBAAe,UAAC,GAAW;IACzB;;QAEI;IACJ,GAAG,CAAC,GAAG,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;IAE7B,2CAA2C;IAC3C,KAAK,CAAC,GAAG,CACP,cAAc,EACd,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBAChE,mBAAmB,GAAG,IAAI,mBAAW,CAAC,WAAS,EAAE,WAAS,EAAE,2BAAiB,CAAC,CAAC;oBACxE,qBAAM,mBAAmB,CAAC,sBAAsB,EAAE,EAAA;;oBAAzD,IAAI,GAAG,SAAkD;oBAC/D,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAC;;;SACnC,CAAC,CACH,CAAC;IAEF,kCAAkC;IAClC,KAAK,CAAC,GAAG,CACP,gBAAgB,EAChB,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBAChE,mBAAmB,GAAG,IAAI,mBAAW,CAAC,WAAS,EAAE,WAAS,EAAE,2BAAiB,CAAC,CAAC;oBACxE,qBAAM,mBAAmB,CAAC,wBAAwB,EAAE,EAAA;;oBAA3D,IAAI,GAAG,SAAoD;oBACjE,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAC;;;SACnC,CAAC,CACH,CAAC;AACJ,CAAC,EAAC","sourcesContent":["import { Router, Request, Response, NextFunction } from 'express';\nimport { Types } from 'mongoose';\nimport { isString } from '../../utills/isStringEmpty';\nimport { IUser, User as UserModel } from '../../models/User';\nimport { UserService, NotificationService } from '../../services/index';\nimport { nickNameDuplicationCheck, isAccessTokenValid, isUserIdValid } from '../middlewares/index';\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\nimport { Post as PostModel } from '../../models/Post';\nimport { Notification as NotificationModel } from '../../models/Notification';\n\nconst route = Router();\n\nexport default (app: Router) => {\n  /*\n    dashboard에 관련된 Router를 정의한다.\n    */\n  app.use('/dashboard', route);\n\n  // 사용자 정보 데일리 엑션(현재 총 회원 수, 오늘 가입자, 오늘 탈퇴자)\n  route.get(\n    '/users/daily',\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const UserServiceInstance = new UserService(PostModel, UserModel, NotificationModel);\n      const user = await UserServiceInstance.findDashboardDailyUser();\n      return res.status(200).json(user);\n    }),\n  );\n\n  // 일자별 회원 가입 현황(일자 / 신규 가입자 / 탈퇴자)\n  route.get(\n    '/users/history',\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const UserServiceInstance = new UserService(PostModel, UserModel, NotificationModel);\n      const user = await UserServiceInstance.findDashboardHistoryUser();\n      return res.status(200).json(user);\n    }),\n  );\n};\n"]}