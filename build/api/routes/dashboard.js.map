{"version":3,"file":"dashboard.js","sourceRoot":"/","sources":["api/routes/dashboard.ts"],"names":[],"mappings":"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","sourcesContent":["import { Router, Request, Response, NextFunction } from 'express';\r\nimport { DashboardService } from '../../services/index';\r\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\r\n\r\nconst route = Router();\r\n\r\nexport default (app: Router) => {\r\n  /**\r\n   * @swagger\r\n   * tags:\r\n        - name: dashboard\r\n        description: 어드민용 대시보드\r\n   */\r\n  app.use('/dashboard', route);\r\n\r\n  /**\r\n   * @swagger\r\n   * paths:\r\n   *   /dashboard/users/daily:\r\n   *    get:\r\n   *      tags:\r\n   *        - dashboard\r\n   *      summary: 사용자 데일리 액션\r\n   *      description: 총 회원 수, 오늘 가입자, 오늘 탈퇴자 조회\r\n   *      responses:\r\n   *        200:\r\n   *          description: successful operation\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                type: object\r\n   *                properties:\r\n   *                  totalUser:\r\n   *                    type: integer\r\n   *                    description: 총 회원 수\r\n   *                  signUp:\r\n   *                    type: integer\r\n   *                    description: 오늘 가입자 수\r\n   *                  signOut:\r\n   *                    type: integer\r\n   *                    description: 오늘 탈퇴자 조회 수\r\n   */\r\n  route.get(\r\n    '/users/daily',\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const DashboardServiceInstance = new DashboardService();\r\n      const user = await DashboardServiceInstance.findDailyUser();\r\n      return res.status(200).json(user);\r\n    }),\r\n  );\r\n\r\n  /**\r\n   * @swagger\r\n   * paths:\r\n   *   /dashboard/users/history:\r\n   *    get:\r\n   *      tags:\r\n   *        - dashboard\r\n   *      summary: 일자별 회원 가입 현황\r\n   *      description: 조회 기간에 해당되는 가입자 정보 집계\r\n   *      parameters:\r\n   *        - name: startDate\r\n   *          in: query\r\n   *          description: 조회 시작일\r\n   *          required: true\r\n   *          schema:\r\n   *            type: string\r\n   *            example: '2022-09-01'\r\n   *        - name: endDate\r\n   *          in: query\r\n   *          description: 조회 종료일\r\n   *          required: true\r\n   *          schema:\r\n   *            type: string\r\n   *            example: '2022-09-30'\r\n   *      responses:\r\n   *        200:\r\n   *          description: successful operation\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                type: array\r\n   *                items:\r\n   *                  type: object\r\n   *                  properties:\r\n   *                    _id:\r\n   *                      type: string\r\n   *                      description: 날짜\r\n   *                    signIn:\r\n   *                      type: integer\r\n   *                      description: 가입자 수\r\n   *                    signOut:\r\n   *                      type: integer\r\n   *                      description: 탈퇴자 수\r\n   *              example:\r\n   *              - _id: '2022-09-01'\r\n   *                signIn: 8\r\n   *                signOut: 3\r\n   */\r\n  route.get(\r\n    '/users/history',\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const { startDate, endDate } = req.query;\r\n      const DashboardServiceInstance = new DashboardService();\r\n      const user = await DashboardServiceInstance.findUserHistory(startDate, endDate);\r\n      return res.status(200).json(user);\r\n    }),\r\n  );\r\n\r\n  /**\r\n   * @swagger\r\n   * paths:\r\n   *   /dashboard/posts/daily:\r\n   *    get:\r\n   *      tags:\r\n   *        - dashboard\r\n   *      summary: 게시글 데일리 액션\r\n   *      description: 총오늘 전체 글 조회 수, 등록된 글, 글 마감 수, 글 삭제 수 조회\r\n   *      responses:\r\n   *        200:\r\n   *          description: successful operation\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                type: object\r\n   *                properties:\r\n   *                  totalView:\r\n   *                    type: integer\r\n   *                    description: 총 조회수\r\n   *                  created:\r\n   *                    type: integer\r\n   *                    description: 등록된 글\r\n   *                  closed:\r\n   *                    type: integer\r\n   *                    description: 마감된 글\r\n   *                  deleted:\r\n   *                    type: integer\r\n   *                    description: 삭제된 글\r\n   */\r\n  route.get(\r\n    '/posts/daily',\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const DashboardServiceInstance = new DashboardService();\r\n      const post = await DashboardServiceInstance.findDailyPost();\r\n      return res.status(200).json(post);\r\n    }),\r\n  );\r\n\r\n  /**\r\n   * @swagger\r\n   * paths:\r\n   *   /dashboard/posts/history:\r\n   *    get:\r\n   *      tags:\r\n   *        - dashboard\r\n   *      summary: 일자별 게시글 현황\r\n   *      description: 조회 기간에 해당되는 게시글 정보 집계(일자, 등록된 글, 마감된 글, 삭제된 글)\r\n   *      parameters:\r\n   *        - name: startDate\r\n   *          in: query\r\n   *          description: 조회 시작일\r\n   *          required: true\r\n   *          schema:\r\n   *            type: string\r\n   *            example: '2022-09-01'\r\n   *        - name: endDate\r\n   *          in: query\r\n   *          description: 조회 종료일\r\n   *          required: true\r\n   *          schema:\r\n   *            type: string\r\n   *            example: '2022-09-30'\r\n   *      responses:\r\n   *        200:\r\n   *          description: successful operation\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                type: array\r\n   *                items:\r\n   *                  type: object\r\n   *                  properties:\r\n   *                    _id:\r\n   *                      type: string\r\n   *                      description: 날짜\r\n   *                    created:\r\n   *                      type: integer\r\n   *                      description: 등록된 글\r\n   *                    closed:\r\n   *                      type: integer\r\n   *                      description: 마감된 글\r\n   *                    deleted:\r\n   *                      type: integer\r\n   *                      description: 삭제된 글\r\n   *              example:\r\n   *              - _id: '2022-09-01'\r\n   *                created: 8\r\n   *                closed: 3\r\n   *                deleted: 3\r\n   */\r\n  route.get(\r\n    '/posts/history',\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const { startDate, endDate } = req.query;\r\n      const DashboardServiceInstance = new DashboardService();\r\n      const user = await DashboardServiceInstance.findPostHistory(startDate, endDate);\r\n      return res.status(200).json(user);\r\n    }),\r\n  );\r\n\r\n  /**\r\n   * @swagger\r\n   * paths:\r\n   *   /dashboard/posts/filter-rank:\r\n   *    get:\r\n   *      tags:\r\n   *        - dashboard\r\n   *      summary: 가장 많이 조회해 본 언어 필터\r\n   *      description: 조회 기간에 해당되는 언어 필터링 순위\r\n   *      parameters:\r\n   *        - name: startDate\r\n   *          in: query\r\n   *          description: 조회 시작일\r\n   *          required: true\r\n   *          schema:\r\n   *            type: string\r\n   *            example: '2022-09-01'\r\n   *        - name: endDate\r\n   *          in: query\r\n   *          description: 조회 종료일\r\n   *          required: true\r\n   *          schema:\r\n   *            type: string\r\n   *            example: '2022-09-30'\r\n   *      responses:\r\n   *        200:\r\n   *          description: successful operation\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                type: array\r\n   *                items:\r\n   *                  type: object\r\n   *                  properties:\r\n   *                    _id:\r\n   *                      type: string\r\n   *                      description: 언어\r\n   *                    count:\r\n   *                      type: integer\r\n   *                      description: 조회 수\r\n   *              example:\r\n   *              - _id: 'javascript'\r\n   *                count: 15\r\n   *              - _id: 'react'\r\n   *                count: 10\r\n   */\r\n  // 가장 많이 조회해 본 언어 필터\r\n  route.get(\r\n    '/posts/filter-rank',\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const { startDate, endDate } = req.query;\r\n      const DashboardServiceInstance = new DashboardService();\r\n      const user = await DashboardServiceInstance.findPostFilterRank(startDate, endDate);\r\n      return res.status(200).json(user);\r\n    }),\r\n  );\r\n};\r\n"]}