{"version":3,"file":"dashboard.js","sourceRoot":"/","sources":["api/routes/dashboard.ts"],"names":[],"mappings":"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","sourcesContent":["import { Router, Request, Response, NextFunction } from 'express';\nimport { DashboardService } from '../../services/index';\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\n\nconst route = Router();\n\nexport default (app: Router) => {\n  /**\n   * @swagger\n   * paths:\n   *   /product:\n   *    post:\n   *      tags: [제품]\n   *      summary: 제품의 명칭과 셀렉트, 카테고리를 POST요청\n   *      description: 제품의 국,영문 명칭과 셀렉트, 카테고리를 요청해서 관리자페이지에 랜더\n   *      parameters:\n   *        - name: productNameKO\n   *          in: body\n   *          description: 제품 국문 이름\n   *          enum: [연필 깍기, 명함]\n   *          example: 공구류\n   *        - name: productNameEN\n   *          in: body\n   *          description: 제품 영문 이름 이 부분이 나중에 url 끝부분이 됨\n   *          enum: [hotsource]\n   *          example: hotsource\n   *      responses:\n   *        200:\n   *          description: OK 들어 간 데이터가 다시 반환\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: array\n   *                items:\n   *                  $ref: '#/components/schemas/Product'\n   *        400:\n   *          description: Invalid request\n   *        409:\n   *          description: Not have that kind of product\n   */\n  app.use('/dashboard', route);\n\n  // 사용자 정보 데일리(현재 총 회원 수, 오늘 가입자, 오늘 탈퇴자)\n  route.get(\n    '/users/daily',\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const DashboardServiceInstance = new DashboardService();\n      const user = await DashboardServiceInstance.findDailyUser();\n      return res.status(200).json(user);\n    }),\n  );\n\n  // 일자별 회원 가입 현황(일자, 신규 가입자, 탈퇴자)\n  route.get(\n    '/users/history',\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { startDate, endDate } = req.query;\n      const DashboardServiceInstance = new DashboardService();\n      const user = await DashboardServiceInstance.findUserHistory(startDate, endDate);\n      return res.status(200).json(user);\n    }),\n  );\n\n  // 게시글 데일리(오늘 전체 글 조회 수, 등록된 글, 글 마감 수, 글 삭제 수 )\n  route.get(\n    '/posts/daily',\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const DashboardServiceInstance = new DashboardService();\n      const post = await DashboardServiceInstance.findDailyPost();\n      return res.status(200).json(post);\n    }),\n  );\n\n  // 일자별 게시글 현황(일자, 등록된 글, 마감된 글, 삭제된 글)\n  route.get(\n    '/posts/history',\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { startDate, endDate } = req.query;\n      const DashboardServiceInstance = new DashboardService();\n      const user = await DashboardServiceInstance.findPostHistory(startDate, endDate);\n      return res.status(200).json(user);\n    }),\n  );\n\n  // 가장 많이 조회해 본 언어 필터\n  route.get(\n    '/posts/filter-rank',\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { startDate, endDate } = req.query;\n      const DashboardServiceInstance = new DashboardService();\n      const user = await DashboardServiceInstance.findPostFilterRank(startDate, endDate);\n      return res.status(200).json(user);\n    }),\n  );\n};\n"]}