{"version":3,"file":"user.js","sourceRoot":"/","sources":["api/routes/user.ts"],"names":[],"mappings":"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","sourcesContent":["import { Router, Request, Response, NextFunction } from 'express';\nimport { Types } from 'mongoose';\nimport { isString } from '../../utills/isStringEmpty';\nimport { IUser, User as UserModel } from '../../models/User';\nimport { UserService, NotificationService } from '../../services/index';\nimport { nickNameDuplicationCheck, isAccessTokenValid, isUserIdValid } from '../middlewares/index';\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\nimport { Post as PostModel } from '../../models/Post';\nimport { Notification as NotificationModel } from '../../models/Notification';\n\nconst route = Router();\n\nexport default (app: Router) => {\n  app.use('/users', route);\n\n  // s3 pre-sign url 발급\n  route.post(\n    '/sign',\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { fileName } = req.body;\n      const UserServiceInstance = new UserService(PostModel, UserModel, NotificationModel);\n      const signedUrlPut = await UserServiceInstance.getPreSignUrl(fileName);\n\n      return res.status(200).json({\n        preSignUrl: signedUrlPut,\n      });\n    }),\n  );\n\n  // 사용자 정보 조회\n  route.get(\n    '/',\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { nickName } = req.query;\n      if (!isString(nickName)) {\n        return res.status(400).json({\n          message: `parameter is incorrect`,\n        });\n      }\n\n      const UserServiceInstance = new UserService(PostModel, UserModel, NotificationModel);\n      const user = await UserServiceInstance.findByNickName(nickName);\n      return res.status(200).json(user);\n    }),\n  );\n\n  // 사용자 정보 상세 보기\n  route.get(\n    '/:id',\n    isUserIdValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { id } = req.params;\n\n      const UserServiceInstance = new UserService(PostModel, UserModel, NotificationModel);\n      const user = await UserServiceInstance.findById(Types.ObjectId(id));\n\n      return res.status(200).json(user);\n    }),\n  );\n\n  // 사용자 정보 수정\n  route.patch(\n    '/:id',\n    isUserIdValid,\n    isAccessTokenValid,\n    nickNameDuplicationCheck,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { id } = req.params;\n      const { _id: tokenUserId } = req.user as IUser;\n\n      const userDTO = req.body;\n      const UserServiceInstance = new UserService(PostModel, UserModel, NotificationModel);\n      const { userRecord, accessToken, refreshToken } = await UserServiceInstance.modifyUser(\n        Types.ObjectId(id),\n        tokenUserId,\n        userDTO,\n      );\n\n      res.cookie('R_AUTH', refreshToken, {\n        sameSite: 'none',\n        httpOnly: true,\n        secure: true,\n        maxAge: 1000 * 60 * 60 * 24 * 14, // 2 Week\n      });\n\n      return res.status(200).json({\n        _id: userRecord._id,\n        nickName: userRecord.nickName,\n        image: userRecord.image,\n        accessToken,\n        isExists: false,\n      });\n    }),\n  );\n\n  // 사용자 닉네임 중복 체크\n  route.get(\n    '/:id/exists',\n    nickNameDuplicationCheck,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      return res.status(200).json({\n        isExists: false,\n      });\n    }),\n  );\n\n  // 사용자 정보 삭제(회원탈퇴)\n  route.delete(\n    '/:id',\n    isUserIdValid,\n    isAccessTokenValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { id } = req.params;\n      const { _id: tokenUserId } = req.user as IUser;\n\n      const UserServiceInstance = new UserService(PostModel, UserModel, NotificationModel);\n      await UserServiceInstance.deleteUser(Types.ObjectId(id), tokenUserId);\n      return res.clearCookie('R_AUTH');\n      return res.status(204).json();\n    }),\n  );\n\n  // 사용자 관심 등록 리스트 조회\n  route.get('/likes/:id', isUserIdValid, async (req: Request, res: Response, next: NextFunction) => {\n    const { id } = req.params;\n    const UserServiceInstance = new UserService(PostModel, UserModel, NotificationModel);\n    const user = await UserServiceInstance.findUserLikes(Types.ObjectId(id));\n    return res.status(200).json(user);\n  });\n\n  // 사용자 읽은 목록  조회\n  route.get(\n    '/read-list/:id',\n    isUserIdValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { id } = req.params;\n      const UserServiceInstance = new UserService(PostModel, UserModel, NotificationModel);\n      const user = await UserServiceInstance.findReadList(Types.ObjectId(id));\n\n      return res.status(200).json(user);\n    }),\n  );\n\n  // 사용자 작성 글 목록 조회\n  route.get(\n    '/myPosts/:id',\n    isUserIdValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { id } = req.params;\n      const UserServiceInstance = new UserService(PostModel, UserModel, NotificationModel);\n      const user = await UserServiceInstance.findMyPosts(Types.ObjectId(id));\n\n      return res.status(200).json(user);\n    }),\n  );\n\n  // 사용자 알림 목록 조회\n  route.get(\n    '/notifications/:id',\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { id } = req.params;\n      const NotificationServcieInstance = new NotificationService(NotificationModel);\n      const notice = await NotificationServcieInstance.findMyNotice(Types.ObjectId(id));\n      return res.status(200).json(notice);\n    }),\n  );\n};\n"]}