{"version":3,"file":"user.js","sourceRoot":"/","sources":["api/routes/user.ts"],"names":[],"mappings":"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","sourcesContent":["import { Router, Request, Response, NextFunction } from 'express';\r\nimport { Types } from 'mongoose';\r\nimport { isString } from '../../utills/isStringEmpty';\r\nimport { IUser, User as UserModel } from '../../models/User';\r\nimport { UserService, NotificationService } from '../../services/index';\r\nimport { nickNameDuplicationCheck, isAccessTokenValid, isUserIdValid } from '../middlewares/index';\r\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\r\nimport { Post as PostModel } from '../../models/Post';\r\nimport { Notification as NotificationModel } from '../../models/Notification';\r\n\r\nconst route = Router();\r\n\r\nexport default (app: Router) => {\r\n    /**\r\n   * @swagger\r\n   * tags:\r\n        - name: users\r\n          description: 사용자에 관련된 API\r\n   */\r\n  app.use('/users', route);\r\n\r\n  // s3 pre-sign url 발급\r\n  route.post(\r\n    '/sign',\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const { fileName } = req.body;\r\n      const UserServiceInstance = new UserService(PostModel, UserModel, NotificationModel);\r\n      const signedUrlPut = await UserServiceInstance.getPreSignUrl(fileName);\r\n\r\n      return res.status(200).json({\r\n        preSignUrl: signedUrlPut,\r\n      });\r\n    }),\r\n  );\r\n\r\n  /**\r\n   * @swagger\r\n   * paths:\r\n   *   /users:\r\n   *    get:\r\n   *      tags:\r\n   *        - users\r\n   *      summary: 사용자 조회\r\n   *      description: 닉네임으로 사용자 정보를 조회한다.\r\n   *      parameters:\r\n   *        - name: nickName\r\n   *          in: query\r\n   *          description: 닉네임\r\n   *          required: true\r\n   *          schema:\r\n   *            type: string\r\n   *          example: 'hola!'\r\n   *      responses:\r\n   *        200:\r\n   *          description: successful operation\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                type: array\r\n   *                items:\r\n   *                  $ref: '#/components/schemas/User'\r\n   *        404:\r\n   *          description: parameter is incorrect\r\n   */\r\n  route.get(\r\n    '/',\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const { nickName } = req.query;\r\n      if (!isString(nickName)) {\r\n        return res.status(400).json({\r\n          message: `parameter is incorrect`,\r\n        });\r\n      }\r\n\r\n      const UserServiceInstance = new UserService(PostModel, UserModel, NotificationModel);\r\n      const user = await UserServiceInstance.findByNickName(nickName);\r\n      return res.status(200).json(user);\r\n    }),\r\n  );\r\n\r\n    /**\r\n   * @swagger\r\n   * paths:\r\n   *   /users/{id}:\r\n   *    get:\r\n   *      tags:\r\n   *        - users\r\n   *      summary: 사용자 상세 정보 조회\r\n   *      description: '사용자의 상세 정보를 조회한다.'\r\n   *      parameters:\r\n   *        - name: id\r\n   *          in: path\r\n   *          description: 사용자 Id\r\n   *          required: true\r\n   *          example: '635a91e837ad67001412321a'\r\n   *          schema:\r\n   *            type: string\r\n   *      responses:\r\n   *        200:\r\n   *          description: successful operation\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                type: array\r\n   *                items:\r\n   *                  $ref: '#/components/schemas/User'\r\n   *        404:\r\n   *          description: User not found\r\n   */\r\n  route.get(\r\n    '/:id',\r\n    isUserIdValid,\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const { id } = req.params;\r\n\r\n      const UserServiceInstance = new UserService(PostModel, UserModel, NotificationModel);\r\n      const user = await UserServiceInstance.findById(Types.ObjectId(id));\r\n\r\n      return res.status(200).json(user);\r\n    }),\r\n  );\r\n\r\n  // \r\n/**\r\n   * @swagger\r\n   * paths:\r\n   *   /users/{id}:\r\n   *    patch:\r\n   *      tags:\r\n   *        - users\r\n   *      summary: 사용자 정보 수정\r\n   *      description: 사용자 정보를 수정한다.\r\n   *      parameters:\r\n   *        - name: accessToken\r\n   *          in: header\r\n   *          description: access token\r\n   *          required: true\r\n   *          schema:\r\n   *            type: string\r\n   *        - name: id\r\n   *          in: path\r\n   *          description: 사용자 Id\r\n   *          required: true\r\n   *          example: '635a91e837ad67001412321a'\r\n   *          schema:\r\n   *            type: string\r\n   *      requestBody:\r\n   *        content:\r\n   *          application/json:\r\n   *            schema:\r\n   *              $ref: '#/components/schemas/User'\r\n   *      responses:\r\n   *        200:\r\n   *          description: successful operation\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                type: object\r\n   *                properties:\r\n   *                  _id:\r\n   *                    type: string\r\n   *                    description: 사용자 ID\r\n   *                    example: '61063af4ed4b420bbcfa0b4c'\r\n   *                  nickName:\r\n   *                    type: string\r\n   *                    description: 닉네임\r\n   *                    example: 'hola!'\r\n   *                  image:\r\n   *                    type: string\r\n   *                    description: 사용자 이미지 명\r\n   *                    example: 'default.PNG'\r\n   *                  accessToken:\r\n   *                    type: string\r\n   *                    description: access token\r\n   *                  isExists:\r\n   *                    type: boolean\r\n   *                    description: 닉네임 중복 여부\r\n   *                    example: false\r\n   *        400:\r\n   *          description: Nickname is duplicated.\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                type: object\r\n   *                properties:\r\n   *                  isExists:\r\n   *                    type: boolean\r\n   *                    description : 닉네임 중복 여부\r\n   *                    example: true\r\n   *                  message:\r\n   *                    type: string\r\n   *                    example: 'Nickname is duplicated.'\r\n   *        401:\r\n   *          $ref: '#/components/responses/UnauthorizedError'\r\n   *        404:\r\n   *          description: User not found\r\n   */\r\n  route.patch(\r\n    '/:id',\r\n    isUserIdValid,\r\n    isAccessTokenValid,\r\n    nickNameDuplicationCheck,\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const { id } = req.params;\r\n      const { _id: tokenUserId } = req.user as IUser;\r\n\r\n      const userDTO = req.body;\r\n      const UserServiceInstance = new UserService(PostModel, UserModel, NotificationModel);\r\n      const { userRecord, accessToken, refreshToken } = await UserServiceInstance.modifyUser(\r\n        Types.ObjectId(id),\r\n        tokenUserId,\r\n        userDTO,\r\n      );\r\n\r\n      res.cookie('R_AUTH', refreshToken, {\r\n        sameSite: 'none',\r\n        httpOnly: true,\r\n        secure: true,\r\n        maxAge: 1000 * 60 * 60 * 24 * 14, // 2 Week\r\n      });\r\n\r\n      return res.status(200).json({\r\n        _id: userRecord._id,\r\n        nickName: userRecord.nickName,\r\n        image: userRecord.image,\r\n        accessToken,\r\n        isExists: false,\r\n      });\r\n    }),\r\n  );\r\n\r\n\r\n  /**\r\n   * @swagger\r\n   * paths:\r\n   *   /users/{id}/exists:\r\n   *    get:\r\n   *      tags:\r\n   *        - users\r\n   *      summary: 사용자 닉네임 중복 체크\r\n   *      description: 사용자 닉네임 중복 체크\r\n   *      parameters:\r\n   *        - name: id\r\n   *          in: path\r\n   *          description: 사용자 Id\r\n   *          required: true\r\n   *          example: '635a91e837ad67001412321a'\r\n   *          schema:\r\n   *            type: string\r\n   *      responses:\r\n   *        200:\r\n   *          description: successful operation\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                type: object\r\n   *                properties:\r\n   *                  isExists:\r\n   *                    type: boolean\r\n   *                    description : '닉네임 중복 여부(true: 중복)'\r\n   *                    example: isExists\r\n   *        400:\r\n   *          description: Nickname is duplicated.\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                type: object\r\n   *                properties:\r\n   *                  isExists:\r\n   *                    type: boolean\r\n   *                    description : '닉네임 중복 여부(true: 중복)'\r\n   *                    example: true\r\n   */\r\n  route.get(\r\n    '/:id/exists',\r\n    nickNameDuplicationCheck,\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      return res.status(200).json({\r\n        isExists: false,\r\n      });\r\n    }),\r\n  );\r\n  \r\n  /**\r\n   * @swagger\r\n   * paths:\r\n   *   /users/{id}:\r\n   *    delete:\r\n   *      tags:\r\n   *        - users\r\n   *      summary: 회원 탈퇴\r\n   *      description: 사용자 정보 삭제\r\n   *      parameters:\r\n   *        - name: accessToken\r\n   *          in: header\r\n   *          description: access token\r\n   *          required: true\r\n   *          schema:\r\n   *            type: string\r\n   *        - name: id\r\n   *          in: path\r\n   *          description: 사용자 Id\r\n   *          required: true\r\n   *          example: '60213d1c3126991a7cd1d287'\r\n   *          schema:\r\n   *            type: string\r\n   *      responses:\r\n   *        204:\r\n   *          description: successful operation\r\n   *        401:\r\n   *          $ref: '#/components/responses/UnauthorizedError'\r\n   *        404:\r\n   *          description: User not found\r\n   */\r\n  route.delete(\r\n    '/:id',\r\n    isUserIdValid,\r\n    isAccessTokenValid,\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const { id } = req.params;\r\n      const { _id: tokenUserId } = req.user as IUser;\r\n\r\n      const UserServiceInstance = new UserService(PostModel, UserModel, NotificationModel);\r\n      await UserServiceInstance.deleteUser(Types.ObjectId(id), tokenUserId);\r\n      res.clearCookie('R_AUTH');\r\n      return res.status(204).json();\r\n    }),\r\n  );\r\n\r\n    /**\r\n   * @swagger\r\n   * paths:\r\n   *   /users/likes/{id}:\r\n   *    get:\r\n   *      tags:\r\n   *        - users\r\n   *      summary: 사용자 관심 등록 리스트 조회\r\n   *      description: '관심 등록한 글들을 조회한다.'\r\n   *      parameters:\r\n   *        - name: id\r\n   *          in: path\r\n   *          description: 사용자 Id\r\n   *          required: true\r\n   *          example: '61fa3f1fea134800135696b4'\r\n   *          schema:\r\n   *            type: string\r\n   *      responses:\r\n   *        200:\r\n   *          description: successful operation\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                type: object\r\n   *                properties: \r\n   *                  likePosts:\r\n   *                    type: array\r\n   *                    items:\r\n   *                      $ref: '#/components/schemas/Post'\r\n   *        404:\r\n   *          description: User not found\r\n   */\r\n  route.get('/likes/:id', isUserIdValid, async (req: Request, res: Response, next: NextFunction) => {\r\n    const { id } = req.params;\r\n    const UserServiceInstance = new UserService(PostModel, UserModel, NotificationModel);\r\n    const user = await UserServiceInstance.findUserLikes(Types.ObjectId(id));\r\n    return res.status(200).json(user);\r\n  });\r\n\r\n  /**\r\n   * @swagger\r\n   * paths:\r\n   *   /users/read-list/{id}:\r\n   *    get:\r\n   *      tags:\r\n   *        - users\r\n   *      summary: 사용자 읽은 목록  조회\r\n   *      description: '읽은 글들을 조회한다.'\r\n   *      parameters:\r\n   *        - name: id\r\n   *          in: path\r\n   *          description: 사용자 Id\r\n   *          required: true\r\n   *          example: '61fa3f1fea134800135696b4'\r\n   *          schema:\r\n   *            type: string\r\n   *      responses:\r\n   *        200:\r\n   *          description: successful operation\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                type: object\r\n   *                properties: \r\n   *                  readList:\r\n   *                    type: array\r\n   *                    items:\r\n   *                      $ref: '#/components/schemas/Post'\r\n   *        404:\r\n   *          description: User not found\r\n   */  \r\n  route.get(\r\n    '/read-list/:id',\r\n    isUserIdValid,\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const { id } = req.params;\r\n      const UserServiceInstance = new UserService(PostModel, UserModel, NotificationModel);\r\n      const user = await UserServiceInstance.findReadList(Types.ObjectId(id));\r\n      return res.status(200).json(user);\r\n    }),\r\n  );\r\n\r\n  /**\r\n   * @swagger\r\n   * paths:\r\n   *   /users/myPosts/{id}:\r\n   *    get:\r\n   *      tags:\r\n   *        - users\r\n   *      summary: 사용자 작성 글 목록 조회\r\n   *      description: '내가 작성한 글들을 조회한다.'\r\n   *      parameters:\r\n   *        - name: id\r\n   *          in: path\r\n   *          description: 사용자 Id\r\n   *          required: true\r\n   *          example: '610e8f2b6eb2018aceda978e'\r\n   *          schema:\r\n   *            type: string\r\n   *      responses:\r\n   *        200:\r\n   *          description: successful operation\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                type: array\r\n   *                items:\r\n   *                  $ref: '#/components/schemas/Post'\r\n   *        404:\r\n   *          description: User not found\r\n   */  \r\n  route.get(\r\n    '/myPosts/:id',\r\n    isUserIdValid,\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const { id } = req.params;\r\n      const UserServiceInstance = new UserService(PostModel, UserModel, NotificationModel);\r\n      const user = await UserServiceInstance.findMyPosts(Types.ObjectId(id));\r\n      return res.status(200).json(user);\r\n    }),\r\n  );\r\n};\r\n"]}