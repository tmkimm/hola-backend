{"version":3,"file":"comment.js","sourceRoot":"/","sources":["api/routes/comment.ts"],"names":[],"mappings":"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","sourcesContent":["import { Types } from 'mongoose';\r\nimport { Router, Request, Response, NextFunction } from 'express';\r\nimport { isPostIdValid } from '../middlewares/isPostIdValid';\r\nimport { IUser } from '../../models/User';\r\nimport { isAccessTokenValid } from '../middlewares/index';\r\nimport { CommentService } from '../../services/index';\r\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\r\nimport { Post as PostModel } from '../../models/Post';\r\nimport { Notification as NotificationModel } from '../../models/Notification';\r\nimport CustomError from '../../CustomError';\r\n\r\nconst route = Router();\r\nexport default (app: Router) => {\r\n  /**\r\n   * @swagger\r\n   * tags:\r\n        - name: comments\r\n          description: 댓글에 관련된 API\r\n   */\r\n\r\n  /*\r\n    # POST /posts/comments : 신규 댓글 등록\r\n    # PATCH /posts/comments/:id : 댓글 정보 수정\r\n    # DELETE /posts/comments/:id : 댓글 삭제\r\n    */\r\n  app.use('/posts/comments', route);\r\n\r\n  // 댓글 리스트 조회\r\n\r\n  /**\r\n   * @swagger\r\n   * paths:\r\n   *   /posts/comments/{id}:\r\n   *    get:\r\n   *      tags:\r\n   *        - comments\r\n   *      summary: 댓글 리스트 조회\r\n   *      description: 글의 댓글 리스트를 조회한다.\r\n   *      parameters:\r\n   *        - name: id\r\n   *          in: path\r\n   *          description: 글 Id\r\n   *          required: true\r\n   *          example: '635a91e837ad67001412321a'\r\n   *          schema:\r\n   *            type: string\r\n   *      responses:\r\n   *        200:\r\n   *          description: successful operation\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                type: array\r\n   *                items:\r\n   *                  $ref: '#/components/schemas/Comment'\r\n   */\r\n  route.get(\r\n    '/:id',\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const { id } = req.params;\r\n      if (!id || !Types.ObjectId.isValid(id)) {\r\n        throw new CustomError('InvalidApiError', 400, 'Invalid Api Parameter');\r\n      }\r\n      const CommentServiceInstance = new CommentService(PostModel, NotificationModel);\r\n      const comments = await CommentServiceInstance.findComments(Types.ObjectId(id));\r\n\r\n      return res.status(200).json(comments);\r\n    }),\r\n  );\r\n\r\n  /**\r\n   * @swagger\r\n   * paths:\r\n   *   /posts/comments:\r\n   *    post:\r\n   *      tags:\r\n   *        - comments\r\n   *      summary: 댓글 등록\r\n   *      description: '신규 댓글을 등록한다. 사용자 정보는 access token을 이용해 확인한다.'\r\n   *      parameters:\r\n   *        - name: accessToken\r\n   *          in: header\r\n   *          description: access token\r\n   *          required: true\r\n   *          schema:\r\n   *            type: string\r\n   *      requestBody:\r\n   *        content:\r\n   *          application/json:\r\n   *            schema:\r\n   *              type: object\r\n   *              properties:\r\n   *                postId:\r\n   *                  type: string\r\n   *                  description : '글 Id'\r\n   *                  example: '610f3dac02f039c2d9d550d6'\r\n   *                content:\r\n   *                  type: string\r\n   *                  description : '댓글 내용'\r\n   *                  example: '지원했어요!'\r\n   *      responses:\r\n   *        201:\r\n   *          description: successful operation\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                type: array\r\n   *                items:\r\n   *                  $ref: '#/components/schemas/Post'\r\n   *        401:\r\n   *          $ref: '#/components/responses/UnauthorizedError'\r\n   *        404:\r\n   *          description: Post not found\r\n   */\r\n  route.post(\r\n    '/',\r\n    isAccessTokenValid,\r\n    isPostIdValid,\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const { postId, content } = req.body;\r\n      let { nickName } = req.body;\r\n      const { _id: userId } = req.user as IUser;\r\n\r\n      if (!nickName) nickName = `사용자`;\r\n      const CommentServiceInstance = new CommentService(PostModel, NotificationModel);\r\n      const post = await CommentServiceInstance.registerComment(userId, postId, content, nickName);\r\n\r\n      return res.status(201).json(post);\r\n    }),\r\n  );\r\n\r\n  // 댓글 수정.\r\n  /**\r\n   * @swagger\r\n   * paths:\r\n   *   /posts/comments/{id}:\r\n   *    patch:\r\n   *      tags:\r\n   *        - comments\r\n   *      summary: 댓글 수정\r\n   *      description: 댓글을 수정한다.\r\n   *      parameters:\r\n   *        - name: accessToken\r\n   *          in: header\r\n   *          description: access token\r\n   *          required: true\r\n   *          schema:\r\n   *            type: string\r\n   *        - name: id\r\n   *          in: path\r\n   *          description: 글 Id\r\n   *          required: true\r\n   *          example: '635a91e837ad67001412321a'\r\n   *          schema:\r\n   *            type: string\r\n   *      requestBody:\r\n   *        content:\r\n   *          application/json:\r\n   *            schema:\r\n   *              type: object\r\n   *              properties:\r\n   *                content:\r\n   *                  type: string\r\n   *                  description : '댓글 내용'\r\n   *                  example: '지원했어요!'\r\n   *      responses:\r\n   *        200:\r\n   *          description: successful operation\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                type: array\r\n   *                items:\r\n   *                  $ref: '#/components/schemas/Post'\r\n   *        401:\r\n   *          $ref: '#/components/responses/UnauthorizedError'\r\n   */\r\n  route.patch(\r\n    '/:id',\r\n    isAccessTokenValid,\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const commentDTO = req.body;\r\n      commentDTO._id = req.params.id;\r\n      const { _id: tokenUserId, tokenType } = req.user as IUser;\r\n\r\n      const CommentServiceInstance = new CommentService(PostModel, NotificationModel);\r\n      const comment = await CommentServiceInstance.modifyComment(commentDTO, tokenUserId, tokenType);\r\n\r\n      return res.status(200).json(comment);\r\n    }),\r\n  );\r\n\r\n  /**\r\n   * @swagger\r\n   * paths:\r\n   *   /posts/comments/{id}:\r\n   *    delete:\r\n   *      tags:\r\n   *        - comments\r\n   *      summary: 댓글 삭제\r\n   *      description: 댓글을 삭제한다.\r\n   *      parameters:\r\n   *        - name: id\r\n   *          in: path\r\n   *          description: 댓글 Id\r\n   *          required: true\r\n   *          example: '60213d1c3126991a7cd1d287'\r\n   *          schema:\r\n   *            type: string\r\n   *      responses:\r\n   *        204:\r\n   *          description: successful operation\r\n   *        401:\r\n   *          $ref: '#/components/responses/UnauthorizedError'\r\n   *        404:\r\n   *          description: Post not found\r\n   */\r\n  route.delete(\r\n    '/:id',\r\n    isAccessTokenValid,\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const commentId = req.params.id;\r\n      const { _id: userId, tokenType } = req.user as IUser;\r\n\r\n      const CommentServiceInstance = new CommentService(PostModel, NotificationModel);\r\n      await CommentServiceInstance.deleteComment(Types.ObjectId(commentId), userId, tokenType);\r\n      return res.status(204).json();\r\n    }),\r\n  );\r\n};\r\n"]}