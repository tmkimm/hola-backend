{"version":3,"file":"comment.js","sourceRoot":"/","sources":["api/routes/comment.ts"],"names":[],"mappings":"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","sourcesContent":["import { Types } from 'mongoose';\nimport { Router, Request, Response, NextFunction } from 'express';\nimport { isPostIdValid } from '../middlewares/isPostIdValid';\nimport { IUser } from '../../models/User';\nimport { isAccessTokenValid } from '../middlewares/index';\nimport { CommentService } from '../../services/index';\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\nimport { Post as PostModel } from '../../models/Post';\nimport { Notification as NotificationModel } from '../../models/Notification';\nimport CustomError from '../../CustomError';\n\nconst route = Router();\nexport default (app: Router) => {\n  /*\n    댓글에 관련된 Router를 정의한다.\n    등록 / 수정 / 삭제하려는 사용자의 정보는 Access Token을 이용하여 처리한다.\n\n    # GET /posts/comments/:id : 글의 댓글 리스트 조회\n    # POST /posts/comments : 신규 댓글 등록\n    # PATCH /posts/comments/:id : 댓글 정보 수정\n    # DELETE /posts/comments/:id : 댓글 삭제\n    */\n  app.use('/posts/comments', route);\n\n  // 댓글 리스트 조회\n  route.get(\n    '/:id',\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { id } = req.params;\n      if (!id || !Types.ObjectId.isValid(id)) {\n        throw new CustomError('InvalidApiError', 400, 'Invalid Api Parameter');\n      }\n      const CommentServiceInstance = new CommentService(PostModel, NotificationModel);\n      const comments = await CommentServiceInstance.findComments(Types.ObjectId(id));\n\n      return res.status(200).json(comments);\n    }),\n  );\n  // 댓글 등록\n  route.post(\n    '/',\n    isAccessTokenValid,\n    isPostIdValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { postId, content } = req.body;\n      let { nickName } = req.body;\n      const { _id: userId } = req.user as IUser;\n\n      if (!nickName) nickName = `사용자`;\n      const CommentServiceInstance = new CommentService(PostModel, NotificationModel);\n      const post = await CommentServiceInstance.registerComment(userId, postId, content, nickName);\n\n      return res.status(201).json(post);\n    }),\n  );\n\n  // 댓글 수정\n  route.patch(\n    '/:id',\n    isAccessTokenValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const commentDTO = req.body;\n      commentDTO._id = req.params.id;\n      const { _id: tokenUserId } = req.user as IUser;\n\n      const CommentServiceInstance = new CommentService(PostModel, NotificationModel);\n      const comment = await CommentServiceInstance.modifyComment(commentDTO, tokenUserId);\n\n      return res.status(200).json(comment);\n    }),\n  );\n\n  // 댓글 삭제\n  route.delete(\n    '/:id',\n    isAccessTokenValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const commentId = req.params.id;\n      const { _id: userId } = req.user as IUser;\n\n      const CommentServiceInstance = new CommentService(PostModel, NotificationModel);\n      await CommentServiceInstance.deleteComment(Types.ObjectId(commentId), userId);\n      return res.status(204).json();\n    }),\n  );\n};\n"]}