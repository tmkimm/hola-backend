{"version":3,"file":"comment.js","sourceRoot":"/","sources":["api/routes/comment.ts"],"names":[],"mappings":"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","sourcesContent":["import { Types } from 'mongoose';\nimport { Router, Request, Response, NextFunction } from 'express';\nimport { isPostIdValid } from '../middlewares/isPostIdValid';\nimport { IUser } from '../../models/User';\nimport { isAccessTokenValid } from '../middlewares/index';\nimport { findComments, registerComment, modifyComment, deleteComment } from '../../services/comment';\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\nimport CustomError from '../../CustomError';\n\nconst route = Router();\nexport default (app: Router) => {\n  /**\n   * @swagger\n   * tags:\n        - name: comments\n          description: 댓글에 관련된 API\n   */\n\n  /*\n    # POST /posts/comments : 신규 댓글 등록\n    # PATCH /posts/comments/:id : 댓글 정보 수정\n    # DELETE /posts/comments/:id : 댓글 삭제\n    */\n  app.use('/posts/comments', route);\n\n  // 댓글 리스트 조회\n\n  /**\n   * @swagger\n   * paths:\n   *   /posts/comments/{id}:\n   *    get:\n   *      tags:\n   *        - comments\n   *      summary: 댓글 리스트 조회\n   *      description: 글의 댓글 리스트를 조회한다.\n   *      parameters:\n   *        - name: id\n   *          in: path\n   *          description: 글 Id\n   *          required: true\n   *          example: '635a91e837ad67001412321a'\n   *          schema:\n   *            type: string\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: array\n   *                items:\n   *                  $ref: '#/components/schemas/Comment'\n   */\n  route.get(\n    '/:id',\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { id } = req.params;\n      if (!id || !Types.ObjectId.isValid(id)) {\n        throw new CustomError('InvalidApiError', 400, 'Invalid Api Parameter');\n      }\n      const comments = await findComments(Types.ObjectId(id));\n\n      return res.status(200).json(comments);\n    }),\n  );\n\n  /**\n   * @swagger\n   * paths:\n   *   /posts/comments:\n   *    post:\n   *      tags:\n   *        - comments\n   *      summary: 댓글 등록\n   *      description: '신규 댓글을 등록한다. 사용자 정보는 access token을 이용해 확인한다.'\n   *      parameters:\n   *        - name: accessToken\n   *          in: header\n   *          description: access token\n   *          required: true\n   *          schema:\n   *            type: string\n   *      requestBody:\n   *        content:\n   *          application/json:\n   *            schema:\n   *              type: object\n   *              properties:\n   *                postId:\n   *                  type: string\n   *                  description : '글 Id'\n   *                  example: '610f3dac02f039c2d9d550d6'\n   *                content:\n   *                  type: string\n   *                  description : '댓글 내용'\n   *                  example: '지원했어요!'\n   *      responses:\n   *        201:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: array\n   *                items:\n   *                  $ref: '#/components/schemas/Post'\n   *        401:\n   *          $ref: '#/components/responses/UnauthorizedError'\n   *        404:\n   *          description: Post not found\n   */\n  route.post(\n    '/',\n    isAccessTokenValid,\n    isPostIdValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { postId, content } = req.body;\n      let { nickName } = req.body;\n      const { _id: userId } = req.user as IUser;\n\n      if (!nickName) nickName = `사용자`;\n      const post = await registerComment(userId, postId, content, nickName);\n\n      return res.status(201).json(post);\n    }),\n  );\n\n  // 댓글 수정.\n  /**\n   * @swagger\n   * paths:\n   *   /posts/comments/{id}:\n   *    patch:\n   *      tags:\n   *        - comments\n   *      summary: 댓글 수정\n   *      description: 댓글을 수정한다.\n   *      parameters:\n   *        - name: accessToken\n   *          in: header\n   *          description: access token\n   *          required: true\n   *          schema:\n   *            type: string\n   *        - name: id\n   *          in: path\n   *          description: 글 Id\n   *          required: true\n   *          example: '635a91e837ad67001412321a'\n   *          schema:\n   *            type: string\n   *      requestBody:\n   *        content:\n   *          application/json:\n   *            schema:\n   *              type: object\n   *              properties:\n   *                content:\n   *                  type: string\n   *                  description : '댓글 내용'\n   *                  example: '지원했어요!'\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: array\n   *                items:\n   *                  $ref: '#/components/schemas/Post'\n   *        401:\n   *          $ref: '#/components/responses/UnauthorizedError'\n   */\n  route.patch(\n    '/:id',\n    isAccessTokenValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const commentDTO = req.body;\n      commentDTO._id = req.params.id;\n      const { _id: tokenUserId, tokenType } = req.user as IUser;\n\n      const comment = await modifyComment(commentDTO, tokenUserId, tokenType);\n\n      return res.status(200).json(comment);\n    }),\n  );\n\n  /**\n   * @swagger\n   * paths:\n   *   /posts/comments/{id}:\n   *    delete:\n   *      tags:\n   *        - comments\n   *      summary: 댓글 삭제\n   *      description: 댓글을 삭제한다.\n   *      parameters:\n   *        - name: id\n   *          in: path\n   *          description: 댓글 Id\n   *          required: true\n   *          example: '60213d1c3126991a7cd1d287'\n   *          schema:\n   *            type: string\n   *      responses:\n   *        204:\n   *          description: successful operation\n   *        401:\n   *          $ref: '#/components/responses/UnauthorizedError'\n   *        404:\n   *          description: Post not found\n   */\n  route.delete(\n    '/:id',\n    isAccessTokenValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const commentId = req.params.id;\n      const { _id: userId, tokenType } = req.user as IUser;\n\n      await deleteComment(Types.ObjectId(commentId), userId, tokenType);\n      return res.status(204).json();\n    }),\n  );\n};\n"]}