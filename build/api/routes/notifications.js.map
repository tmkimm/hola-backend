{"version":3,"file":"notifications.js","sourceRoot":"/","sources":["api/routes/notifications.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mCAAkE;AAClE,qCAAiC;AACjC,4DAA6G;AAC7G,8CAA0D;AAC1D,6DAA4D;AAI5D,IAAM,KAAK,GAAG,IAAA,gBAAM,GAAE,CAAC;AAEvB,mBAAe,UAAC,GAAW;IACzB,GAAG,CAAC,GAAG,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;IAEjC,WAAW;IACX,KAAK,CAAC,GAAG,CACP,GAAG,EACH,0BAAkB,EAClB,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBACzD,MAAM,GAAK,GAAG,CAAC,IAAa,IAAtB,CAAuB;oBAEpB,qBAAM,IAAA,gCAAiB,EAAC,MAAM,CAAC,EAAA;;oBAA/C,aAAa,GAAG,SAA+B;oBACrD,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,EAAC;;;SAC5C,CAAC,CACH,CAAC;IAEF,iBAAiB;IACjB,KAAK,CAAC,GAAG,CACP,MAAM,EACN,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBAC9D,EAAE,GAAK,GAAG,CAAC,MAAM,GAAf,CAAgB;oBACX,qBAAM,IAAA,+BAAgB,EAAC,gBAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAA;;oBAAnD,MAAM,GAAG,SAA0C;oBACzD,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EAAC;;;SACrC,CAAC,CACH,CAAC;IAEF,WAAW;IACX,KAAK,CAAC,KAAK,CACT,WAAW,EACX,0BAAkB,EAClB,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBAC9D,EAAE,GAAK,GAAG,CAAC,MAAM,GAAf,CAAgB;oBACX,qBAAM,IAAA,+BAAgB,EAAC,gBAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAA;;oBAAnD,MAAM,GAAG,SAA0C;oBAEzD,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;4BAC1B,MAAM,EAAE,IAAI;yBACb,CAAC,EAAC;;;SACJ,CAAC,CACH,CAAC;IAEF,cAAc;IACd,KAAK,CAAC,KAAK,CACT,WAAW,EACX,0BAAkB,EAClB,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBACzD,MAAM,GAAK,GAAG,CAAC,IAAa,IAAtB,CAAuB;oBAC3B,qBAAM,IAAA,sBAAO,EAAC,MAAM,CAAC,EAAA;;oBAA9B,MAAM,GAAG,SAAqB;oBAEpC,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;4BAC1B,MAAM,EAAE,IAAI;yBACb,CAAC,EAAC;;;SACJ,CAAC,CACH,CAAC;AACJ,CAAC,EAAC","sourcesContent":["import { Router, Request, Response, NextFunction } from 'express';\nimport { Types } from 'mongoose';\nimport { findNotification, findNotifications, readAll, readNotification } from '../../services/notification';\nimport { isAccessTokenValid } from '../middlewares/index';\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\nimport { Notification as NotificationModel } from '../../models/Notification';\nimport { IUser, User as UserModel } from '../../models/User';\n\nconst route = Router();\n\nexport default (app: Router) => {\n  app.use('/notifications', route);\n\n  // 알림 전체 조회\n  route.get(\n    '/',\n    isAccessTokenValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { _id: userId } = req.user as IUser;\n\n      const notifications = await findNotifications(userId);\n      return res.status(200).json(notifications);\n    }),\n  );\n\n  // 알림 상세 조회(개발필요)\n  route.get(\n    '/:id',\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { id } = req.params;\n      const notice = await findNotification(Types.ObjectId(id));\n      return res.status(200).json(notice);\n    }),\n  );\n\n  // 알림 읽음 처리\n  route.patch(\n    '/:id/read',\n    isAccessTokenValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { id } = req.params;\n      const notice = await readNotification(Types.ObjectId(id));\n\n      return res.status(200).json({\n        isRead: true,\n      });\n    }),\n  );\n\n  // 알림 전체 읽음 처리\n  route.patch(\n    '/read-all',\n    isAccessTokenValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { _id: userId } = req.user as IUser;\n      const notice = await readAll(userId);\n\n      return res.status(200).json({\n        isRead: true,\n      });\n    }),\n  );\n};\n"]}