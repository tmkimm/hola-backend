{"version":3,"file":"notifications.js","sourceRoot":"/","sources":["api/routes/notifications.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mCAAkE;AAClE,qCAAiC;AACjC,8CAA2D;AAC3D,8CAA0D;AAC1D,6DAA4D;AAC5D,0DAA8E;AAG9E,IAAM,KAAK,GAAG,IAAA,gBAAM,GAAE,CAAC;AAEvB,mBAAe,UAAC,GAAW;IACzB,GAAG,CAAC,GAAG,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;IAEjC,WAAW;IACX,KAAK,CAAC,GAAG,CACP,GAAG,EACH,0BAAkB,EAClB,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBACzD,MAAM,GAAK,GAAG,CAAC,IAAa,IAAtB,CAAuB;oBAEpC,qBAAqB,GAAG,IAAI,2BAAmB,CAAC,2BAAiB,CAAC,CAAC;oBACnD,qBAAM,qBAAqB,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAA;;oBAArE,aAAa,GAAG,SAAqD;oBAC3E,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,EAAC;;;SAC5C,CAAC,CACH,CAAC;IAEF,iBAAiB;IACjB,KAAK,CAAC,GAAG,CACP,MAAM,EACN,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBAC9D,EAAE,GAAK,GAAG,CAAC,MAAM,GAAf,CAAgB;oBACpB,2BAA2B,GAAG,IAAI,2BAAmB,CAAC,2BAAiB,CAAC,CAAC;oBAChE,qBAAM,2BAA2B,CAAC,gBAAgB,CAAC,gBAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAA;;oBAA/E,MAAM,GAAG,SAAsE;oBACrF,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EAAC;;;SACrC,CAAC,CACH,CAAC;IAEF,WAAW;IACX,KAAK,CAAC,KAAK,CACT,WAAW,EACX,0BAAkB,EAClB,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBAC9D,EAAE,GAAK,GAAG,CAAC,MAAM,GAAf,CAAgB;oBACpB,2BAA2B,GAAG,IAAI,2BAAmB,CAAC,2BAAiB,CAAC,CAAC;oBAChE,qBAAM,2BAA2B,CAAC,gBAAgB,CAAC,gBAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAA;;oBAA/E,MAAM,GAAG,SAAsE;oBAErF,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;4BAC1B,MAAM,EAAE,IAAI;yBACb,CAAC,EAAC;;;SACJ,CAAC,CACH,CAAC;IAEF,cAAc;IACd,KAAK,CAAC,KAAK,CACT,WAAW,EACX,0BAAkB,EAClB,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBACzD,MAAM,GAAK,GAAG,CAAC,IAAa,IAAtB,CAAuB;oBACpC,2BAA2B,GAAG,IAAI,2BAAmB,CAAC,2BAAiB,CAAC,CAAC;oBAChE,qBAAM,2BAA2B,CAAC,OAAO,CAAC,MAAM,CAAC,EAAA;;oBAA1D,MAAM,GAAG,SAAiD;oBAEhE,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;4BAC1B,MAAM,EAAE,IAAI;yBACb,CAAC,EAAC;;;SACJ,CAAC,CACH,CAAC;AACJ,CAAC,EAAC","sourcesContent":["import { Router, Request, Response, NextFunction } from 'express';\r\nimport { Types } from 'mongoose';\r\nimport { NotificationService } from '../../services/index';\r\nimport { isAccessTokenValid } from '../middlewares/index';\r\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\r\nimport { Notification as NotificationModel } from '../../models/Notification';\r\nimport { IUser, User as UserModel } from '../../models/User';\r\n\r\nconst route = Router();\r\n\r\nexport default (app: Router) => {\r\n  app.use('/notifications', route);\r\n\r\n  // 알림 전체 조회\r\n  route.get(\r\n    '/',\r\n    isAccessTokenValid,\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const { _id: userId } = req.user as IUser;\r\n\r\n      const NoticeServiceInstance = new NotificationService(NotificationModel);\r\n      const notifications = await NoticeServiceInstance.findNotifications(userId);\r\n      return res.status(200).json(notifications);\r\n    }),\r\n  );\r\n\r\n  // 알림 상세 조회(개발필요)\r\n  route.get(\r\n    '/:id',\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const { id } = req.params;\r\n      const NotificationServcieInstance = new NotificationService(NotificationModel);\r\n      const notice = await NotificationServcieInstance.findNotification(Types.ObjectId(id));\r\n      return res.status(200).json(notice);\r\n    }),\r\n  );\r\n\r\n  // 알림 읽음 처리\r\n  route.patch(\r\n    '/:id/read',\r\n    isAccessTokenValid,\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const { id } = req.params;\r\n      const NotificationServcieInstance = new NotificationService(NotificationModel);\r\n      const notice = await NotificationServcieInstance.readNotification(Types.ObjectId(id));\r\n\r\n      return res.status(200).json({\r\n        isRead: true,\r\n      });\r\n    }),\r\n  );\r\n\r\n  // 알림 전체 읽음 처리\r\n  route.patch(\r\n    '/read-all',\r\n    isAccessTokenValid,\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const { _id: userId } = req.user as IUser;\r\n      const NotificationServcieInstance = new NotificationService(NotificationModel);\r\n      const notice = await NotificationServcieInstance.readAll(userId);\r\n\r\n      return res.status(200).json({\r\n        isRead: true,\r\n      });\r\n    }),\r\n  );\r\n};\r\n"]}