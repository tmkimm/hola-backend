{"version":3,"file":"notifications.js","sourceRoot":"/","sources":["api/routes/notifications.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mCAAkE;AAClE,qCAAiC;AACjC,6DAA4D;AAC5D,0DAA8E;AAE9E,8CAA2D;AAC3D,8CAA0D;AAE1D,IAAM,KAAK,GAAG,IAAA,gBAAM,GAAE,CAAC;AAEvB,mBAAe,UAAC,GAAW;IACzB,GAAG,CAAC,GAAG,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;IAEjC;;;;;;;;;;;;;;;;;;;;OAoBG;IACH,KAAK,CAAC,GAAG,CACP,GAAG,EACH,0BAAkB,EAClB,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBACzD,MAAM,GAAK,GAAG,CAAC,IAAa,IAAtB,CAAuB;oBAEpC,qBAAqB,GAAG,IAAI,2BAAmB,CAAC,2BAAiB,CAAC,CAAC;oBACnD,qBAAM,qBAAqB,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAA;;oBAArE,aAAa,GAAG,SAAqD;oBAC3E,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,EAAC;;;SAC5C,CAAC,CACH,CAAC;IAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAqCG;IACH,WAAW;IACX,KAAK,CAAC,KAAK,CACT,WAAW,EACX,0BAAkB,EAClB,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBAC9D,EAAE,GAAK,GAAG,CAAC,MAAM,GAAf,CAAgB;oBACpB,2BAA2B,GAAG,IAAI,2BAAmB,CAAC,2BAAiB,CAAC,CAAC;oBAChE,qBAAM,2BAA2B,CAAC,gBAAgB,CAAC,gBAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAA;;oBAA/E,MAAM,GAAG,SAAsE;oBAErF,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;4BAC1B,MAAM,EAAE,IAAI;yBACb,CAAC,EAAC;;;SACJ,CAAC,CACH,CAAC;IAEF,cAAc;IACd,KAAK,CAAC,KAAK,CACT,WAAW,EACX,0BAAkB,EAClB,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBACzD,MAAM,GAAK,GAAG,CAAC,IAAa,IAAtB,CAAuB;oBACpC,2BAA2B,GAAG,IAAI,2BAAmB,CAAC,2BAAiB,CAAC,CAAC;oBAChE,qBAAM,2BAA2B,CAAC,OAAO,CAAC,MAAM,CAAC,EAAA;;oBAA1D,MAAM,GAAG,SAAiD;oBAEhE,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;4BAC1B,MAAM,EAAE,IAAI;yBACb,CAAC,EAAC;;;SACJ,CAAC,CACH,CAAC;AACJ,CAAC,EAAC","sourcesContent":["import { NextFunction, Request, Response, Router } from 'express';\nimport { Types } from 'mongoose';\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\nimport { Notification as NotificationModel } from '../../models/Notification';\nimport { IUser } from '../../models/User';\nimport { NotificationService } from '../../services/index';\nimport { isAccessTokenValid } from '../middlewares/index';\n\nconst route = Router();\n\nexport default (app: Router) => {\n  app.use('/notifications', route);\n\n  /**\n   * @swagger\n   * paths:\n   *   /notifications:\n   *    get:\n   *      tags:\n   *        - 알림\n   *      summary: 내 알림 조회\n   *      description: '내 알림을 조회한다.'\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: array\n   *                items:\n   *                  $ref: '#/components/schemas/Notification'\n   *        401:\n   *          $ref: '#/components/responses/UnauthorizedError'\n   */\n  route.get(\n    '/',\n    isAccessTokenValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { _id: userId } = req.user as IUser;\n\n      const NoticeServiceInstance = new NotificationService(NotificationModel);\n      const notifications = await NoticeServiceInstance.findNotifications(userId);\n      return res.status(200).json(notifications);\n    })\n  );\n\n  /**\n   * @swagger\n   * paths:\n   *   /notifications:\n   *    patch:\n   *      tags:\n   *        - 알림\n   *      summary: 알림 읽음 처리\n   *      description: '알림을 읽음 처리한다.'\n   *      parameters:\n   *        - name: accessToken\n   *          in: header\n   *          description: access token\n   *          required: true\n   *          schema:\n   *            type: string\n   *        - name: id\n   *          in: path\n   *          description: 알림 Id\n   *          required: true\n   *          example: '635a91e837ad67001412321a'\n   *          schema:\n   *            type: string\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: object\n   *                properties:\n   *                  isRead:\n   *                    type: boolean\n   *                    description : 읽음 여부\n   *                    example: true\n   *        401:\n   *          $ref: '#/components/responses/UnauthorizedError'\n   */\n  // 알림 읽음 처리\n  route.patch(\n    '/:id/read',\n    isAccessTokenValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { id } = req.params;\n      const NotificationServcieInstance = new NotificationService(NotificationModel);\n      const notice = await NotificationServcieInstance.readNotification(Types.ObjectId(id));\n\n      return res.status(200).json({\n        isRead: true,\n      });\n    })\n  );\n\n  // 알림 전체 읽음 처리\n  route.patch(\n    '/read-all',\n    isAccessTokenValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { _id: userId } = req.user as IUser;\n      const NotificationServcieInstance = new NotificationService(NotificationModel);\n      const notice = await NotificationServcieInstance.readAll(userId);\n\n      return res.status(200).json({\n        isRead: true,\n      });\n    })\n  );\n};\n"]}