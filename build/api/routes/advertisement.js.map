{"version":3,"file":"advertisement.js","sourceRoot":"/","sources":["api/routes/advertisement.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextFunction, Request, Response, Router } from 'express';\nimport { Types } from 'mongoose';\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\nimport { Advertisement as AdvertisementModel } from '../../models/Advertisement';\nimport { AdvertisementLog as AdvertisementLogModel } from '../../models/AdvertisementLog';\nimport { AdvertisementService } from '../../services/advertisement';\nimport CustomError from '../../CustomError';\nimport { AdvertisementLogService } from '../../services/advertisementLog';\nimport { isAccessTokenValidWithAdmin } from '../middlewares/isAccessTokenValidWithAdmin';\nimport { checkADTypeDuplication } from '../middlewares/checkADTypeDuplication';\n\nconst route = Router();\n\nexport default (app: Router) => {\n  /**\n   * @swagger\n   * tags:\n        - name: advertisements\n          description: 광고에 관련된 API\n   */\n  app.use('/advertisements', route);\n\n  // #region 광고 이미지 S3 Pre-Signed URL 발급\n  /**\n   * @swagger\n   * paths:\n   *   /advertisements/pre-sign-url:\n   *    get:\n   *      tags:\n   *        - 광고\n   *      summary: 광고 이미지 S3 Pre-Signed URL 발급\n   *      description: 광고 이미지 S3 Pre-Signed URL 발급\n   *      parameters:\n   *        - name: fileName\n   *          in: query\n   *          description: 파일명\n   *          required: true\n   *          example: '2839_284_42.jpg'\n   *          schema:\n   *            type: string\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: object\n   *                properties:\n   *                  preSignUrl:\n   *                    type: string\n   *                    description: Pre-signed url\n   */\n  // #endregion\n  route.get(\n    '/pre-sign-url',\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { fileName } = req.query;\n      const AdvertisementServiceInstance = new AdvertisementService(AdvertisementModel);\n      const signedUrlPut = await AdvertisementServiceInstance.getPreSignUrl(fileName);\n\n      return res.status(200).json({\n        preSignUrl: signedUrlPut,\n      });\n    })\n  );\n\n  // #region POST - 이벤트 추적\n  /**\n   * @swagger\n   * paths:\n   *   /advertisements/event-log:\n   *    post:\n   *      tags:\n   *        - 광고\n   *      summary: 광고 이벤트 추적 로깅\n   *      description: '광고가 노출되었을때 이벤트를 추적한다.'\n   *      requestBody:\n   *        content:\n   *          application/json:\n   *            schema:\n   *              type: object\n   *              properties:\n   *                advertisementId:\n   *                  type: string\n   *                  description: Advertisement ID\n   *                  example: 6513fd110c19093e9896c9a2\n   *                logType:\n   *                  type: string\n   *                  description: 로그유형(impression 노출, reach 도달)\n   *                  example: impression\n   *      responses:\n   *        204:\n   *          description: successful operation\n   */\n  // #endregion\n  route.post(\n    '/event-log',\n    asyncErrorWrapper(async function (req: Request, res: Response, next: NextFunction) {\n      const { advertisementId, logType } = req.body;\n      const AdvertisementLogServiceInstance = new AdvertisementLogService(AdvertisementLogModel);\n      if (!advertisementId) throw new CustomError('NotFoundError', 400, '\"advertisementId\" not found');\n\n      await AdvertisementLogServiceInstance.createEventLog(Types.ObjectId(advertisementId), logType);\n      return res.status(204).json();\n    })\n  );\n\n  // #region 진행중인 배너 광고 조회\n  /**\n   * @swagger\n   * paths:\n   *   /advertisements/banner:\n   *    get:\n   *      tags:\n   *        - 광고\n   *      summary: 진행중인 배너 광고 조회\n   *      description: '배너를 조회한다.'\n   *      parameters:\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                $ref: '#/components/schemas/Advertisement'\n   */\n  // #endregion\n  route.get(\n    '/banner',\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const AdvertisementServiceInstance = new AdvertisementService(AdvertisementModel);\n      const advertisement = await AdvertisementServiceInstance.findActiveBanner();\n      return res.status(200).json(advertisement);\n    })\n  );\n\n  // #region 진행중인 공모전 배너 조회\n  /**\n   * @swagger\n   * paths:\n   *   /advertisements/eventBanner:\n   *    get:\n   *      tags:\n   *        - 광고\n   *      summary: 진행중인 공모전 배너 조회\n   *      description: '공모전 배너를 조회한다.'\n   *      parameters:\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                $ref: '#/components/schemas/Advertisement'\n   */\n  // #endregion\n  route.get(\n    '/eventBanner',\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const AdvertisementServiceInstance = new AdvertisementService(AdvertisementModel);\n      const advertisement = await AdvertisementServiceInstance.findActiveEventBanner();\n      return res.status(200).json(advertisement);\n    })\n  );\n\n  // #region 광고 상세 보기\n  /**\n   * @swagger\n   * paths:\n   *   /advertisements/{id}:\n   *    get:\n   *      tags:\n   *        - 광고\n   *      summary: 광고 상세 보기\n   *      description: '광고 상세 정보를 조회한다.'\n   *      parameters:\n   *        - name: accessToken\n   *          in: header\n   *          description: access token\n   *          required: false\n   *          schema:\n   *            type: string\n   *        - name: id\n   *          in: path\n   *          description: 광고 Id\n   *          required: true\n   *          example: '635a91e837ad67001412321a'\n   *          schema:\n   *            type: string\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                $ref: '#/components/schemas/Advertisement'\n   *        404:\n   *          description: Advertisement not found\n   */\n  // #endregion\n  route.get(\n    '/:id',\n    isAccessTokenValidWithAdmin,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const advertisementId = req.params.id;\n      const AdvertisementServiceInstance = new AdvertisementService(AdvertisementModel);\n      const advertisement = await AdvertisementServiceInstance.findAdvertisement(Types.ObjectId(advertisementId));\n      return res.status(200).json(advertisement);\n    })\n  );\n\n  // #region POST - 광고 등록\n  /**\n   * @swagger\n   * paths:\n   *   /advertisements:\n   *    post:\n   *      tags:\n   *        - 광고\n   *      summary: 광고 등록\n   *      description: '신규 광고를 등록한다.'\n   *      parameters:\n   *        - name: accessToken\n   *          in: header\n   *          description: access token\n   *          required: false\n   *          schema:\n   *            type: string\n   *      requestBody:\n   *        content:\n   *          application/json:\n   *            schema:\n   *              $ref: '#/components/schemas/Advertisement'\n   *      responses:\n   *        201:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: array\n   *                items:\n   *                  $ref: '#/components/schemas/Advertisement'\n   *        400:\n   *          description: Invaild advertisement data\n   *        401:\n   *          $ref: '#/components/responses/UnauthorizedError'\n   */\n  // #endregion\n  route.post(\n    '/',\n    isAccessTokenValidWithAdmin,\n    checkADTypeDuplication,\n    asyncErrorWrapper(async function (req: Request, res: Response, next: NextFunction) {\n      try {\n        const advertisementDTO = req.body;\n        const AdvertisementServiceInstance = new AdvertisementService(AdvertisementModel);\n        const advertisement = await AdvertisementServiceInstance.createAdvertisement(advertisementDTO);\n        return res.status(201).json(advertisement);\n      } catch (error) {\n        return res.status(400).json({\n          errors: [\n            {\n              location: 'body',\n              param: 'name',\n              error: 'TypeError',\n              message: 'must be String',\n            },\n          ],\n          error,\n        });\n      }\n    })\n  );\n\n  // #region 광고 수정\n  /**\n   * @swagger\n   * paths:\n   *   /advertisements/{id}:\n   *    put:\n   *      tags:\n   *        - 광고\n   *      summary: 광고 수정\n   *      description: 광고를 수정한다.\n   *      parameters:\n   *        - name: accessToken\n   *          in: header\n   *          description: access token\n   *          required: false\n   *          schema:\n   *            type: string\n   *        - name: id\n   *          in: path\n   *          description: 광고 Id\n   *          required: true\n   *          example: '635a91e837ad67001412321a'\n   *          schema:\n   *            type: string\n   *      requestBody:\n   *        content:\n   *          application/json:\n   *            schema:\n   *              $ref: '#/components/schemas/Advertisement'\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: array\n   *                items:\n   *                  $ref: '#/components/schemas/Advertisement'\n   *        400:\n   *          description: Invaild advertisement data\n   *        401:\n   *          $ref: '#/components/responses/UnauthorizedError'\n   */\n  // #endregion\n  route.put(\n    '/:id',\n    isAccessTokenValidWithAdmin,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { id } = req.params;\n      const advertisementDTO = req.body;\n      const AdvertisementServiceInstance = new AdvertisementService(AdvertisementModel);\n      const advertisement = await AdvertisementServiceInstance.modifyAdvertisement(\n        Types.ObjectId(id),\n        advertisementDTO\n      );\n\n      return res.status(200).json(advertisement);\n    })\n  );\n\n  // #region 광고 삭제\n  /**\n   * @swagger\n   * paths:\n   *   /advertisements/{id}:\n   *    delete:\n   *      tags:\n   *        - 광고\n   *      summary: 광고 삭제\n   *      description: 광고를 삭제한다.\n   *      parameters:\n   *        - name: accessToken\n   *          in: header\n   *          description: access token\n   *          required: false\n   *          schema:\n   *            type: string\n   *        - name: id\n   *          in: path\n   *          description: 광고 Id\n   *          required: true\n   *          example: '60213d1c3126991a7cd1d287'\n   *          schema:\n   *            type: string\n   *      responses:\n   *        204:\n   *          description: successful operation\n   *        401:\n   *          $ref: '#/components/responses/UnauthorizedError'\n   *        404:\n   *          description: Advertisement not found\n   */\n  // #endregion\n  route.delete(\n    '/:id',\n    isAccessTokenValidWithAdmin,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { id } = req.params;\n      const AdvertisementServiceInstance = new AdvertisementService(AdvertisementModel);\n      await AdvertisementServiceInstance.deleteAdvertisement(Types.ObjectId(id));\n      return res.status(204).json();\n    })\n  );\n};\n"]}