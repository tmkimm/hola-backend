{"version":3,"file":"post.js","sourceRoot":"/","sources":["api/routes/post.ts"],"names":[],"mappings":"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","sourcesContent":["import { Router, Request, Response, NextFunction } from 'express';\r\nimport { Types } from 'mongoose';\r\nimport { IUser, User as UserModel } from '../../models/User';\r\nimport {\r\n  checkPost,\r\n  isPostValid,\r\n  isAccessTokenValid,\r\n  getUserIdByAccessToken,\r\n  isPostIdValid,\r\n} from '../middlewares/index';\r\nimport { PostService } from '../../services/index';\r\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\r\nimport { Post as PostModel } from '../../models/Post';\r\nimport { Notification as NotificationModel } from '../../models/Notification';\r\n\r\nconst route = Router();\r\n\r\nexport default (app: Router) => {\r\n  /**\r\n   * @swagger\r\n   * tags:\r\n        - name: posts\r\n          description: 글에 관련된 API\r\n   */\r\n  app.use('/posts', route);\r\n\r\n  /**\r\n   * @swagger\r\n   * paths:\r\n   *   /posts:\r\n   *    get:\r\n   *      tags:\r\n   *        - posts\r\n   *      summary: 글 리스트 조회(메인)\r\n   *      description: 메인 페이지에서 글 리스트를 조회한다.\r\n   *      parameters:\r\n   *        - name: language\r\n   *          in: query\r\n   *          description: 사용 언어\r\n   *          required: false\r\n   *          schema:\r\n   *            type: string\r\n   *          example: 'react,java'\r\n   *        - name: offset\r\n   *          in: query\r\n   *          description: 건너뛸 개수\r\n   *          required: true\r\n   *          schema:\r\n   *            type: string\r\n   *          example: 00\r\n   *        - name: limit\r\n   *          in: query\r\n   *          description: 조회할 개수\r\n   *          required: true\r\n   *          schema:\r\n   *            type: string\r\n   *          example: 20\r\n   *        - name: sort\r\n   *          in: query\r\n   *          description: '정렬. 필드는 ,로 구분하며 +는 오름차순, -는 내림차순 '\r\n   *          required: false\r\n   *          schema:\r\n   *            type: string\r\n   *          example: '-createdAt,+views'\r\n   *        - name: position\r\n   *          in: query\r\n   *          description: '직군(FE: 프론트엔드, BE: 백엔드, DE: 디자이너, IOS: IOS, AND: 안드로이드, DEVOPS: DevOps, PM)'\r\n   *          required: false\r\n   *          schema:\r\n   *            type: string\r\n   *          example: 'FE,IOS'\r\n   *        - name: type\r\n   *          in: query\r\n   *          description: '모집 구분(1 : 프로젝트, 2: 스터디)'\r\n   *          required: false\r\n   *          schema:\r\n   *            type: string\r\n   *          example: '1'\r\n   *        - name: period\r\n   *          in: query\r\n   *          description: '조회 기간(일). 14일 경우 14일 이내의 글만 조회'\r\n   *          required: false\r\n   *          schema:\r\n   *            type: string\r\n   *          example: 14\r\n   *        - name: isClosed\r\n   *          in: query\r\n   *          description: '마감여부(true, false)'\r\n   *          required: false\r\n   *          schema:\r\n   *            type: string\r\n   *          example: true\r\n   *      responses:\r\n   *        200:\r\n   *          description: successful operation\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                type: array\r\n   *                items:\r\n   *                  $ref: '#/components/schemas/Post'\r\n   */\r\n  route.get(\r\n    '/',\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const { offset, limit, sort, language, period, isClosed, type, position } = req.query;\r\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\r\n      const posts = await PostServiceInstance.findPost(offset, limit, sort, language, period, isClosed, type, position);\r\n\r\n      return res.status(200).json(posts);\r\n    }),\r\n  );\r\n\r\n  // 메인에서의 글 추천(미사용, 제거예정)\r\n  route.get(\r\n    '/recommend',\r\n    getUserIdByAccessToken,\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const { _id: userId } = req.user as IUser;\r\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\r\n      const posts = await PostServiceInstance.recommendToUserFromMain(userId);\r\n\r\n      return res.status(200).json(posts);\r\n    }),\r\n  );\r\n  /**\r\n   * @swagger\r\n   * paths:\r\n   *   /posts/{id}/recommend:\r\n   *    get:\r\n   *      tags:\r\n   *        - posts\r\n   *      summary: 글 상세에서 관련 글 추천\r\n   *      description: '사용자가 읽고 있는 글과 관련된 글을 추천한다. 같은 기술 스택인 글 / 조회수 순으로 정렬 / 사용자가 작성한 글을 제외하기 위해 access token 사용'\r\n   *      parameters:\r\n   *        - name: accessToken\r\n   *          in: header\r\n   *          description: access token\r\n   *          required: false\r\n   *          schema:\r\n   *            type: string\r\n   *        - name: id\r\n   *          in: path\r\n   *          description: 글 Id\r\n   *          required: true\r\n   *          example: '635a91e837ad67001412321a'\r\n   *          schema:\r\n   *            type: string\r\n   *      responses:\r\n   *        200:\r\n   *          description: successful operation\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                type: array\r\n   *                items:\r\n   *                  $ref: '#/components/schemas/Post'\r\n   *        404:\r\n   *          description: Post not found\r\n   */\r\n  route.get(\r\n    '/:id/recommend',\r\n    getUserIdByAccessToken,\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const postId = req.params.id;\r\n      const { _id: userId } = req.user as IUser;\r\n\r\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\r\n      const post = await PostServiceInstance.recommendToUserFromPost(Types.ObjectId(postId), userId);\r\n\r\n      return res.status(200).json(post);\r\n    }),\r\n  );\r\n\r\n  /**\r\n   * @swagger\r\n   * paths:\r\n   *   /posts/{id}:\r\n   *    get:\r\n   *      tags:\r\n   *        - posts\r\n   *      summary: 글 상세 보기\r\n   *      description: '글 상세 정보를 조회한다. 읽은 목록 추가를 위해 access token을 사용한다.'\r\n   *      parameters:\r\n   *        - name: accessToken\r\n   *          in: header\r\n   *          description: access token\r\n   *          required: false\r\n   *          schema:\r\n   *            type: string\r\n   *        - name: id\r\n   *          in: path\r\n   *          description: 글 Id\r\n   *          required: true\r\n   *          example: '635a91e837ad67001412321a'\r\n   *          schema:\r\n   *            type: string\r\n   *      responses:\r\n   *        200:\r\n   *          description: successful operation\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                type: array\r\n   *                items:\r\n   *                  $ref: '#/components/schemas/Post'\r\n   *        404:\r\n   *          description: Post not found\r\n   */\r\n  route.get(\r\n    '/:id',\r\n    isPostIdValid,\r\n    getUserIdByAccessToken,\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const postId = req.params.id;\r\n      const { _id: userId } = req.user as IUser;\r\n\r\n      const readList = req.cookies.RVIEW;\r\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\r\n      const post = await PostServiceInstance.findPostDetail(Types.ObjectId(postId));\r\n      const { updateReadList, isAlreadyRead } = await PostServiceInstance.increaseView(\r\n        Types.ObjectId(postId),\r\n        userId,\r\n        readList,\r\n      );\r\n      if (!isAlreadyRead) {\r\n        // 쿠키는 당일만 유효\r\n        const untilMidnight = new Date();\r\n        untilMidnight.setHours(24, 0, 0, 0);\r\n        res.cookie('RVIEW', updateReadList, {\r\n          sameSite: 'none',\r\n          httpOnly: true,\r\n          secure: true,\r\n          expires: untilMidnight,\r\n        });\r\n      }\r\n      return res.status(200).json(post);\r\n    }),\r\n  );\r\n\r\n  /**\r\n   * @swagger\r\n   * paths:\r\n   *   /posts:\r\n   *    post:\r\n   *      tags:\r\n   *        - posts\r\n   *      summary: 글 등록\r\n   *      description: '신규 글을 등록한다.'\r\n   *      parameters:\r\n   *        - name: accessToken\r\n   *          in: header\r\n   *          description: access token\r\n   *          required: true\r\n   *          schema:\r\n   *            type: string\r\n   *      requestBody:\r\n   *        content:\r\n   *          application/json:\r\n   *            schema:\r\n   *              $ref: '#/components/schemas/Post'\r\n   *      responses:\r\n   *        201:\r\n   *          description: successful operation\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                type: array\r\n   *                items:\r\n   *                  $ref: '#/components/schemas/Post'\r\n   *        400:\r\n   *          description: Invaild post data\r\n   *        401:\r\n   *          $ref: '#/components/responses/UnauthorizedError'\r\n   */\r\n  route.post(\r\n    '/',\r\n    checkPost,\r\n    isPostValid,\r\n    isAccessTokenValid,\r\n    asyncErrorWrapper(async function (req: Request, res: Response, next: NextFunction) {\r\n      try {\r\n        const postDTO = req.body;\r\n        const { _id: userId } = req.user as IUser;\r\n\r\n        const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\r\n        const post = await PostServiceInstance.registerPost(userId, postDTO);\r\n        return res.status(201).json(post);\r\n      } catch (error) {\r\n        return res.status(400).json({\r\n          errors: [\r\n            {\r\n              location: 'body',\r\n              param: 'name',\r\n              error: 'TypeError',\r\n              message: 'must be String',\r\n            },\r\n          ],\r\n          error,\r\n        });\r\n      }\r\n    }),\r\n  );\r\n\r\n  /**\r\n   * @swagger\r\n   * paths:\r\n   *   /posts/{id}:\r\n   *    patch:\r\n   *      tags:\r\n   *        - posts\r\n   *      summary: 글 수정\r\n   *      description: 글을 수정한다.\r\n   *      parameters:\r\n   *        - name: accessToken\r\n   *          in: header\r\n   *          description: access token\r\n   *          required: true\r\n   *          schema:\r\n   *            type: string\r\n   *        - name: id\r\n   *          in: path\r\n   *          description: 글 Id\r\n   *          required: true\r\n   *          example: '635a91e837ad67001412321a'\r\n   *          schema:\r\n   *            type: string\r\n   *      requestBody:\r\n   *        content:\r\n   *          application/json:\r\n   *            schema:\r\n   *              $ref: '#/components/schemas/Post'\r\n   *      responses:\r\n   *        200:\r\n   *          description: successful operation\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                type: array\r\n   *                items:\r\n   *                  $ref: '#/components/schemas/Post'\r\n   *        400:\r\n   *          description: Invaild post data\r\n   *        401:\r\n   *          $ref: '#/components/responses/UnauthorizedError'\r\n   */\r\n  route.patch(\r\n    '/:id',\r\n    isAccessTokenValid,\r\n    checkPost,\r\n    isPostValid,\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const { id } = req.params;\r\n      const { _id: tokenUserId, tokenType } = req.user as IUser;\r\n\r\n      const postDTO = req.body;\r\n\r\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\r\n      const post = await PostServiceInstance.modifyPost(Types.ObjectId(id), tokenUserId, tokenType, postDTO);\r\n\r\n      return res.status(200).json(post);\r\n    }),\r\n  );\r\n\r\n  /**\r\n   * @swagger\r\n   * paths:\r\n   *   /posts/{id}:\r\n   *    delete:\r\n   *      tags:\r\n   *        - posts\r\n   *      summary: 글 삭제\r\n   *      description: 글을 삭제한다.\r\n   *      parameters:\r\n   *        - name: id\r\n   *          in: path\r\n   *          description: 글 Id\r\n   *          required: true\r\n   *          example: '60213d1c3126991a7cd1d287'\r\n   *          schema:\r\n   *            type: string\r\n   *      responses:\r\n   *        204:\r\n   *          description: successful operation\r\n   *        401:\r\n   *          $ref: '#/components/responses/UnauthorizedError'\r\n   *        404:\r\n   *          description: Post not found\r\n   */\r\n  route.delete(\r\n    '/:id',\r\n    isPostIdValid,\r\n    isAccessTokenValid,\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const { id } = req.params;\r\n      const { _id: tokenUserId, tokenType } = req.user as IUser;\r\n\r\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\r\n      await PostServiceInstance.deletePost(Types.ObjectId(id), tokenUserId, tokenType);\r\n      return res.status(204).json();\r\n    }),\r\n  );\r\n\r\n  /**\r\n   * @swagger\r\n   * tags:\r\n        - name: likes\r\n          description: 글 관심 등록\r\n   */\r\n  /**\r\n   * @swagger\r\n   * paths:\r\n   *   /posts/likes:\r\n   *    post:\r\n   *      tags:\r\n   *        - likes\r\n   *      summary: 좋아요 등록\r\n   *      description: 좋아요 등록\r\n   *      parameters:\r\n   *        - name: accessToken\r\n   *          in: header\r\n   *          description: access token\r\n   *          required: true\r\n   *          schema:\r\n   *            type: string\r\n   *      requestBody:\r\n   *        content:\r\n   *          application/json:\r\n   *            schema:\r\n   *              type: object\r\n   *              properties:\r\n   *                postId:\r\n   *                  type: string\r\n   *                  description : '글 ID'\r\n   *                  example: '61063af4ed4b420bbcfa0b4c'\r\n   *      responses:\r\n   *        201:\r\n   *          description: successful operation\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                type: object\r\n   *                properties:\r\n   *                  likeUsers:\r\n   *                    type: array\r\n   *                    description: 사용자 리스트\r\n   *                    items:\r\n   *                      type: string\r\n   *        400:\r\n   *          description: Invaild post data\r\n   *        401:\r\n   *          $ref: '#/components/responses/UnauthorizedError'\r\n   */\r\n  route.post(\r\n    '/likes',\r\n    isAccessTokenValid,\r\n    isPostIdValid,\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const { postId } = req.body;\r\n      const { _id: userId } = req.user as IUser;\r\n\r\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\r\n      const post = await PostServiceInstance.addLike(Types.ObjectId(postId), userId);\r\n\r\n      return res.status(201).json({ likeUsers: post.likes });\r\n    }),\r\n  );\r\n\r\n  /**\r\n   * @swagger\r\n   * paths:\r\n   *   /posts/likes/{id}:\r\n   *    delete:\r\n   *      tags:\r\n   *        - likes\r\n   *      summary: 좋아요 삭제\r\n   *      description: 좋아요 삭제\r\n   *      parameters:\r\n   *        - name: accessToken\r\n   *          in: header\r\n   *          description: access token\r\n   *          required: true\r\n   *          schema:\r\n   *            type: string\r\n   *        - name: id\r\n   *          in: path\r\n   *          description: 글 Id\r\n   *          required: true\r\n   *          example: '60213d1c3126991a7cd1d287'\r\n   *          schema:\r\n   *            type: string\r\n   *      responses:\r\n   *        204:\r\n   *          description: successful operation\r\n   *        401:\r\n   *          $ref: '#/components/responses/UnauthorizedError'\r\n   *        404:\r\n   *          description: Post not found\r\n   */\r\n  route.delete(\r\n    '/likes/:id',\r\n    isAccessTokenValid,\r\n    isPostIdValid,\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const postId = req.params.id; // 사용자 id\r\n      const { _id: userId } = req.user as IUser;\r\n\r\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\r\n      const post = await PostServiceInstance.deleteLike(Types.ObjectId(postId), userId);\r\n      return res.status(201).json({ likeUsers: post.likes });\r\n    }),\r\n  );\r\n\r\n  \r\n  /**\r\n   * @swagger\r\n   * paths:\r\n   *   /posts/{id}/isLiked:\r\n   *    get:\r\n   *      tags:\r\n   *        - likes\r\n   *      summary: 사용자의 글 관심 등록 여부\r\n   *      description: '사용자가 글에 관심 등록을 눌렀는지 여부를 조회한다. 사용자 정보는 access token을 이용해 확인한다.'\r\n   *      parameters:\r\n   *        - name: accessToken\r\n   *          in: header\r\n   *          description: access token\r\n   *          required: false\r\n   *          schema:\r\n   *            type: string\r\n   *        - name: id\r\n   *          in: path\r\n   *          description: 글 Id\r\n   *          required: true\r\n   *          example: '635a91e837ad67001412321a'\r\n   *          schema:\r\n   *            type: string\r\n   *      responses:\r\n   *        200:\r\n   *          description: successful operation\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                type: object\r\n   *                properties:\r\n   *                  isLiked:\r\n   *                    type: boolean\r\n   *                    description : 'true, false'\r\n   *        401:\r\n   *          $ref: '#/components/responses/UnauthorizedError'\r\n   */\r\n   route.get(\r\n    '/:id/isLiked',\r\n    getUserIdByAccessToken,\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const postId = req.params.id;\r\n      const { _id: userId } = req.user as IUser;\r\n\r\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\r\n      const isLiked = await PostServiceInstance.findUserLiked(Types.ObjectId(postId), userId);\r\n\r\n      return res.status(200).json({\r\n        isLiked,\r\n      });\r\n    }),\r\n  );\r\n\r\n  /**\r\n   * @swagger\r\n   * paths:\r\n   *   /posts/{id}/likes:\r\n   *    get:\r\n   *      tags:\r\n   *        - likes\r\n   *      summary: 글의 관심 등록한 사용자 리스트 조회\r\n   *      description: '사용자가 글에 관심 등록한 사용자 리스트를 조회한다.'\r\n   *      parameters:\r\n   *        - name: id\r\n   *          in: path\r\n   *          description: 글 Id\r\n   *          required: true\r\n   *          example: '61063af4ed4b420bbcfa0b4c'\r\n   *          schema:\r\n   *            type: string\r\n   *      responses:\r\n   *        200:\r\n   *          description: successful operation\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                type: object\r\n   *                properties:\r\n   *                  likeUsers:\r\n   *                    type: array\r\n   *                    description: 사용자 리스트\r\n   *                    items:\r\n   *                      type: string\r\n   */\r\n  route.get(\r\n    '/:id/likes',\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const postId = req.params.id;\r\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\r\n      const likeUsers = await PostServiceInstance.findLikeUsers(Types.ObjectId(postId));\r\n\r\n      return res.status(200).json({\r\n        likeUsers,\r\n      });\r\n    }),\r\n  );\r\n};\r\n"]}