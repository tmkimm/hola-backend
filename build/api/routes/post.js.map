{"version":3,"file":"post.js","sourceRoot":"/","sources":["api/routes/post.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextFunction, Request, Response, Router } from 'express';\nimport { Types } from 'mongoose';\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\nimport { Notification as NotificationModel } from '../../models/Notification';\nimport { Post as PostModel } from '../../models/Post';\nimport { IUser, User as UserModel } from '../../models/User';\nimport { PostService } from '../../services/index';\nimport {\n  checkPost,\n  getUserIdByAccessToken,\n  isAccessTokenValid,\n  isObjectIdValid,\n  isPostIdValid,\n  isPostValid,\n} from '../middlewares/index';\n\nconst route = Router();\n\nexport default (app: Router) => {\n  /**\n   * @swagger\n   * tags:\n        - name: posts\n          description: 글에 관련된 API\n   */\n  app.use('/posts', route);\n\n  // #region 이번주 인기글\n  /**\n   * @swagger\n   * paths:\n   *   /posts/top:\n   *    get:\n   *      tags:\n   *        - 팀원 모집\n   *      summary: 이번주 인기글\n   *      description: 메인 페이지에서 이번주 인기글을 조회한다.(조회수 기준 정렬)\n   *      parameters:\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: array\n   *                items:\n   *                  $ref: '#/components/schemas/Post'\n   */\n  // #endregion\n  route.get(\n    '/top',\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\n      const posts = await PostServiceInstance.findTopPost();\n      return res.status(200).json(posts);\n    })\n  );\n\n  // #region 글 리스트 조회(페이징)\n  /**\n   * @swagger\n   * paths:\n   *   /posts/pagination:\n   *    get:\n   *      tags:\n   *        - 팀원 모집\n   *      summary: 글 리스트 조회(페이징)\n   *      description: 메인 페이지에서 글 리스트를 조회한다.\n   *      parameters:\n   *        - name: accessToken\n   *          in: header\n   *          description: access token\n   *          required: false\n   *          schema:\n   *            type: string\n   *        - name: language\n   *          in: query\n   *          description: 사용 언어\n   *          required: false\n   *          schema:\n   *            type: string\n   *          example: 'react,java'\n   *        - name: page\n   *          in: query\n   *          description: 현재 페이지(기본 1)\n   *          required: true\n   *          schema:\n   *            type: number\n   *          example: 3\n   *        - name: sort\n   *          in: query\n   *          description: '정렬. 필드는 ,로 구분하며 +는 오름차순, -는 내림차순 '\n   *          required: false\n   *          schema:\n   *            type: string\n   *          example: '-createdAt,+views'\n   *        - name: position\n   *          in: query\n   *          description: '직군(FE: 프론트엔드, BE: 백엔드, DE: 디자이너, IOS: IOS, AND: 안드로이드, DEVOPS: DevOps, PM)'\n   *          required: false\n   *          schema:\n   *            type: string\n   *          example: 'FE,IOS'\n   *        - name: type\n   *          in: query\n   *          description: '모집 구분(1 : 프로젝트, 2: 스터디)'\n   *          required: false\n   *          schema:\n   *            type: string\n   *          example: '1'\n   *        - name: period\n   *          in: query\n   *          description: '조회 기간(일). 14일 경우 14일 이내의 글만 조회'\n   *          required: false\n   *          schema:\n   *            type: string\n   *          example: 14\n   *        - name: isClosed\n   *          in: query\n   *          description: '마감여부(true, false)'\n   *          required: false\n   *          schema:\n   *            type: string\n   *          example: true\n   *        - name: search\n   *          in: query\n   *          description: '검색'\n   *          required: false\n   *          schema:\n   *            type: string\n   *          example: '토이프로젝트'\n   *        - name: onOffLine\n   *          in: query\n   *          description: '진행방식(on:온라인, off:오프라인, onOff: 온/오프라인)'\n   *          required: false\n   *          schema:\n   *            type: string\n   *          example: 'on'\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: object\n   *                properties:\n   *                  posts:\n   *                    type: array\n   *                    items:\n   *                      $ref: '#/components/schemas/PostMain'\n   */\n  // #endregion\n  route.get(\n    '/pagination',\n    getUserIdByAccessToken,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { page, sort, language, period, isClosed, type, position, search, onOffLine } = req.query;\n      const { _id: userId } = req.user as IUser;\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\n\n      const posts = await PostServiceInstance.findPostPagination(\n        page,\n        sort,\n        language,\n        period,\n        isClosed,\n        type,\n        position,\n        search,\n        userId,\n        onOffLine\n      );\n\n      return res.status(200).json(posts);\n    })\n  );\n\n  /**\n   * @swagger\n   * paths:\n   *   /posts/last-page:\n   *    get:\n   *      tags:\n   *        - 팀원 모집\n   *      summary: 총 페이지 수 구하기\n   *      description: 마지막 페이지를 구한다.\n   *      parameters:\n   *        - name: language\n   *          in: query\n   *          description: 사용 언어\n   *          required: false\n   *          schema:\n   *            type: string\n   *          example: 'react,java'\n   *        - name: position\n   *          in: query\n   *          description: '직군(FE: 프론트엔드, BE: 백엔드, DE: 디자이너, IOS: IOS, AND: 안드로이드, DEVOPS: DevOps, PM)'\n   *          required: false\n   *          schema:\n   *            type: string\n   *          example: 'FE,IOS'\n   *        - name: type\n   *          in: query\n   *          description: '모집 구분(1 : 프로젝트, 2: 스터디)'\n   *          required: false\n   *          schema:\n   *            type: string\n   *          example: '1'\n   *        - name: period\n   *          in: query\n   *          description: '조회 기간(일). 14일 경우 14일 이내의 글만 조회'\n   *          required: false\n   *          schema:\n   *            type: string\n   *          example: 14\n   *        - name: isClosed\n   *          in: query\n   *          description: '마감여부(true, false)'\n   *          required: false\n   *          schema:\n   *            type: string\n   *          example: true\n   *        - name: search\n   *          in: query\n   *          description: '검색'\n   *          required: false\n   *          schema:\n   *            type: string\n   *          example: '토이프로젝트'\n   *        - name: onOffLine\n   *          in: query\n   *          description: '진행방식(on:온라인, off:오프라인, onOff: 온/오프라인)'\n   *          required: false\n   *          schema:\n   *            type: string\n   *          example: 'on'\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: object\n   *                properties:\n   *                  lastPage:\n   *                    type: number\n   *                    description : '전체 페이지 수'\n   *                    example: 7\n   */\n  route.get(\n    '/last-page',\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { language, period, isClosed, type, position, search, onOffLine } = req.query;\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\n      const lastPage = await PostServiceInstance.findLastPage(\n        language,\n        period,\n        isClosed,\n        type,\n        position,\n        search,\n        onOffLine\n      );\n\n      return res.status(200).json({\n        lastPage,\n      });\n    })\n  );\n\n  // #region 글 상세에서 관련 글 추천\n  /**\n   * @swagger\n   * paths:\n   *   /posts/{id}/recommend:\n   *    get:\n   *      tags:\n   *        - 팀원 모집\n   *      summary: 글 상세에서 관련 글 추천\n   *      description: '사용자가 읽고 있는 글과 관련된 글을 추천한다. 같은 기술 스택인 글 / 조회수 순으로 정렬 / 사용자가 작성한 글을 제외하기 위해 access token 사용'\n   *      parameters:\n   *        - name: accessToken\n   *          in: header\n   *          description: access token\n   *          required: false\n   *          schema:\n   *            type: string\n   *        - name: id\n   *          in: path\n   *          description: 글 Id\n   *          required: true\n   *          example: '635a91e837ad67001412321a'\n   *          schema:\n   *            type: string\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: array\n   *                items:\n   *                  $ref: '#/components/schemas/Post'\n   *        404:\n   *          description: Post not found\n   */\n  // #endregion\n  route.get(\n    '/:id/recommend',\n    getUserIdByAccessToken,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const postId = req.params.id;\n      const { _id: userId } = req.user as IUser;\n\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\n      const post = await PostServiceInstance.recommendToUserFromPost(Types.ObjectId(postId), userId);\n      // const post = await PostServiceInstance.findPopularPosts(Types.ObjectId(postId), userId);  // 무조건 인기글 순으로 조회\n\n      return res.status(200).json(post);\n    })\n  );\n\n  // #region 글 상세 보기\n  /**\n   * @swagger\n   * paths:\n   *   /posts/{id}:\n   *    get:\n   *      tags:\n   *        - 팀원 모집\n   *      summary: 글 상세 보기\n   *      description: '글 상세 정보를 조회한다. 읽은 목록 추가를 위해 access token을 사용한다.'\n   *      parameters:\n   *        - name: accessToken\n   *          in: header\n   *          description: access token\n   *          required: false\n   *          schema:\n   *            type: string\n   *        - name: id\n   *          in: path\n   *          description: 글 Id\n   *          required: true\n   *          example: '635a91e837ad67001412321a'\n   *          schema:\n   *            type: string\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: array\n   *                items:\n   *                  $ref: '#/components/schemas/Post'\n   *        404:\n   *          description: Post not found\n   */\n  // #endregion\n  route.get(\n    '/:id',\n    isObjectIdValid,\n    getUserIdByAccessToken,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const postId = req.params.id;\n      const { _id: userId } = req.user as IUser;\n\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\n      const post = await PostServiceInstance.findPostDetail(Types.ObjectId(postId), userId);\n\n      return res.status(200).json(post);\n    })\n  );\n\n  // #region 글 등록\n  /**\n   * @swagger\n   * paths:\n   *   /posts:\n   *    post:\n   *      tags:\n   *        - 팀원 모집\n   *      summary: 글 등록\n   *      description: '신규 글을 등록한다.'\n   *      parameters:\n   *        - name: accessToken\n   *          in: header\n   *          description: access token\n   *          required: true\n   *          schema:\n   *            type: string\n   *      requestBody:\n   *        content:\n   *          application/json:\n   *            schema:\n   *              $ref: '#/components/schemas/Post'\n   *      responses:\n   *        201:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: array\n   *                items:\n   *                  $ref: '#/components/schemas/Post'\n   *        400:\n   *          description: Invaild post data\n   *        401:\n   *          $ref: '#/components/responses/UnauthorizedError'\n   */\n  // #endregion\n  route.post(\n    '/',\n    checkPost,\n    isPostValid,\n    isAccessTokenValid,\n    asyncErrorWrapper(async function (req: Request, res: Response, next: NextFunction) {\n      try {\n        const postDTO = req.body;\n        const { _id: userId } = req.user as IUser;\n\n        const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\n        const post = await PostServiceInstance.registerPost(userId, postDTO);\n        return res.status(201).json(post);\n      } catch (error) {\n        return res.status(400).json({\n          errors: [\n            {\n              location: 'body',\n              param: 'name',\n              error: 'TypeError',\n              message: 'must be String',\n            },\n          ],\n          error,\n        });\n      }\n    })\n  );\n\n  // #region 글 수정\n  /**\n   * @swagger\n   * paths:\n   *   /posts/{id}:\n   *    patch:\n   *      tags:\n   *        - 팀원 모집\n   *      summary: 글 수정\n   *      description: 글을 수정한다.\n   *      parameters:\n   *        - name: accessToken\n   *          in: header\n   *          description: access token\n   *          required: true\n   *          schema:\n   *            type: string\n   *        - name: id\n   *          in: path\n   *          description: 글 Id\n   *          required: true\n   *          example: '635a91e837ad67001412321a'\n   *          schema:\n   *            type: string\n   *      requestBody:\n   *        content:\n   *          application/json:\n   *            schema:\n   *              $ref: '#/components/schemas/Post'\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: array\n   *                items:\n   *                  $ref: '#/components/schemas/Post'\n   *        400:\n   *          description: Invaild post data\n   *        401:\n   *          $ref: '#/components/responses/UnauthorizedError'\n   */\n  // #endregion\n  route.patch(\n    '/:id',\n    isAccessTokenValid,\n    checkPost,\n    isPostValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { id } = req.params;\n      const { _id: tokenUserId, tokenType } = req.user as IUser;\n\n      const postDTO = req.body;\n\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\n      const post = await PostServiceInstance.modifyPost(Types.ObjectId(id), tokenUserId, tokenType, postDTO);\n\n      return res.status(200).json(post);\n    })\n  );\n\n  // #region 글 삭제\n  /**\n   * @swagger\n   * paths:\n   *   /posts/{id}:\n   *    delete:\n   *      tags:\n   *        - 팀원 모집\n   *      summary: 글 삭제\n   *      description: 글을 삭제한다.\n   *      parameters:\n   *        - name: id\n   *          in: path\n   *          description: 글 Id\n   *          required: true\n   *          example: '60213d1c3126991a7cd1d287'\n   *          schema:\n   *            type: string\n   *      responses:\n   *        204:\n   *          description: successful operation\n   *        401:\n   *          $ref: '#/components/responses/UnauthorizedError'\n   *        404:\n   *          description: Post not found\n   */\n  // #endregion\n  route.delete(\n    '/:id',\n    isPostIdValid,\n    isAccessTokenValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { id } = req.params;\n      const { _id: tokenUserId, tokenType } = req.user as IUser;\n\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\n      await PostServiceInstance.deletePost(Types.ObjectId(id), tokenUserId, tokenType);\n      return res.status(204).json();\n    })\n  );\n\n  /**\n   * @swagger\n   * tags:\n        - name: likes\n          description: 글 관심 등록\n   */\n  // #region 좋아요 등록\n  /**\n   * @swagger\n   * paths:\n   *   /posts/likes:\n   *    post:\n   *      tags:\n   *        - 모집글 관심등록\n   *      summary: 좋아요 등록\n   *      description: 좋아요 등록\n   *      parameters:\n   *        - name: accessToken\n   *          in: header\n   *          description: access token\n   *          required: true\n   *          schema:\n   *            type: string\n   *      requestBody:\n   *        content:\n   *          application/json:\n   *            schema:\n   *              type: object\n   *              properties:\n   *                postId:\n   *                  type: string\n   *                  description : '글 ID'\n   *                  example: '61063af4ed4b420bbcfa0b4c'\n   *      responses:\n   *        201:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: object\n   *                properties:\n   *                  likeUsers:\n   *                    type: array\n   *                    description: 사용자 리스트\n   *                    items:\n   *                      type: string\n   *        400:\n   *          description: Invaild post data\n   *        401:\n   *          $ref: '#/components/responses/UnauthorizedError'\n   */\n  // #endregion\n  route.post(\n    '/likes',\n    isAccessTokenValid,\n    isPostIdValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { postId } = req.body;\n      const { _id: userId } = req.user as IUser;\n\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\n      const post = await PostServiceInstance.addLike(Types.ObjectId(postId), userId);\n\n      return res.status(201).json({ likeUsers: post.likes });\n    })\n  );\n\n  /**\n   * @swagger\n   * paths:\n   *   /posts/likes/{id}:\n   *    delete:\n   *      tags:\n   *        - 모집글 관심등록\n   *      summary: 좋아요 삭제\n   *      description: 좋아요 삭제\n   *      parameters:\n   *        - name: accessToken\n   *          in: header\n   *          description: access token\n   *          required: true\n   *          schema:\n   *            type: string\n   *        - name: id\n   *          in: path\n   *          description: 글 Id\n   *          required: true\n   *          example: '60213d1c3126991a7cd1d287'\n   *          schema:\n   *            type: string\n   *      responses:\n   *        204:\n   *          description: successful operation\n   *        401:\n   *          $ref: '#/components/responses/UnauthorizedError'\n   *        404:\n   *          description: Post not found\n   */\n  route.delete(\n    '/likes/:id',\n    isAccessTokenValid,\n    isPostIdValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const postId = req.params.id; // 사용자 id\n      const { _id: userId } = req.user as IUser;\n\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\n      const post = await PostServiceInstance.deleteLike(Types.ObjectId(postId), userId);\n      return res.status(201).json({ likeUsers: post.likes });\n    })\n  );\n\n  /**\n   * @swagger\n   * paths:\n   *   /posts/{id}/isLiked:\n   *    get:\n   *      tags:\n   *        - 모집글 관심등록\n   *      summary: 사용자의 글 관심 등록 여부\n   *      description: '사용자가 글에 관심 등록을 눌렀는지 여부를 조회한다. 사용자 정보는 access token을 이용해 확인한다.'\n   *      parameters:\n   *        - name: accessToken\n   *          in: header\n   *          description: access token\n   *          required: false\n   *          schema:\n   *            type: string\n   *        - name: id\n   *          in: path\n   *          description: 글 Id\n   *          required: true\n   *          example: '635a91e837ad67001412321a'\n   *          schema:\n   *            type: string\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: object\n   *                properties:\n   *                  isLiked:\n   *                    type: boolean\n   *                    description : 'true, false'\n   *        401:\n   *          $ref: '#/components/responses/UnauthorizedError'\n   */\n  route.get(\n    '/:id/isLiked',\n    getUserIdByAccessToken,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const postId = req.params.id;\n      const { _id: userId } = req.user as IUser;\n\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\n      const isLiked = await PostServiceInstance.findUserLiked(Types.ObjectId(postId), userId);\n\n      return res.status(200).json({\n        isLiked,\n      });\n    })\n  );\n\n  /**\n   * @swagger\n   * paths:\n   *   /posts/{id}/likes:\n   *    get:\n   *      tags:\n   *        - 모집글 관심등록\n   *      summary: 글의 관심 등록한 사용자 리스트 조회\n   *      description: '사용자가 글에 관심 등록한 사용자 리스트를 조회한다.'\n   *      parameters:\n   *        - name: id\n   *          in: path\n   *          description: 글 Id\n   *          required: true\n   *          example: '61063af4ed4b420bbcfa0b4c'\n   *          schema:\n   *            type: string\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: object\n   *                properties:\n   *                  likeUsers:\n   *                    type: array\n   *                    description: 사용자 리스트\n   *                    items:\n   *                      type: string\n   */\n  route.get(\n    '/:id/likes',\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const postId = req.params.id;\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\n      const likeUsers = await PostServiceInstance.findLikeUsers(Types.ObjectId(postId));\n\n      return res.status(200).json({\n        likeUsers,\n      });\n    })\n  );\n};\n"]}