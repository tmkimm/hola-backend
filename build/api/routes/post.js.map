{"version":3,"file":"post.js","sourceRoot":"/","sources":["api/routes/post.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mCAAkE;AAClE,qCAAiC;AACjC,0CAA6D;AAC7D,8CAM8B;AAC9B,8CAAmD;AACnD,6DAA4D;AAC5D,0CAAsD;AACtD,0DAA8E;AAE9E,IAAM,KAAK,GAAG,IAAA,gBAAM,GAAE,CAAC;AAEvB,mBAAe,UAAC,GAAW;IACzB;;;;;;;;;;;;QAYI;IACJ,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAEzB,WAAW;IACX,KAAK,CAAC,GAAG,CACP,GAAG,EACH,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBAChE,KAA4D,GAAG,CAAC,KAAK,EAAnE,MAAM,YAAA,EAAE,KAAK,WAAA,EAAE,IAAI,UAAA,EAAE,QAAQ,cAAA,EAAE,MAAM,YAAA,EAAE,QAAQ,cAAA,EAAE,IAAI,UAAA,CAAe;oBACtE,mBAAmB,GAAG,IAAI,mBAAW,CAAC,WAAS,EAAE,WAAS,EAAE,2BAAiB,CAAC,CAAC;oBACvE,qBAAM,mBAAmB,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,EAAA;;oBAAjG,KAAK,GAAG,SAAyF;oBAEvG,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAC;;;SACpC,CAAC,CACH,CAAC;IAEF,aAAa;IACb,KAAK,CAAC,GAAG,CACP,YAAY,EACZ,8BAAsB,EACtB,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBACzD,MAAM,GAAK,GAAG,CAAC,IAAa,IAAtB,CAAuB;oBACpC,mBAAmB,GAAG,IAAI,mBAAW,CAAC,WAAS,EAAE,WAAS,EAAE,2BAAiB,CAAC,CAAC;oBACvE,qBAAM,mBAAmB,CAAC,uBAAuB,CAAC,MAAM,CAAC,EAAA;;oBAAjE,KAAK,GAAG,SAAyD;oBAEvE,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAC;;;SACpC,CAAC,CACH,CAAC;IAEF,YAAY;IACZ,KAAK,CAAC,GAAG,CACP,gBAAgB,EAChB,8BAAsB,EACtB,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBAChE,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;oBAChB,MAAM,GAAK,GAAG,CAAC,IAAa,IAAtB,CAAuB;oBAEpC,mBAAmB,GAAG,IAAI,mBAAW,CAAC,WAAS,EAAE,WAAS,EAAE,2BAAiB,CAAC,CAAC;oBACxE,qBAAM,mBAAmB,CAAC,uBAAuB,CAAC,gBAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,EAAA;;oBAAxF,IAAI,GAAG,SAAiF;oBAE9F,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAC;;;SACnC,CAAC,CACH,CAAC;IAEF,UAAU;IACV,4BAA4B;IAC5B,KAAK,CAAC,GAAG,CACP,MAAM,EACN,qBAAa,EACb,8BAAsB,EACtB,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBAChE,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;oBAChB,MAAM,GAAK,GAAG,CAAC,IAAa,IAAtB,CAAuB;oBAEpC,QAAQ,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC;oBAC7B,mBAAmB,GAAG,IAAI,mBAAW,CAAC,WAAS,EAAE,WAAS,EAAE,2BAAiB,CAAC,CAAC;oBACxE,qBAAM,mBAAmB,CAAC,cAAc,CAAC,gBAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAA;;oBAAvE,IAAI,GAAG,SAAgE;oBACnC,qBAAM,mBAAmB,CAAC,YAAY,CAC9E,gBAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EACtB,MAAM,EACN,QAAQ,CACT,EAAA;;oBAJK,KAAoC,SAIzC,EAJO,cAAc,oBAAA,EAAE,aAAa,mBAAA;oBAKrC,IAAI,CAAC,aAAa,EAAE;wBAEZ,aAAa,GAAG,IAAI,IAAI,EAAE,CAAC;wBACjC,aAAa,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;wBACpC,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE,cAAc,EAAE;4BAClC,QAAQ,EAAE,MAAM;4BAChB,QAAQ,EAAE,IAAI;4BACd,MAAM,EAAE,IAAI;4BACZ,OAAO,EAAE,aAAa;yBACvB,CAAC,CAAC;qBACJ;oBAED,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAC;;;SACnC,CAAC,CACH,CAAC;IAEF,kBAAkB;IAClB,KAAK,CAAC,GAAG,CACP,cAAc,EACd,8BAAsB,EACtB,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBAChE,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;oBAChB,MAAM,GAAK,GAAG,CAAC,IAAa,IAAtB,CAAuB;oBAEpC,mBAAmB,GAAG,IAAI,mBAAW,CAAC,WAAS,EAAE,WAAS,EAAE,2BAAiB,CAAC,CAAC;oBACrE,qBAAM,mBAAmB,CAAC,aAAa,CAAC,gBAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,EAAA;;oBAAjF,OAAO,GAAG,SAAuE;oBAEvF,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;4BAC1B,OAAO,SAAA;yBACR,CAAC,EAAC;;;SACJ,CAAC,CACH,CAAC;IAEF,uBAAuB;IACvB,KAAK,CAAC,GAAG,CACP,YAAY,EACZ,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBAChE,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;oBACvB,mBAAmB,GAAG,IAAI,mBAAW,CAAC,WAAS,EAAE,WAAS,EAAE,2BAAiB,CAAC,CAAC;oBACnE,qBAAM,mBAAmB,CAAC,aAAa,CAAC,gBAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAA;;oBAA3E,SAAS,GAAG,SAA+D;oBAEjF,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;4BAC1B,SAAS,WAAA;yBACV,CAAC,EAAC;;;SACJ,CAAC,CACH,CAAC;IAEF,OAAO;IACP,KAAK,CAAC,IAAI,CACR,GAAG,EACH,iBAAS,EACT,mBAAW,EACX,0BAAkB,EAClB,IAAA,qCAAiB,EAAC,UAAgB,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;;;wBAEvE,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC;wBACZ,MAAM,GAAK,GAAG,CAAC,IAAa,IAAtB,CAAuB;wBAEpC,mBAAmB,GAAG,IAAI,mBAAW,CAAC,WAAS,EAAE,WAAS,EAAE,2BAAiB,CAAC,CAAC;wBACxE,qBAAM,mBAAmB,CAAC,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC,EAAA;;wBAA9D,IAAI,GAAG,SAAuD;wBACpE,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAC;;;wBAElC,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gCAC1B,MAAM,EAAE;oCACN;wCACE,QAAQ,EAAE,MAAM;wCAChB,KAAK,EAAE,MAAM;wCACb,KAAK,EAAE,WAAW;wCAClB,OAAO,EAAE,gBAAgB;qCAC1B;iCACF;gCACD,KAAK,SAAA;6BACN,CAAC,EAAC;;;;;KAEN,CAAC,CACH,CAAC;IAEF,OAAO;IACP,KAAK,CAAC,KAAK,CACT,MAAM,EACN,0BAAkB,EAClB,iBAAS,EACT,mBAAW,EACX,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBAC9D,EAAE,GAAK,GAAG,CAAC,MAAM,GAAf,CAAgB;oBACb,WAAW,GAAK,GAAG,CAAC,IAAa,IAAtB,CAAuB;oBAEzC,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC;oBAEnB,mBAAmB,GAAG,IAAI,mBAAW,CAAC,WAAS,EAAE,WAAS,EAAE,2BAAiB,CAAC,CAAC;oBACxE,qBAAM,mBAAmB,CAAC,UAAU,CAAC,gBAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,WAAW,EAAE,OAAO,CAAC,EAAA;;oBAArF,IAAI,GAAG,SAA8E;oBAE3F,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAC;;;SACnC,CAAC,CACH,CAAC;IAEF,OAAO;IACP,KAAK,CAAC,MAAM,CACV,MAAM,EACN,qBAAa,EACb,0BAAkB,EAClB,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBAC9D,EAAE,GAAK,GAAG,CAAC,MAAM,GAAf,CAAgB;oBACb,WAAW,GAAK,GAAG,CAAC,IAAa,IAAtB,CAAuB;oBAEzC,mBAAmB,GAAG,IAAI,mBAAW,CAAC,WAAS,EAAE,WAAS,EAAE,2BAAiB,CAAC,CAAC;oBACrF,qBAAM,mBAAmB,CAAC,UAAU,CAAC,gBAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,WAAW,CAAC,EAAA;;oBAArE,SAAqE,CAAC;oBACtE,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAC;;;SAC/B,CAAC,CACH,CAAC;IAEF,SAAS;IACT,KAAK,CAAC,IAAI,CACR,QAAQ,EACR,0BAAkB,EAClB,qBAAa,EACb,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBAC9D,MAAM,GAAK,GAAG,CAAC,IAAI,OAAb,CAAc;oBACf,MAAM,GAAK,GAAG,CAAC,IAAa,IAAtB,CAAuB;oBAEpC,mBAAmB,GAAG,IAAI,mBAAW,CAAC,WAAS,EAAE,WAAS,EAAE,2BAAiB,CAAC,CAAC;oBACxE,qBAAM,mBAAmB,CAAC,OAAO,CAAC,gBAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,EAAA;;oBAAxE,IAAI,GAAG,SAAiE;oBAE9E,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,EAAC;;;SACxD,CAAC,CACH,CAAC;IAEF,SAAS;IACT,KAAK,CAAC,MAAM,CACV,YAAY,EACZ,0BAAkB,EAClB,qBAAa,EACb,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBAChE,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;oBAChB,MAAM,GAAK,GAAG,CAAC,IAAa,IAAtB,CAAuB;oBAEpC,mBAAmB,GAAG,IAAI,mBAAW,CAAC,WAAS,EAAE,WAAS,EAAE,2BAAiB,CAAC,CAAC;oBACxE,qBAAM,mBAAmB,CAAC,UAAU,CAAC,gBAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,EAAA;;oBAA3E,IAAI,GAAG,SAAoE;oBACjF,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,EAAC;;;SACxD,CAAC,CACH,CAAC;AACJ,CAAC,EAAC","sourcesContent":["import { Router, Request, Response, NextFunction } from 'express';\nimport { Types } from 'mongoose';\nimport { IUser, User as UserModel } from '../../models/User';\nimport {\n  checkPost,\n  isPostValid,\n  isAccessTokenValid,\n  getUserIdByAccessToken,\n  isPostIdValid,\n} from '../middlewares/index';\nimport { PostService } from '../../services/index';\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\nimport { Post as PostModel } from '../../models/Post';\nimport { Notification as NotificationModel } from '../../models/Notification';\n\nconst route = Router();\n\nexport default (app: Router) => {\n  /*\n    글에 관련된 Router를 정의한다.\n    등록 / 수정 / 삭제하려는 사용자의 정보는 Access Token을 이용하여 처리한다.\n    \n    # GET /posts : 글 리스트 조회(pagenation, sort, query select)\n    # POST /posts/ : 신규 글 등록\n    # GET /posts/:id : 글 상세 정보 조회\n    # PATCH /posts/:id : 글 정보 수정\n    # DELETE /posts/:id : 글 삭제\n\n    # POST /posts/likes : 좋아요 등록\n    # DELETE /posts/likes/:id : 좋아요 삭제\n    */\n  app.use('/posts', route);\n\n  // 글 리스트 조회\n  route.get(\n    '/',\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { offset, limit, sort, language, period, isClosed, type } = req.query;\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\n      const posts = await PostServiceInstance.findPost(offset, limit, sort, language, period, isClosed, type);\n\n      return res.status(200).json(posts);\n    }),\n  );\n\n  // 메인에서의 글 추천\n  route.get(\n    '/recommend',\n    getUserIdByAccessToken,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { _id: userId } = req.user as IUser;\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\n      const posts = await PostServiceInstance.recommendToUserFromMain(userId);\n\n      return res.status(200).json(posts);\n    }),\n  );\n\n  // 글에서의 글 추천\n  route.get(\n    '/:id/recommend',\n    getUserIdByAccessToken,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const postId = req.params.id;\n      const { _id: userId } = req.user as IUser;\n\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\n      const post = await PostServiceInstance.recommendToUserFromPost(Types.ObjectId(postId), userId);\n\n      return res.status(200).json(post);\n    }),\n  );\n\n  // 글 상세 보기\n  // 로그인된 사용자일 경우 읽은 목록을 추가한다.\n  route.get(\n    '/:id',\n    isPostIdValid,\n    getUserIdByAccessToken,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const postId = req.params.id;\n      const { _id: userId } = req.user as IUser;\n\n      const readList = req.cookies.RVIEW;\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\n      const post = await PostServiceInstance.findPostDetail(Types.ObjectId(postId));\n      const { updateReadList, isAlreadyRead } = await PostServiceInstance.increaseView(\n        Types.ObjectId(postId),\n        userId,\n        readList,\n      );\n      if (!isAlreadyRead) {\n        // 쿠키는 당일만 유효\n        const untilMidnight = new Date();\n        untilMidnight.setHours(24, 0, 0, 0);\n        res.cookie('RVIEW', updateReadList, {\n          sameSite: 'none',\n          httpOnly: true,\n          secure: true,\n          expires: untilMidnight,\n        });\n      }\n\n      return res.status(200).json(post);\n    }),\n  );\n\n  // 사용자의 글 관심 등록 여부\n  route.get(\n    '/:id/isLiked',\n    getUserIdByAccessToken,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const postId = req.params.id;\n      const { _id: userId } = req.user as IUser;\n\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\n      const isLiked = await PostServiceInstance.findUserLiked(Types.ObjectId(postId), userId);\n\n      return res.status(200).json({\n        isLiked,\n      });\n    }),\n  );\n\n  // 글의 관심 등록한 사용자 리스트 조회\n  route.get(\n    '/:id/likes',\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const postId = req.params.id;\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\n      const likeUsers = await PostServiceInstance.findLikeUsers(Types.ObjectId(postId));\n\n      return res.status(200).json({\n        likeUsers,\n      });\n    }),\n  );\n\n  // 글 등록\n  route.post(\n    '/',\n    checkPost,\n    isPostValid,\n    isAccessTokenValid,\n    asyncErrorWrapper(async function (req: Request, res: Response, next: NextFunction) {\n      try {\n        const postDTO = req.body;\n        const { _id: userId } = req.user as IUser;\n\n        const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\n        const post = await PostServiceInstance.registerPost(userId, postDTO);\n        return res.status(201).json(post);\n      } catch (error) {\n        return res.status(400).json({\n          errors: [\n            {\n              location: 'body',\n              param: 'name',\n              error: 'TypeError',\n              message: 'must be String',\n            },\n          ],\n          error,\n        });\n      }\n    }),\n  );\n\n  // 글 수정\n  route.patch(\n    '/:id',\n    isAccessTokenValid,\n    checkPost,\n    isPostValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { id } = req.params;\n      const { _id: tokenUserId } = req.user as IUser;\n\n      const postDTO = req.body;\n\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\n      const post = await PostServiceInstance.modifyPost(Types.ObjectId(id), tokenUserId, postDTO);\n\n      return res.status(200).json(post);\n    }),\n  );\n\n  // 글 삭제\n  route.delete(\n    '/:id',\n    isPostIdValid,\n    isAccessTokenValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { id } = req.params;\n      const { _id: tokenUserId } = req.user as IUser;\n\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\n      await PostServiceInstance.deletePost(Types.ObjectId(id), tokenUserId);\n      return res.status(204).json();\n    }),\n  );\n\n  // 좋아요 등록\n  route.post(\n    '/likes',\n    isAccessTokenValid,\n    isPostIdValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { postId } = req.body;\n      const { _id: userId } = req.user as IUser;\n\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\n      const post = await PostServiceInstance.addLike(Types.ObjectId(postId), userId);\n\n      return res.status(201).json({ likeUsers: post.likes });\n    }),\n  );\n\n  // 좋아요 삭제\n  route.delete(\n    '/likes/:id',\n    isAccessTokenValid,\n    isPostIdValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const postId = req.params.id; // 사용자 id\n      const { _id: userId } = req.user as IUser;\n\n      const PostServiceInstance = new PostService(PostModel, UserModel, NotificationModel);\n      const post = await PostServiceInstance.deleteLike(Types.ObjectId(postId), userId);\n      return res.status(201).json({ likeUsers: post.likes });\n    }),\n  );\n};\n"]}