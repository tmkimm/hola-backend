{"version":3,"file":"auth.js","sourceRoot":"/","sources":["api/routes/auth.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mCAAkE;AAClE,0DAA8E;AAC9E,0CAAsD;AACtD,8CAAwE;AACxE,8CAA0D;AAC1D,6DAA4D;AAC5D,kEAA4C;AAE5C,IAAM,KAAK,GAAG,IAAA,gBAAM,GAAE,CAAC;AAEvB,mBAAe,UAAC,GAAW;IACzB;;;;;;;;;;;KAWC;IAED;;;;;QAKI;IACJ,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAExB,qCAAqC;IACrC,KAAK,CAAC,GAAG,CACP,GAAG,EACH,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBACtE,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE;wBACvB,MAAM,IAAI,qBAAW,CAAC,mBAAmB,EAAE,GAAG,EAAE,yBAAyB,CAAC,CAAC;qBAC5E;oBACK,mBAAmB,GAAG,IAAI,mBAAW,CAAC,WAAS,CAAC,CAAC;oBAErD,qBAAM,mBAAmB,CAAC,kBAAkB,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,EAAA;;oBAD5D,KACJ,SAAgE,EAD1D,aAAa,mBAAA,EAAE,GAAG,SAAA,EAAE,QAAQ,cAAA,EAAE,KAAK,WAAA,EAAE,aAAa,mBAAA,EAAE,WAAW,iBAAA;oBAEvE,4BAA4B;oBAE5B,IAAI,CAAC,aAAa,IAAI,OAAO,GAAG,KAAK,WAAW,EAAE;wBAChD,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;wBAC1B,MAAM,IAAI,qBAAW,CAAC,mBAAmB,EAAE,GAAG,EAAE,uBAAuB,CAAC,CAAC;qBAC1E;oBACK,2BAA2B,GAAG,IAAI,2BAAmB,CAAC,2BAAiB,CAAC,CAAC;oBACrD,qBAAM,2BAA2B,CAAC,eAAe,CAAC,GAAG,CAAC,EAAA;;oBAA1E,iBAAiB,GAAG,SAAsD;oBAC1E,eAAe,GAAG,iBAAiB,GAAG,CAAC,CAAC;oBAC9C,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;4BAC1B,GAAG,KAAA;4BACH,QAAQ,UAAA;4BACR,KAAK,OAAA;4BACL,aAAa,eAAA;4BACb,WAAW,aAAA;4BACX,eAAe,iBAAA;yBAChB,CAAC,EAAC;;;SACJ,CAAC,CACH,CAAC;IAEF,wBAAwB;IACxB,KAAK,CAAC,GAAG,CAAC,UAAU,EAAE,0BAAkB,EAAE,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;YAC9F,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,IAAI;iBACd,CAAC,EAAC;;SACJ,CAAC,CAAC;AACL,CAAC,EAAC","sourcesContent":["import { Router, Request, Response, NextFunction } from 'express';\r\nimport { Notification as NotificationModel } from '../../models/Notification';\r\nimport { User as UserModel } from '../../models/User';\r\nimport { AuthService, NotificationService } from '../../services/index';\r\nimport { isAccessTokenValid } from '../middlewares/index';\r\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\r\nimport CustomError from '../../CustomError';\r\n\r\nconst route = Router();\r\n\r\nexport default (app: Router) => {\r\n  /**\r\n * @swagger\r\n *  components:\r\n *    securitySchemes:\r\n *      bearerAuth:\r\n *        type: http\r\n *        scheme: bearer\r\n *        bearerFormat: JWT\r\n *    responses:\r\n *      UnauthorizedError:\r\n *        description: Access token is missing or invalid\r\n */\r\n\r\n  /*\r\n    권한에 관련된 Router를 정의한다.\r\n    # GET /auth : Refresh Token을 이용해 Access Token 발급\r\n    - Refresh Token이 존재하지 않거나 유효하지 않을 경우 error: -1\r\n    - Access Token이 유효하지 않을 경우 error: -2\r\n    */\r\n  app.use('/auth', route);\r\n\r\n  // Refresh Token을 이용해 Access Token 발급\r\n  route.get(\r\n    '/',\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      if (!req.cookies.R_AUTH) {\r\n        throw new CustomError('RefreshTokenError', 401, 'Refresh token not found');\r\n      }\r\n      const AuthServiceInstance = new AuthService(UserModel);\r\n      const { decodeSuccess, _id, nickName, image, likeLanguages, accessToken } =\r\n        await AuthServiceInstance.reissueAccessToken(req.cookies.R_AUTH);\r\n      // Refresh Token가 유효하지 않을 경우\r\n\r\n      if (!decodeSuccess || typeof _id === 'undefined') {\r\n        res.clearCookie('R_AUTH');\r\n        throw new CustomError('RefreshTokenError', 401, 'Invalid refresh token');\r\n      }\r\n      const NotificationServcieInstance = new NotificationService(NotificationModel);\r\n      const unReadNoticeCount = await NotificationServcieInstance.findUnReadCount(_id);\r\n      const hasUnreadNotice = unReadNoticeCount > 0;\r\n      return res.status(200).json({\r\n        _id,\r\n        nickName,\r\n        image,\r\n        likeLanguages,\r\n        accessToken,\r\n        hasUnreadNotice,\r\n      });\r\n    }),\r\n  );\r\n\r\n  // Access Token이 유효한지 체크\r\n  route.get('/isValid', isAccessTokenValid, async (req: Request, res: Response, next: NextFunction) => {\r\n    return res.status(200).json({\r\n      isValid: true,\r\n    });\r\n  });\r\n};\r\n"]}