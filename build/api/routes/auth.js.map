{"version":3,"file":"auth.js","sourceRoot":"/","sources":["api/routes/auth.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mCAAkE;AAClE,kEAA4C;AAC5C,6DAA4D;AAC5D,0DAA8E;AAC9E,0CAAsD;AACtD,8CAAwE;AACxE,8CAA0D;AAE1D,IAAM,KAAK,GAAG,IAAA,gBAAM,GAAE,CAAC;AAEvB,mBAAe,UAAC,GAAW;IACzB;;;;;;;;;;;OAWG;IAEH;;;;;QAKI;IACJ,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAExB,qCAAqC;IACrC,KAAK,CAAC,GAAG,CACP,GAAG,EACH,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBACtE,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE;wBACvB,MAAM,IAAI,qBAAW,CAAC,mBAAmB,EAAE,GAAG,EAAE,yBAAyB,CAAC,CAAC;qBAC5E;oBACK,mBAAmB,GAAG,IAAI,mBAAW,CAAC,WAAS,CAAC,CAAC;oBAErD,qBAAM,mBAAmB,CAAC,kBAAkB,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,EAAA;;oBAD5D,KACJ,SAAgE,EAD1D,aAAa,mBAAA,EAAE,GAAG,SAAA,EAAE,QAAQ,cAAA,EAAE,KAAK,WAAA,EAAE,aAAa,mBAAA,EAAE,WAAW,iBAAA;oBAEvE,4BAA4B;oBAE5B,IAAI,CAAC,aAAa,IAAI,OAAO,GAAG,KAAK,WAAW,EAAE;wBAChD,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;wBAC1B,MAAM,IAAI,qBAAW,CAAC,mBAAmB,EAAE,GAAG,EAAE,uBAAuB,CAAC,CAAC;qBAC1E;oBACK,2BAA2B,GAAG,IAAI,2BAAmB,CAAC,2BAAiB,CAAC,CAAC;oBACrD,qBAAM,2BAA2B,CAAC,eAAe,CAAC,GAAG,CAAC,EAAA;;oBAA1E,iBAAiB,GAAG,SAAsD;oBAC1E,eAAe,GAAG,iBAAiB,GAAG,CAAC,CAAC;oBAC9C,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;4BAC1B,GAAG,KAAA;4BACH,QAAQ,UAAA;4BACR,KAAK,OAAA;4BACL,aAAa,eAAA;4BACb,WAAW,aAAA;4BACX,eAAe,iBAAA;yBAChB,CAAC,EAAC;;;SACJ,CAAC,CACH,CAAC;IAEF,wBAAwB;IACxB,KAAK,CAAC,GAAG,CAAC,UAAU,EAAE,0BAAkB,EAAE,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;YAC9F,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,IAAI;iBACd,CAAC,EAAC;;SACJ,CAAC,CAAC;AACL,CAAC,EAAC","sourcesContent":["import { NextFunction, Request, Response, Router } from 'express';\nimport CustomError from '../../CustomError';\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\nimport { Notification as NotificationModel } from '../../models/Notification';\nimport { User as UserModel } from '../../models/User';\nimport { AuthService, NotificationService } from '../../services/index';\nimport { isAccessTokenValid } from '../middlewares/index';\n\nconst route = Router();\n\nexport default (app: Router) => {\n  /**\n   * @swagger\n   *  components:\n   *    securitySchemes:\n   *      bearerAuth:\n   *        type: http\n   *        scheme: bearer\n   *        bearerFormat: JWT\n   *    responses:\n   *      UnauthorizedError:\n   *        description: Access token is missing or invalid\n   */\n\n  /*\n    권한에 관련된 Router를 정의한다.\n    # GET /auth : Refresh Token을 이용해 Access Token 발급\n    - Refresh Token이 존재하지 않거나 유효하지 않을 경우 error: -1\n    - Access Token이 유효하지 않을 경우 error: -2\n    */\n  app.use('/auth', route);\n\n  // Refresh Token을 이용해 Access Token 발급\n  route.get(\n    '/',\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      if (!req.cookies.R_AUTH) {\n        throw new CustomError('RefreshTokenError', 401, 'Refresh token not found');\n      }\n      const AuthServiceInstance = new AuthService(UserModel);\n      const { decodeSuccess, _id, nickName, image, likeLanguages, accessToken } =\n        await AuthServiceInstance.reissueAccessToken(req.cookies.R_AUTH);\n      // Refresh Token가 유효하지 않을 경우\n\n      if (!decodeSuccess || typeof _id === 'undefined') {\n        res.clearCookie('R_AUTH');\n        throw new CustomError('RefreshTokenError', 401, 'Invalid refresh token');\n      }\n      const NotificationServcieInstance = new NotificationService(NotificationModel);\n      const unReadNoticeCount = await NotificationServcieInstance.findUnReadCount(_id);\n      const hasUnreadNotice = unReadNoticeCount > 0;\n      return res.status(200).json({\n        _id,\n        nickName,\n        image,\n        likeLanguages,\n        accessToken,\n        hasUnreadNotice,\n      });\n    })\n  );\n\n  // Access Token이 유효한지 체크\n  route.get('/isValid', isAccessTokenValid, async (req: Request, res: Response, next: NextFunction) => {\n    return res.status(200).json({\n      isValid: true,\n    });\n  });\n};\n"]}