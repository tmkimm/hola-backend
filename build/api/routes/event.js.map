{"version":3,"file":"event.js","sourceRoot":"/","sources":["api/routes/event.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextFunction, Request, Response, Router } from 'express';\nimport { Types } from 'mongoose';\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\nimport { Advertisement as AdvertisementModel } from '../../models/Advertisement';\nimport { Event as EventModel } from '../../models/Event';\nimport { EventService } from './../../services/event';\nimport { checkEvent, isEventValid } from '../middlewares/isEventValid';\nimport { isAccessTokenValidWithAdmin } from '../middlewares/isAccessTokenValidWithAdmin';\nimport { isAccessTokenValid } from '../middlewares/isAccessTokenValid';\nimport { isEventIdValid } from '../middlewares/isEventIdValid';\nimport { IUser } from '../../models/User';\nimport { getUserIdByAccessToken } from '../middlewares/getUserIdByAccessToken';\nimport { checkADIsActive } from '../middlewares/checkADIsActive';\n\nconst route = Router();\n\nexport default (app: Router) => {\n  /**\n   * @swagger\n   * tags:\n        - name: events\n          description: 공모전에 관련된 API\n   */\n  app.use('/events', route);\n\n  // #region 공모전 리스트 조회(페이징)\n  /**\n   * @swagger\n   * paths:\n   *   /events:\n   *    get:\n   *      tags:\n   *        - 공모전\n   *      summary: 공모전 리스트 조회(Pagination)\n   *      description: 공모전 리스트를 조회한다.\n   *      parameters:\n   *        - name: page\n   *          in: query\n   *          description: 현재 페이지(기본 1)\n   *          required: true\n   *          schema:\n   *            type: number\n   *          example: 1\n   *        - name: sort\n   *          in: query\n   *          description: '정렬(최신순: -createdAt, 인기순: -views)'\n   *          required: false\n   *          schema:\n   *            type: string\n   *          example: '-createdAt'\n   *        - name: eventType\n   *          in: query\n   *          description: '공모전 구분(conference, hackathon, contest, bootcamp, others)'\n   *          required: false\n   *          schema:\n   *            type: string\n   *          example: '1'\n   *        - name: search\n   *          in: query\n   *          description: '검색'\n   *          required: false\n   *          schema:\n   *            type: string\n   *          example: '토이프로젝트'\n   *        - name: onOffLine\n   *          in: query\n   *          description: '진행방식(on:온라인, off:오프라인, onOff: 온/오프라인)'\n   *          required: false\n   *          schema:\n   *            type: string\n   *          example: 'on'\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: array\n   *                items:\n   *                  $ref: '#/components/schemas/Event'\n   */\n  // #endregion\n  route.get(\n    '/',\n    getUserIdByAccessToken,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { page, sort, eventType, search, onOffLine } = req.query;\n      const { _id: userId } = req.user as IUser;\n      const EventServiceInstance = new EventService(EventModel, AdvertisementModel);\n      const events = await EventServiceInstance.findEventList(page, sort, eventType, search, onOffLine, userId);\n      return res.status(200).json(events);\n    })\n  );\n\n  // #region 공모전 리스트 조회(페이징)\n  /**\n   * @swagger\n   * paths:\n   *   /events/last-page:\n   *    get:\n   *      tags:\n   *        - 공모전\n   *      summary: 공모전 리스트 조회 - 마지막 페이지 조회\n   *      description: Pagination에서 마지막 페이지를 조회한다.\n   *      parameters:\n   *        - name: eventType\n   *          in: query\n   *          description: '공모전 구분(conference, hackathon, contest, bootcamp, others)'\n   *          required: false\n   *          schema:\n   *            type: string\n   *          example: '1'\n   *        - name: search\n   *          in: query\n   *          description: '검색'\n   *          required: false\n   *          schema:\n   *            type: string\n   *          example: '토이프로젝트'\n   *        - name: onOffLine\n   *          in: query\n   *          description: '진행방식(on:온라인, off:오프라인, onOff: 온/오프라인)'\n   *          required: false\n   *          schema:\n   *            type: string\n   *          example: 'on'\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: object\n   *                properties:\n   *                  lastPage:\n   *                    type: number\n   *                    description : '전체 페이지 수'\n   *                    example: 7\n   */\n  // #endregion\n  route.get(\n    '/last-page',\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { eventType, search, onOffLine } = req.query;\n      const EventServiceInstance = new EventService(EventModel, AdvertisementModel);\n      const lastPage = await EventServiceInstance.findEventLastPage(eventType, search, onOffLine);\n      return res.status(200).json({ lastPage });\n    })\n  );\n\n  // #region 공모전 캘린더뷰 조회\n  /**\n   * @swagger\n   * paths:\n   *   /events/calendar/{year}/{month}:\n   *    get:\n   *      tags:\n   *        - 공모전\n   *      summary: 공모전 캘린더뷰 조회\n   *      description: 공모전 캘린더뷰를 조회한다.\n   *      parameters:\n   *        - name: year\n   *          in: path\n   *          description: 년도\n   *          required: true\n   *          schema:\n   *            type: number\n   *          example: 2023\n   *        - name: month\n   *          in: path\n   *          description: 달\n   *          required: true\n   *          schema:\n   *            type: string\n   *          example: 09\n   *        - name: eventType\n   *          in: query\n   *          description: '공모전 구분(conference, hackathon, contest, bootcamp, others)'\n   *          required: false\n   *          schema:\n   *            type: string\n   *          example: '1'\n   *        - name: search\n   *          in: query\n   *          description: '검색'\n   *          required: false\n   *          schema:\n   *            type: string\n   *          example: '토이프로젝트'\n   *        - name: onOffLine\n   *          in: query\n   *          description: '진행방식(on:온라인, off:오프라인, onOff: 온/오프라인)'\n   *          required: false\n   *          schema:\n   *            type: string\n   *          example: 'on'\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: array\n   *                items:\n   *                  $ref: '#/components/schemas/Event'\n   */\n  // #endregion\n  route.get(\n    '/calendar/:year/:month',\n    getUserIdByAccessToken,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { year, month } = req.params;\n      const { eventType, search, onOffLine } = req.query;\n      const { _id: userId } = req.user as IUser;\n      const EventServiceInstance = new EventService(EventModel, AdvertisementModel);\n      const events = await EventServiceInstance.findEventListInCalendar(\n        year,\n        month,\n        eventType,\n        search,\n        userId,\n        onOffLine\n      );\n      return res.status(200).json(events);\n    })\n  );\n\n  // #region 진행중인 모든 공모전 조회(SelectBox 전용)\n  /**\n   * @swagger\n   * paths:\n   *   /events/bulk:\n   *    get:\n   *      tags:\n   *        - 공모전\n   *      summary: 진행중인 모든 공모전 조회(SelectBox 전용)\n   *      description: 진행중인 모든 공모전 조회한다.(80개)\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: array\n   *                items:\n   *                  $ref: '#/components/schemas/Event'\n   */\n  // #endregion\n  route.get(\n    '/bulk',\n    getUserIdByAccessToken,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const EventServiceInstance = new EventService(EventModel, AdvertisementModel);\n      const events = await EventServiceInstance.findEventTitleForSelectBox();\n      return res.status(200).json(events);\n    })\n  );\n\n  // #region 추천 공모전\n  /**\n   * @swagger\n   * paths:\n   *   /events/recommend:\n   *    get:\n   *      tags:\n   *        - 공모전\n   *      summary: 추천 공모전 조회(AD)\n   *      description: 추천 공모전을 조회한다.\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: array\n   *                items:\n   *                  $ref: '#/components/schemas/RecommendedEvent'\n   */\n  // #endregion\n  route.get(\n    '/recommend',\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const EventServiceInstance = new EventService(EventModel, AdvertisementModel);\n      const events = await EventServiceInstance.findRecommendEventList();\n      return res.status(200).json(events);\n    })\n  );\n\n  // #region 공모전 이미지 S3 Pre-Signed URL 발급\n  /**\n   * @swagger\n   * paths:\n   *   /events/pre-sign-url:\n   *    get:\n   *      tags:\n   *        - 공모전\n   *      summary: 공모전 이미지 S3 Pre-Signed URL 발급\n   *      description: 공모전 이미지 S3 Pre-Signed URL 발급\n   *      parameters:\n   *        - name: fileName\n   *          in: query\n   *          description: 파일명\n   *          required: true\n   *          example: '2839_284_42.jpg'\n   *          schema:\n   *            type: string\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: object\n   *                properties:\n   *                  preSignUrl:\n   *                    type: string\n   *                    description: Pre-signed url\n   */\n  // #endregion\n  route.get(\n    '/pre-sign-url',\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { fileName } = req.query;\n      const EventServiceInstance = new EventService(EventModel, AdvertisementModel);\n      const signedUrlPut = await EventServiceInstance.getPreSignUrl(fileName);\n\n      return res.status(200).json({\n        preSignUrl: signedUrlPut,\n      });\n    })\n  );\n\n  // #region 공모전 상세 보기\n  /**\n   * @swagger\n   * paths:\n   *   /events/{id}:\n   *    get:\n   *      tags:\n   *        - 공모전\n   *      summary: 공모전 상세 보기\n   *      description: '공모전 상세 정보를 조회한다.'\n   *      parameters:\n   *        - name: id\n   *          in: path\n   *          description: 공모전 Id\n   *          required: true\n   *          example: '635a91e837ad67001412321a'\n   *          schema:\n   *            type: string\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                $ref: '#/components/schemas/Event'\n   *        404:\n   *          description: Event not found\n   */\n  // #endregion\n  route.get(\n    '/:id',\n    getUserIdByAccessToken,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const eventId = req.params.id;\n      const { _id: userId } = req.user as IUser;\n      const EventServiceInstance = new EventService(EventModel, AdvertisementModel);\n      const event = await EventServiceInstance.findEvent(Types.ObjectId(eventId), userId);\n      return res.status(200).json(event);\n    })\n  );\n\n  // #region 공모전 상세에서 관련 공모전 추천\n  /**\n   * @swagger\n   * paths:\n   *   /events/{id}/recommend:\n   *    get:\n   *      tags:\n   *        - 공모전\n   *      summary: 공모전 상세에서 관련 공모전 추천\n   *      description: '현재 읽고 있는 공모전 유형과 같은 글을 추천한다.'\n   *      parameters:\n   *        - name: id\n   *          in: path\n   *          description: 공모전 Id\n   *          required: true\n   *          example: '635a91e837ad67001412321a'\n   *          schema:\n   *            type: string\n   *        - name: eventType\n   *          in: query\n   *          description: 공모전 구분(conference, hackathon, contest, bootcamp, others)\n   *          required: true\n   *          schema:\n   *            type: string\n   *          example: 'conference'\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                $ref: '#/components/schemas/Event'\n   *        404:\n   *          description: Event not found\n   */\n  // #endregion\n  route.get(\n    '/:id/recommend',\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const eventId = req.params.id;\n      const { eventType } = req.query;\n      const EventServiceInstance = new EventService(EventModel, AdvertisementModel);\n      const event = await EventServiceInstance.findRecommendEventListInDetail(Types.ObjectId(eventId), eventType);\n      return res.status(200).json(event);\n    })\n  );\n\n  // #region POST - 공모전 등록\n  /**\n   * @swagger\n   * paths:\n   *   /events:\n   *    post:\n   *      tags:\n   *        - 공모전\n   *      summary: 공모전 등록\n   *      description: '신규 공모전를 등록한다.'\n   *      parameters:\n   *        - name: accessToken\n   *          in: header\n   *          description: access token\n   *          required: false\n   *          schema:\n   *            type: string\n   *      requestBody:\n   *        content:\n   *          application/json:\n   *            schema:\n   *              $ref: '#/components/schemas/PostEvent'\n   *      responses:\n   *        201:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: array\n   *                items:\n   *                  $ref: '#/components/schemas/Event'\n   *        400:\n   *          description: Invaild event data\n   *        401:\n   *          $ref: '#/components/responses/UnauthorizedError'\n   */\n  // #endregion\n  route.post(\n    '/',\n    isAccessTokenValidWithAdmin,\n    checkEvent,\n    isEventValid,\n    asyncErrorWrapper(async function (req: Request, res: Response, next: NextFunction) {\n      try {\n        const eventDTO = req.body;\n        // TODO 공모전 등록 권한 관리\n        //const { _id: userId } = req.user as IUser;\n\n        const EventServiceInstance = new EventService(EventModel, AdvertisementModel);\n        const event = await EventServiceInstance.createEvent(eventDTO);\n        return res.status(201).json(event);\n      } catch (error) {\n        return res.status(400).json({\n          errors: [\n            {\n              location: 'body',\n              param: 'name',\n              error: 'TypeError',\n              message: 'Invalid request',\n            },\n          ],\n          error,\n        });\n      }\n    })\n  );\n\n  // #region 공모전 수정\n  /**\n   * @swagger\n   * paths:\n   *   /events/{id}:\n   *    put:\n   *      tags:\n   *        - 공모전\n   *      summary: 공모전 수정\n   *      description: 공모전를 수정한다.\n   *      parameters:\n   *        - name: accessToken\n   *          in: header\n   *          description: access token\n   *          required: false\n   *          schema:\n   *            type: string\n   *        - name: id\n   *          in: path\n   *          description: 공모전 Id\n   *          required: true\n   *          example: '635a91e837ad67001412321a'\n   *          schema:\n   *            type: string\n   *      requestBody:\n   *        content:\n   *          application/json:\n   *            schema:\n   *              $ref: '#/components/schemas/Event'\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: array\n   *                items:\n   *                  $ref: '#/components/schemas/Event'\n   *        400:\n   *          description: Invaild event data\n   *        401:\n   *          $ref: '#/components/responses/UnauthorizedError'\n   */\n  // #endregion\n  route.put(\n    '/:id',\n    isAccessTokenValidWithAdmin,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { id } = req.params;\n      //const { _id: tokenUserId, tokenType } = req.user as IUser;\n      // TODO event id validation check\n      const eventDTO = req.body;\n      const EventServiceInstance = new EventService(EventModel, AdvertisementModel);\n      const event = await EventServiceInstance.modifyEvent(Types.ObjectId(id), eventDTO);\n\n      return res.status(200).json(event);\n    })\n  );\n\n  // #region 공모전 삭제\n  /**\n   * @swagger\n   * paths:\n   *   /events/{id}:\n   *    delete:\n   *      tags:\n   *        - 공모전\n   *      summary: 공모전 삭제\n   *      description: 공모전를 삭제한다.\n   *      parameters:\n   *        - name: accessToken\n   *          in: header\n   *          description: access token\n   *          required: false\n   *          schema:\n   *            type: string\n   *        - name: id\n   *          in: path\n   *          description: 공모전 Id\n   *          required: true\n   *          example: '60213d1c3126991a7cd1d287'\n   *          schema:\n   *            type: string\n   *      responses:\n   *        204:\n   *          description: successful operation\n   *        401:\n   *          $ref: '#/components/responses/UnauthorizedError'\n   *        404:\n   *          description: Event not found\n   */\n  // #endregion\n  route.delete(\n    '/:id',\n    isAccessTokenValidWithAdmin,\n    checkADIsActive,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { id } = req.params;\n      //const { _id: tokenUserId, tokenType } = req.user as IUser;\n\n      const EventServiceInstance = new EventService(EventModel, AdvertisementModel);\n      await EventServiceInstance.deleteEvent(Types.ObjectId(id));\n      return res.status(204).json();\n    })\n  );\n\n  /**\n   * @swagger\n   * tags:\n        - name: likes\n          description: 공모전 관심 등록\n   */\n  // #region 좋아요 등록\n  /**\n   * @swagger\n   * paths:\n   *   /events/likes:\n   *    post:\n   *      tags:\n   *        - 공모전 관심등록\n   *      summary: 좋아요 등록\n   *      description: 좋아요 등록\n   *      parameters:\n   *        - name: accessToken\n   *          in: header\n   *          description: access token\n   *          required: true\n   *          schema:\n   *            type: string\n   *      requestBody:\n   *        content:\n   *          application/json:\n   *            schema:\n   *              type: object\n   *              properties:\n   *                eventId:\n   *                  type: string\n   *                  description : '글 ID'\n   *                  example: '61063af4ed4b420bbcfa0b4c'\n   *      responses:\n   *        201:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                type: object\n   *                properties:\n   *                  likeUsers:\n   *                    type: array\n   *                    description: 사용자 리스트\n   *                    items:\n   *                      type: string\n   *        400:\n   *          description: Invaild post data\n   *        401:\n   *          $ref: '#/components/responses/UnauthorizedError'\n   */\n  // #endregion\n  route.post(\n    '/likes',\n    isAccessTokenValid,\n    isEventIdValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { eventId } = req.body;\n      const { _id: userId } = req.user as IUser;\n      const EventServiceInstance = new EventService(EventModel, AdvertisementModel);\n      const event = await EventServiceInstance.addLike(Types.ObjectId(eventId), userId);\n\n      return res.status(201).json({ likeUsers: event.likes });\n    })\n  );\n\n  /**\n   * @swagger\n   * paths:\n   *   /events/likes/{id}:\n   *    delete:\n   *      tags:\n   *        - 공모전 관심등록\n   *      summary: 공모전 좋아요 삭제\n   *      description: 좋아요 삭제\n   *      parameters:\n   *        - name: accessToken\n   *          in: header\n   *          description: access token\n   *          required: true\n   *          schema:\n   *            type: string\n   *        - name: id\n   *          in: path\n   *          description: 글 Id\n   *          required: true\n   *          example: '60213d1c3126991a7cd1d287'\n   *          schema:\n   *            type: string\n   *      responses:\n   *        204:\n   *          description: successful operation\n   *        401:\n   *          $ref: '#/components/responses/UnauthorizedError'\n   *        404:\n   *          description: Event not found\n   */\n  route.delete(\n    '/likes/:id',\n    isAccessTokenValid,\n    isEventIdValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const eventId = req.params.id; // 사용자 id\n      const { _id: userId } = req.user as IUser;\n\n      const EventServiceInstance = new EventService(EventModel, AdvertisementModel);\n      const event = await EventServiceInstance.deleteLike(Types.ObjectId(eventId), userId);\n      return res.status(201).json({ likeUsers: event.likes });\n    })\n  );\n};\n"]}