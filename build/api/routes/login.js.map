{"version":3,"file":"login.js","sourceRoot":"/","sources":["api/routes/login.ts"],"names":[],"mappings":"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","sourcesContent":["import { Router, Request, Response, NextFunction } from 'express';\r\nimport { AuthService, UserService } from '../../services/index';\r\nimport { isUserIdValid, isTokenValidWithOauth, nickNameDuplicationCheck, autoSignUp } from '../middlewares/index';\r\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\r\nimport { Post as PostModel } from '../../models/Post';\r\nimport { IUser, User as UserModel } from '../../models/User';\r\nimport { Notification as NotificationModel } from '../../models/Notification';\r\n\r\nconst route = Router();\r\n\r\nexport default (app: Router) => {\r\n    /**\r\n   * @swagger\r\n   * tags:\r\n        - name: login\r\n          description: 로그인에 관련된 API\r\n   */\r\n  app.use('/login', route);\r\n/**\r\n * @swagger\r\n *  components:\r\n *  schemas:\r\n *    loginSuccess:\r\n *      properties:\r\n *        _id:\r\n *          type: string\r\n *          description: 사용자 ID\r\n *          example: '61063af4ed4b420bbcfa0b4c'\r\n *        nickName:\r\n *          type: string\r\n *          description: 닉네임\r\n *          example: 'hola!'\r\n *        image:\r\n *          type: string\r\n *          description: 사용자 이미지 명\r\n *          example: 'default.PNG'\r\n *        accessToken:\r\n *          type: string\r\n *          description: access token\r\n *        loginSuccess:\r\n *          type: boolean\r\n *          description: 로그인 성공 여부\r\n *          example: true\r\n *        likeLanguages:\r\n *          type: array\r\n *          description: 관심 등록 언어\r\n *          items:\r\n *            type: string\r\n *    SignUpRequired:\r\n *      properties:\r\n *        _id:\r\n *          type: string\r\n *          description: 사용자 ID\r\n *          example: '61063af4ed4b420bbcfa0b4c'\r\n *        loginSuccess:\r\n *          type: boolean\r\n *          description: 로그인 성공 여부(false일 경우 회원가입 필요)\r\n *          example: false\r\n *        message:\r\n *          type: string\r\n *          description: 메시지\r\n *          example: '회원 가입을 진행해야 합니다.'\r\n *    nickNameDuplicate:\r\n *      properties:\r\n *        isExists::\r\n *          type: boolean\r\n *          description: '닉네임 중복 여부(true: 중복)'\r\n *          example: true\r\n *        message:\r\n *          type: string\r\n *          description: 메시지\r\n *          example: 'Nickname is duplicated'\r\n */ \r\n  /**\r\n   * @swagger\r\n   * paths:\r\n   *   /login:\r\n   *    post:\r\n   *      tags:\r\n   *        - login\r\n   *      summary: 로그인(Oauth 2.0)\r\n   *      description: '소셜 로그인(google, gitgub, kakao)'\r\n   *      requestBody:\r\n   *        content:\r\n   *          application/json:\r\n   *            schema:\r\n   *              type: object\r\n   *              properties:\r\n   *                loginType:\r\n   *                  type: string\r\n   *                  description : '로그인 종류(google, gitgub, kakao)'\r\n   *                  example: 'github'\r\n   *                code:\r\n   *                  type: string\r\n   *                  description : '클라이언트에게 전달받은 idToken'\r\n   *                  example: '12412lnklsnadlkfja'\r\n   *      responses:\r\n   *        200:\r\n   *          description: successful operation\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                oneOf:\r\n   *                  - $ref: '#/components/schemas/loginSuccess'\r\n   *                  - $ref: '#/components/schemas/SignUpRequired'\r\n   *        400:\r\n   *          description: Oauth parameter is Invalid\r\n   */  \r\n  route.post(\r\n    '/',\r\n    isTokenValidWithOauth,  // 클라이언트에게 전달받은 idToken을 이용해 유효성 검증 후 사용자 정보를 가져온다.\r\n    autoSignUp,\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      // 로그인 시 각 소셜 로그인 Oauth 서버를 통해 올바른 토큰인지 확인한다.(idToken)\r\n      const { idToken } = req.user as IUser;\r\n      const AuthServiceInstance = new AuthService(UserModel);\r\n      const { _id, nickName, image, likeLanguages, accessToken, refreshToken } = await AuthServiceInstance.SignIn(\r\n        idToken,\r\n      );\r\n      res.cookie('R_AUTH', refreshToken, {\r\n        sameSite: 'none',\r\n        httpOnly: true,\r\n        secure: true,\r\n        maxAge: 1000 * 60 * 60 * 24 * 14, // 2 Week\r\n      });\r\n      return res.status(200).json({\r\n        loginSuccess: true,\r\n        _id,\r\n        nickName,\r\n        image,\r\n        likeLanguages,\r\n        accessToken,\r\n      });\r\n    }),\r\n  );\r\n\r\n  /**\r\n   * @swagger\r\n   * paths:\r\n   *   /login/signup:\r\n   *    post:\r\n   *      tags:\r\n   *        - login\r\n   *      summary: 회원 가입\r\n   *      description: '로그인 시 회원 정보가 Insert되므로 회원 가입 시 정보를 수정한다. 회원 가입 완료 시 Refresh Token과 Access Token이 발급된다.'\r\n   *      requestBody:\r\n   *        content:\r\n   *          application/json:\r\n   *            schema:\r\n   *              $ref: '#/components/schemas/User'\r\n   *      responses:\r\n   *        200:\r\n   *          description: successful operation\r\n   *          content:\r\n   *            application/json:\r\n   *              schema:\r\n   *                oneOf:\r\n   *                  - $ref: '#/components/schemas/loginSuccess'\r\n   *                  - $ref: '#/components/schemas/nickNameDuplicate'\r\n   *        400:\r\n   *          description: Oauth parameter is Invalid\r\n   *        404:\r\n   *          description: User not found\r\n   */  \r\n  route.post(\r\n    '/signup',\r\n    nickNameDuplicationCheck,\r\n    isUserIdValid,\r\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\r\n      const { id } = req.body;\r\n      const userDTO = req.body;\r\n      delete userDTO.id;\r\n\r\n      // 회원 정보 수정(등록)\r\n      const UserServiceInstance = new UserService(PostModel, UserModel, NotificationModel);\r\n      const { userRecord } = await UserServiceInstance.modifyUser(id, id, userDTO);\r\n      // AccessToken, RefreshToken 발급\r\n      const AuthServiceInstance = new AuthService(UserModel);\r\n      const { accessToken, refreshToken } = await AuthServiceInstance.SignIn(userRecord.idToken);\r\n\r\n      res.cookie('R_AUTH', refreshToken, {\r\n        sameSite: 'none',\r\n        httpOnly: true,\r\n        secure: true,\r\n        maxAge: 1000 * 60 * 60 * 24 * 14, // 2 Week\r\n      });\r\n\r\n      return res.status(200).json({\r\n        loginSuccess: true,\r\n        _id: userRecord._id,\r\n        nickName: userRecord.nickName,\r\n        image: userRecord.image,\r\n        accessToken,\r\n      });\r\n    }),\r\n  );\r\n};\r\n"]}