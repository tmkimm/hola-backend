{"version":3,"file":"login.js","sourceRoot":"/","sources":["api/routes/login.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mCAAkE;AAClE,6DAA4D;AAC5D,0DAA8E;AAC9E,0CAAsD;AACtD,0CAA6D;AAC7D,8CAAgE;AAChE,8CAAkH;AAElH,IAAM,KAAK,GAAG,IAAA,gBAAM,GAAE,CAAC;AAEvB,mBAAe,UAAC,GAAW;IACzB;;;;;OAKG;IACH,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IACzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAsDG;IACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAkCG;IACH,KAAK,CAAC,IAAI,CACR,GAAG,EACH,6BAAqB,EAAE,mDAAmD;IAC1E,kBAAU,EACV,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBAE9D,OAAO,GAAK,GAAG,CAAC,IAAa,QAAtB,CAAuB;oBAChC,mBAAmB,GAAG,IAAI,mBAAW,CAAC,WAAS,CAAC,CAAC;oBAErD,qBAAM,mBAAmB,CAAC,MAAM,CAAC,OAAO,CAAC,EAAA;;oBADrC,KACJ,SAAyC,EADnC,GAAG,SAAA,EAAE,QAAQ,cAAA,EAAE,KAAK,WAAA,EAAE,aAAa,mBAAA,EAAE,WAAW,iBAAA,EAAE,YAAY,kBAAA;oBAEtE,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,YAAY,EAAE;wBACjC,QAAQ,EAAE,MAAM;wBAChB,QAAQ,EAAE,IAAI;wBACd,MAAM,EAAE,IAAI;wBACZ,MAAM,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,SAAS;qBAC5C,CAAC,CAAC;oBACH,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;4BAC1B,YAAY,EAAE,IAAI;4BAClB,GAAG,KAAA;4BACH,QAAQ,UAAA;4BACR,KAAK,OAAA;4BACL,aAAa,eAAA;4BACb,WAAW,aAAA;yBACZ,CAAC,EAAC;;;SACJ,CAAC,CACH,CAAC;IAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;OA2BG;IACH,KAAK,CAAC,IAAI,CACR,SAAS,EACT,gCAAwB,EACxB,qBAAa,EACb,IAAA,qCAAiB,EAAC,UAAO,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;oBAC9D,EAAE,GAAK,GAAG,CAAC,IAAI,GAAb,CAAc;oBAClB,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC;oBACzB,OAAO,OAAO,CAAC,EAAE,CAAC;oBAGZ,mBAAmB,GAAG,IAAI,mBAAW,CAAC,WAAS,EAAE,WAAS,EAAE,2BAAiB,CAAC,CAAC;oBAC9D,qBAAM,mBAAmB,CAAC,UAAU,CAAC,EAAE,EAAE,EAAE,EAAE,OAAO,CAAC,EAAA;;oBAApE,UAAU,GAAK,CAAA,SAAqD,CAAA,WAA1D;oBAOZ,mBAAmB,GAAG,IAAI,mBAAW,CAAC,WAAS,CAAC,CAAC;oBACjB,qBAAM,mBAAmB,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,EAAA;;oBAApF,KAAgC,SAAoD,EAAlF,WAAW,iBAAA,EAAE,YAAY,kBAAA;oBAEjC,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,YAAY,EAAE;wBACjC,QAAQ,EAAE,MAAM;wBAChB,QAAQ,EAAE,IAAI;wBACd,MAAM,EAAE,IAAI;wBACZ,MAAM,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,SAAS;qBAC5C,CAAC,CAAC;oBAEH,sBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;4BAC1B,YAAY,EAAE,IAAI;4BAClB,GAAG,EAAE,UAAU,CAAC,GAAG;4BACnB,QAAQ,EAAE,UAAU,CAAC,QAAQ;4BAC7B,KAAK,EAAE,UAAU,CAAC,KAAK;4BACvB,WAAW,aAAA;yBACZ,CAAC,EAAC;;;SACJ,CAAC,CACH,CAAC;AACJ,CAAC,EAAC","sourcesContent":["import { NextFunction, Request, Response, Router } from 'express';\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\nimport { Notification as NotificationModel } from '../../models/Notification';\nimport { Post as PostModel } from '../../models/Post';\nimport { IUser, User as UserModel } from '../../models/User';\nimport { AuthService, UserService } from '../../services/index';\nimport { autoSignUp, isTokenValidWithOauth, isUserIdValid, nickNameDuplicationCheck } from '../middlewares/index';\n\nconst route = Router();\n\nexport default (app: Router) => {\n  /**\n   * @swagger\n   * tags:\n        - name: login\n          description: 로그인에 관련된 API\n   */\n  app.use('/login', route);\n  /**\n   * @swagger\n   *  components:\n   *  schemas:\n   *    loginSuccess:\n   *      properties:\n   *        _id:\n   *          type: string\n   *          description: 사용자 ID\n   *          example: '61063af4ed4b420bbcfa0b4c'\n   *        nickName:\n   *          type: string\n   *          description: 닉네임\n   *          example: 'hola!'\n   *        image:\n   *          type: string\n   *          description: 사용자 이미지 명\n   *          example: 'default.PNG'\n   *        accessToken:\n   *          type: string\n   *          description: access token\n   *        loginSuccess:\n   *          type: boolean\n   *          description: 로그인 성공 여부\n   *          example: true\n   *        likeLanguages:\n   *          type: array\n   *          description: 관심 등록 언어\n   *          items:\n   *            type: string\n   *    SignUpRequired:\n   *      properties:\n   *        _id:\n   *          type: string\n   *          description: 사용자 ID\n   *          example: '61063af4ed4b420bbcfa0b4c'\n   *        loginSuccess:\n   *          type: boolean\n   *          description: 로그인 성공 여부(false일 경우 회원가입 필요)\n   *          example: false\n   *        message:\n   *          type: string\n   *          description: 메시지\n   *          example: '회원 가입을 진행해야 합니다.'\n   *    nickNameDuplicate:\n   *      properties:\n   *        isExists::\n   *          type: boolean\n   *          description: '닉네임 중복 여부(true: 중복)'\n   *          example: true\n   *        message:\n   *          type: string\n   *          description: 메시지\n   *          example: 'Nickname is duplicated'\n   */\n  /**\n   * @swagger\n   * paths:\n   *   /login:\n   *    post:\n   *      tags:\n   *        - login\n   *      summary: 로그인(Oauth 2.0)\n   *      description: '소셜 로그인(google, gitgub, kakao)'\n   *      requestBody:\n   *        content:\n   *          application/json:\n   *            schema:\n   *              type: object\n   *              properties:\n   *                loginType:\n   *                  type: string\n   *                  description : '로그인 종류(google, gitgub, kakao)'\n   *                  example: 'github'\n   *                code:\n   *                  type: string\n   *                  description : '클라이언트에게 전달받은 idToken'\n   *                  example: '12412lnklsnadlkfja'\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                oneOf:\n   *                  - $ref: '#/components/schemas/loginSuccess'\n   *                  - $ref: '#/components/schemas/SignUpRequired'\n   *        400:\n   *          description: Oauth parameter is Invalid\n   */\n  route.post(\n    '/',\n    isTokenValidWithOauth, // 클라이언트에게 전달받은 idToken을 이용해 유효성 검증 후 사용자 정보를 가져온다.\n    autoSignUp,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      // 로그인 시 각 소셜 로그인 Oauth 서버를 통해 올바른 토큰인지 확인한다.(idToken)\n      const { idToken } = req.user as IUser;\n      const AuthServiceInstance = new AuthService(UserModel);\n      const { _id, nickName, image, likeLanguages, accessToken, refreshToken } =\n        await AuthServiceInstance.SignIn(idToken);\n      res.cookie('R_AUTH', refreshToken, {\n        sameSite: 'none',\n        httpOnly: true,\n        secure: true,\n        maxAge: 1000 * 60 * 60 * 24 * 14, // 2 Week\n      });\n      return res.status(200).json({\n        loginSuccess: true,\n        _id,\n        nickName,\n        image,\n        likeLanguages,\n        accessToken,\n      });\n    })\n  );\n\n  /**\n   * @swagger\n   * paths:\n   *   /login/signup:\n   *    post:\n   *      tags:\n   *        - login\n   *      summary: 회원 가입\n   *      description: '로그인 시 회원 정보가 Insert되므로 회원 가입 시 정보를 수정한다. 회원 가입 완료 시 Refresh Token과 Access Token이 발급된다.'\n   *      requestBody:\n   *        content:\n   *          application/json:\n   *            schema:\n   *              $ref: '#/components/schemas/User'\n   *      responses:\n   *        200:\n   *          description: successful operation\n   *          content:\n   *            application/json:\n   *              schema:\n   *                oneOf:\n   *                  - $ref: '#/components/schemas/loginSuccess'\n   *                  - $ref: '#/components/schemas/nickNameDuplicate'\n   *        400:\n   *          description: Oauth parameter is Invalid\n   *        404:\n   *          description: User not found\n   */\n  route.post(\n    '/signup',\n    nickNameDuplicationCheck,\n    isUserIdValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { id } = req.body;\n      const userDTO = req.body;\n      delete userDTO.id;\n\n      // 회원 정보 수정(등록)\n      const UserServiceInstance = new UserService(PostModel, UserModel, NotificationModel);\n      const { userRecord } = await UserServiceInstance.modifyUser(id, id, userDTO);\n\n      // 회원 가입 알림 발송\n      // const noticeServiceInstance = new NotificationService(NotificationModel);\n      // await noticeServiceInstance.createSignUpNotice(id, userRecord.nickName);\n\n      // AccessToken, RefreshToken 발급\n      const AuthServiceInstance = new AuthService(UserModel);\n      const { accessToken, refreshToken } = await AuthServiceInstance.SignIn(userRecord.idToken);\n\n      res.cookie('R_AUTH', refreshToken, {\n        sameSite: 'none',\n        httpOnly: true,\n        secure: true,\n        maxAge: 1000 * 60 * 60 * 24 * 14, // 2 Week\n      });\n\n      return res.status(200).json({\n        loginSuccess: true,\n        _id: userRecord._id,\n        nickName: userRecord.nickName,\n        image: userRecord.image,\n        accessToken,\n      });\n    })\n  );\n};\n"]}