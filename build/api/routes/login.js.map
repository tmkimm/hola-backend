{"version":3,"file":"login.js","sourceRoot":"/","sources":["api/routes/login.ts"],"names":[],"mappings":"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","sourcesContent":["import { Router, Request, Response, NextFunction } from 'express';\nimport { AuthService, UserService } from '../../services/index';\nimport { isUserIdValid, isTokenValidWithOauth, nickNameDuplicationCheck, autoSignUp } from '../middlewares/index';\nimport { asyncErrorWrapper } from '../../asyncErrorWrapper';\nimport { Post as PostModel } from '../../models/Post';\nimport { IUser, User as UserModel } from '../../models/User';\nimport { Notification as NotificationModel } from '../../models/Notification';\n\nconst route = Router();\n\nexport default (app: Router) => {\n  /*\n    로그인에 관련된 Router를 정의한다.\n    로그인 시 각 소셜 로그인 Oauth 서버를 통해 올바른 토큰인지 확인한다.(idToken)\n    # POST /login/signup : 로그인 후 회원 가입\n    # POST /login/google : Oauth 구글 로그인\n    # POST /login/github : Oauth 깃 로그인\n    # POST /login/kakao : Oauth 카카오 로그인\n    */\n  app.use('/login', route);\n\n  // Oauth2.0 로그인\n  // isTokenValidWithGoogle : 클라이언트에게 전달받은 idToken을 이용해 유효성 검증 후 사용자 정보를 가져온다.\n  route.post(\n    '/',\n    isTokenValidWithOauth,\n    autoSignUp,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { idToken } = req.user as IUser;\n      const AuthServiceInstance = new AuthService(UserModel);\n      const { _id, nickName, image, likeLanguages, accessToken, refreshToken } = await AuthServiceInstance.SignIn(\n        idToken,\n      );\n      res.cookie('R_AUTH', refreshToken, {\n        sameSite: 'none',\n        httpOnly: true,\n        secure: true,\n        maxAge: 1000 * 60 * 60 * 24 * 14, // 2 Week\n      });\n      return res.status(200).json({\n        loginSuccess: true,\n        _id,\n        nickName,\n        image,\n        likeLanguages,\n        accessToken,\n      });\n    }),\n  );\n\n  // 회원 가입\n  // - 로그인 시 회원 정보가 Insert되므로 회원 가입 시 정보를 수정한다.\n  // - 회원 가입 완료 시 Refresh Token과 Access Token이 발급된다.\n  route.post(\n    '/signup',\n    nickNameDuplicationCheck,\n    isUserIdValid,\n    asyncErrorWrapper(async (req: Request, res: Response, next: NextFunction) => {\n      const { id } = req.body;\n      const userDTO = req.body;\n      delete userDTO.id;\n\n      // 회원 정보 수정(등록)\n      const UserServiceInstance = new UserService(PostModel, UserModel, NotificationModel);\n      const { userRecord } = await UserServiceInstance.modifyUser(id, id, userDTO);\n      // AccessToken, RefreshToken 발급\n      const AuthServiceInstance = new AuthService(UserModel);\n      const { accessToken, refreshToken } = await AuthServiceInstance.SignIn(userRecord.idToken);\n\n      res.cookie('R_AUTH', refreshToken, {\n        sameSite: 'none',\n        httpOnly: true,\n        secure: true,\n        maxAge: 1000 * 60 * 60 * 24 * 14, // 2 Week\n      });\n\n      return res.status(200).json({\n        loginSuccess: true,\n        _id: userRecord._id,\n        nickName: userRecord.nickName,\n        image: userRecord.image,\n        accessToken,\n      });\n    }),\n  );\n};\n"]}