{"version":3,"file":"user.js","sourceRoot":"/","sources":["services/user.ts"],"names":[],"mappings":"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","sourcesContent":["import { Types } from 'mongoose';\nimport AWS from 'aws-sdk';\nimport { IUserDocument, IUserModel } from '../models/User';\nimport { INotificationModel } from '../models/Notification';\nimport { IPostModel } from '../models/Post';\nimport config from '../config/index';\nimport CustomError from '../CustomError';\n\nexport class UserService {\n  constructor(\n    protected postModel: IPostModel,\n    protected userModel: IUserModel,\n    protected notificationModel: INotificationModel,\n  ) {}\n\n  // 닉네임을 이용하여 사용자 정보를 조회한다.\n  async findByNickName(nickName: string) {\n    const users = await this.userModel.findByNickName(nickName);\n    return users;\n  }\n\n  // id를 이용하여 사용자 정보를 조회한다.\n  async findById(id: Types.ObjectId) {\n    const users = await this.userModel.findById(id);\n    return users;\n  }\n\n  // 사용자 정보를 수정한다.\n  // 닉네임을 기준으로 Token을 생성하기 때문에 Token을 재발급한다.\n  async modifyUser(id: Types.ObjectId, tokenUserId: Types.ObjectId, user: IUserDocument) {\n    if (id.toString() !== tokenUserId.toString())\n      throw new CustomError('NotAuthenticatedError', 401, 'User does not match');\n    const userRecord = await this.userModel.modifyUser(id, user);\n    const [accessToken, refreshToken] = await Promise.all([\n      userRecord.generateAccessToken(),\n      userRecord.generateRefreshToken(),\n    ]);\n    return { userRecord, accessToken, refreshToken };\n  }\n\n  async deleteUser(id: Types.ObjectId, tokenUserId: Types.ObjectId) {\n    if (id.toString() !== tokenUserId.toString())\n      throw new CustomError('NotAuthenticatedError', 401, 'User does not match');\n    await this.userModel.findOneAndDelete({ _id: id });\n  }\n\n  // 사용자가 관심 등록한 글 리스트를 조회한다.\n  async findUserLikes(id: Types.ObjectId) {\n    const userLikes = await this.userModel\n      .findById(id)\n      .populate({\n        path: 'likePosts',\n        match: { isDeleted: false },\n        options: { sort: { createdAt: -1 } },\n      })\n      .select('likePosts');\n    return userLikes;\n  }\n\n  // 사용자의 읽은 목록을 조회한다.\n  async findReadList(id: Types.ObjectId) {\n    const readList = await this.userModel\n      .findById(id)\n      .populate({\n        path: 'readList',\n        match: { isDeleted: false },\n        options: { sort: { createdAt: -1 } },\n      })\n      .select('readList');\n    return readList;\n  }\n\n  // 사용자의 작성 목록을 조회한다.\n  async findMyPosts(id: Types.ObjectId) {\n    const myPosts = await this.postModel\n      .find({ author: id, isDeleted: false })\n      .populate('author', 'nickName image')\n      .sort('-createdAt');\n    return myPosts;\n  }\n\n  // S3 Pre-Sign Url을 발급한다.\n  // eslint-disable-next-line class-methods-use-this\n  async getPreSignUrl(fileName: string) {\n    const s3 = new AWS.S3({\n      accessKeyId: config.S3AccessKeyId,\n      secretAccessKey: config.S3SecretAccessKey,\n      region: config.S3BucketRegion,\n    });\n\n    const params = {\n      Bucket: config.S3BucketName,\n      Key: fileName,\n      Expires: 60 * 60 * 3,\n    };\n\n    const signedUrlPut = await s3.getSignedUrlPromise('putObject', params);\n    return signedUrlPut;\n  }\n\n  // 사용자의 읽은 목록을 추가한다.\n  async addReadLists(postId: Types.ObjectId, userId: Types.ObjectId) {\n    const user = await this.userModel.addReadList(postId, userId);\n    return user;\n  }\n}\n"]}