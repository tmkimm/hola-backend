{"version":3,"file":"user.js","sourceRoot":"/","sources":["services/user.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,oDAA0B;AAE1B,iDAAgD;AAChD,iDAAgD;AAGhD,0DAAqC;AACrC,+DAAyC;AACzC,qDAAoD;AAEpD;IACE,qBACY,SAAqB,EACrB,SAAqB,EACrB,iBAAqC;QAFrC,cAAS,GAAT,SAAS,CAAY;QACrB,cAAS,GAAT,SAAS,CAAY;QACrB,sBAAiB,GAAjB,iBAAiB,CAAoB;IAC9C,CAAC;IAEJ,0BAA0B;IACpB,oCAAc,GAApB,UAAqB,QAAgB;;;;;4BACrB,qBAAM,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAA;;wBAArD,KAAK,GAAG,SAA6C;wBAC3D,sBAAO,KAAK,EAAC;;;;KACd;IAED,yBAAyB;IACnB,8BAAQ,GAAd,UAAe,EAAkB;;;;;4BACjB,qBAAM,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAA;;wBAAzC,KAAK,GAAG,SAAiC;wBAC/C,sBAAO,KAAK,EAAC;;;;KACd;IAED,gBAAgB;IAChB,0CAA0C;IACpC,gCAAU,GAAhB,UAAiB,EAAkB,EAAE,WAA2B,EAAE,IAAmB;;;;;;wBACnF,IAAI,EAAE,CAAC,QAAQ,EAAE,KAAK,WAAW,CAAC,QAAQ,EAAE;4BAC1C,MAAM,IAAI,qBAAW,CAAC,uBAAuB,EAAE,GAAG,EAAE,qBAAqB,CAAC,CAAC;wBAC1D,qBAAM,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,EAAE,IAAI,CAAC,EAAA;;wBAAtD,UAAU,GAAG,SAAyC;wBACxB,qBAAM,OAAO,CAAC,GAAG,CAAC;gCACpD,UAAU,CAAC,mBAAmB,EAAE;gCAChC,UAAU,CAAC,oBAAoB,EAAE;6BAClC,CAAC,EAAA;;wBAHI,KAA8B,SAGlC,EAHK,WAAW,QAAA,EAAE,YAAY,QAAA;wBAIhC,sBAAO,EAAE,UAAU,YAAA,EAAE,WAAW,aAAA,EAAE,YAAY,cAAA,EAAE,EAAC;;;;KAClD;IAED,QAAQ;IACF,gCAAU,GAAhB,UAAiB,EAAkB,EAAE,WAA2B;;;;;;wBAC9D,IAAI,EAAE,CAAC,QAAQ,EAAE,KAAK,WAAW,CAAC,QAAQ,EAAE;4BAC1C,MAAM,IAAI,qBAAW,CAAC,uBAAuB,EAAE,GAAG,EAAE,qBAAqB,CAAC,CAAC;wBAC1C,qBAAM,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAA;;wBAA9D,IAAI,GAAyB,SAAiC;6BAEhE,IAAI,EAAJ,wBAAI;wBACN,cAAc;wBACd,qBAAM,yBAAW,CAAC,MAAM,CAAC;gCACvB,OAAO,EAAE,IAAI,CAAC,OAAO;gCACrB,SAAS,EAAE,IAAI,CAAC,SAAS;gCACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ;gCACvB,UAAU,EAAE,IAAI,CAAC,SAAS;gCAC1B,WAAW,EAAE,IAAI,IAAI,EAAE;gCACvB,MAAM,EAAE,IAAI,CAAC,GAAG;6BACjB,CAAC,EAAA;;wBARF,cAAc;wBACd,SAOE,CAAC;wBACH,qBAAM,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAA;;wBAAlD,SAAkD,CAAC;;;;;;KAEtD;IAED,2BAA2B;IACrB,mCAAa,GAAnB,UAAoB,EAAkB;;;;;4BAClB,qBAAM,qBAAS,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC;4BAC9D,IAAI,EAAE,QAAQ;4BACd,MAAM,EAAE,+JAA+J;4BACvK,KAAK,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE;4BAC3B,QAAQ,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,gBAAgB,EAAE;4BACtD,OAAO,EAAE,EAAE,IAAI,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE;yBACrC,CAAC,EAAA;;wBANI,SAAS,GAAG,SAMhB;wBACI,MAAM,GAAG,SAAS,CAAC,GAAG,CAAC,UAAC,CAAC;4BAC7B,OAAO,CAAC,CAAC,MAAM,CAAC;wBAClB,CAAC,CAAC,CAAC;wBACH,sBAAO,MAAM,EAAC;;;;KACf;IAED,oBAAoB;IACd,kCAAY,GAAlB,UAAmB,EAAkB;;;;;4BAClB,qBAAM,qBAAS,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC;4BAC7D,IAAI,EAAE,QAAQ;4BACd,MAAM,EAAE,+JAA+J;4BACvK,KAAK,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE;4BAC3B,QAAQ,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,gBAAgB,EAAE;4BACtD,OAAO,EAAE,EAAE,IAAI,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE;yBACrC,CAAC,EAAA;;wBANI,QAAQ,GAAG,SAMf;wBAEI,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,UAAC,CAAC;4BAC5B,OAAO,CAAC,CAAC,MAAM,CAAC;wBAClB,CAAC,CAAC,CAAC;wBACH,sBAAO,MAAM,EAAC;;;;KACf;IAED,oBAAoB;IACd,iCAAW,GAAjB,UAAkB,EAAkB;;;;;4BAClB,qBAAM,IAAI,CAAC,SAAS;6BACjC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;6BACtC,QAAQ,CAAC,QAAQ,EAAE,gBAAgB,CAAC;6BACpC,IAAI,CAAC,YAAY,CAAC,EAAA;;wBAHf,OAAO,GAAG,SAGK;wBACrB,sBAAO,OAAO,EAAC;;;;KAChB;IAED,yBAAyB;IACzB,kDAAkD;IAC5C,mCAAa,GAAnB,UAAoB,QAAgB;;;;;;wBAC5B,EAAE,GAAG,IAAI,iBAAG,CAAC,EAAE,CAAC;4BACpB,WAAW,EAAE,eAAM,CAAC,aAAa;4BACjC,eAAe,EAAE,eAAM,CAAC,iBAAiB;4BACzC,MAAM,EAAE,eAAM,CAAC,cAAc;yBAC9B,CAAC,CAAC;wBAEG,MAAM,GAAG;4BACb,MAAM,EAAE,eAAM,CAAC,YAAY;4BAC3B,GAAG,EAAE,QAAQ;4BACb,OAAO,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC;yBACrB,CAAC;wBAEmB,qBAAM,EAAE,CAAC,mBAAmB,CAAC,WAAW,EAAE,MAAM,CAAC,EAAA;;wBAAhE,YAAY,GAAG,SAAiD;wBACtE,sBAAO,YAAY,EAAC;;;;KACrB;IAED,oBAAoB;IACd,kCAAY,GAAlB,UAAmB,MAAsB,EAAE,MAAsB;;;;;4BAClD,qBAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC,EAAA;;wBAAvD,IAAI,GAAG,SAAgD;wBAC7D,sBAAO,IAAI,EAAC;;;;KACb;IACH,kBAAC;AAAD,CAAC,AApHD,IAoHC;AApHY,kCAAW","sourcesContent":["import { Types } from 'mongoose';\r\nimport AWS from 'aws-sdk';\r\nimport { IUserDocument, IUserModel } from '../models/User';\r\nimport { ReadPosts } from '../models/ReadPosts';\r\nimport { LikePosts } from '../models/LikePosts';\r\nimport { INotificationModel } from '../models/Notification';\r\nimport { IPostModel } from '../models/Post';\r\nimport config from '../config/index';\r\nimport CustomError from '../CustomError';\r\nimport { SignOutUser } from '../models/SignOutUser';\r\n\r\nexport class UserService {\r\n  constructor(\r\n    protected postModel: IPostModel,\r\n    protected userModel: IUserModel,\r\n    protected notificationModel: INotificationModel,\r\n  ) {}\r\n\r\n  // 닉네임을 이용하여 사용자 정보를 조회한다.\r\n  async findByNickName(nickName: string) {\r\n    const users = await this.userModel.findByNickName(nickName);\r\n    return users;\r\n  }\r\n\r\n  // id를 이용하여 사용자 정보를 조회한다.\r\n  async findById(id: Types.ObjectId) {\r\n    const users = await this.userModel.findById(id);\r\n    return users;\r\n  }\r\n\r\n  // 사용자 정보를 수정한다.\r\n  // 닉네임을 기준으로 Token을 생성하기 때문에 Token을 재발급한다.\r\n  async modifyUser(id: Types.ObjectId, tokenUserId: Types.ObjectId, user: IUserDocument) {\r\n    if (id.toString() !== tokenUserId.toString())\r\n      throw new CustomError('NotAuthenticatedError', 401, 'User does not match');\r\n    const userRecord = await this.userModel.modifyUser(id, user);\r\n    const [accessToken, refreshToken] = await Promise.all([\r\n      userRecord.generateAccessToken(),\r\n      userRecord.generateRefreshToken(),\r\n    ]);\r\n    return { userRecord, accessToken, refreshToken };\r\n  }\r\n\r\n  // 회원 탈퇴\r\n  async deleteUser(id: Types.ObjectId, tokenUserId: Types.ObjectId) {\r\n    if (id.toString() !== tokenUserId.toString())\r\n      throw new CustomError('NotAuthenticatedError', 401, 'User does not match');\r\n    const user: IUserDocument | null = await this.userModel.findById(id);\r\n\r\n    if (user) {\r\n      // 탈퇴 유저 이력 생성\r\n      await SignOutUser.create({\r\n        idToken: user.idToken,\r\n        tokenType: user.tokenType,\r\n        nickName: user.nickName,\r\n        signInDate: user.createdAt,\r\n        signOutDate: new Date(),\r\n        userId: user._id,\r\n      });\r\n      await this.userModel.findOneAndDelete({ _id: id });\r\n    }\r\n  }\r\n\r\n  // 사용자가 관심 등록한 글 리스트를 조회한다.\r\n  async findUserLikes(id: Types.ObjectId) {\r\n    const likePosts = await LikePosts.find({ userId: id }).populate({\r\n      path: 'postId',\r\n      select: `title views comments likes language isClosed totalLikes startDate endDate type onlineOrOffline contactType recruits expectedPeriod author positions createdAt`,\r\n      match: { isDeleted: false },\r\n      populate: { path: 'author', select: `nickName image` },\r\n      options: { sort: { createdAt: -1 } },\r\n    });\r\n    const result = likePosts.map((i) => {\r\n      return i.postId;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  // 사용자의 읽은 목록을 조회한다.\r\n  async findReadList(id: Types.ObjectId) {\r\n    const readList = await ReadPosts.find({ userId: id }).populate({\r\n      path: 'postId',\r\n      select: `title views comments likes language isClosed totalLikes startDate endDate type onlineOrOffline contactType recruits expectedPeriod author positions createdAt`,\r\n      match: { isDeleted: false },\r\n      populate: { path: 'author', select: `nickName image` },\r\n      options: { sort: { createdAt: -1 } },\r\n    });\r\n\r\n    const result = readList.map((i) => {\r\n      return i.postId;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  // 사용자의 작성 목록을 조회한다.\r\n  async findMyPosts(id: Types.ObjectId) {\r\n    const myPosts = await this.postModel\r\n      .find({ author: id, isDeleted: false })\r\n      .populate('author', 'nickName image')\r\n      .sort('-createdAt');\r\n    return myPosts;\r\n  }\r\n\r\n  // S3 Pre-Sign Url을 발급한다.\r\n  // eslint-disable-next-line class-methods-use-this\r\n  async getPreSignUrl(fileName: string) {\r\n    const s3 = new AWS.S3({\r\n      accessKeyId: config.S3AccessKeyId,\r\n      secretAccessKey: config.S3SecretAccessKey,\r\n      region: config.S3BucketRegion,\r\n    });\r\n\r\n    const params = {\r\n      Bucket: config.S3BucketName,\r\n      Key: fileName,\r\n      Expires: 60 * 60 * 3,\r\n    };\r\n\r\n    const signedUrlPut = await s3.getSignedUrlPromise('putObject', params);\r\n    return signedUrlPut;\r\n  }\r\n\r\n  // 사용자의 읽은 목록을 추가한다.\r\n  async addReadLists(postId: Types.ObjectId, userId: Types.ObjectId) {\r\n    const user = await this.userModel.addReadList(postId, userId);\r\n    return user;\r\n  }\r\n}\r\n"]}