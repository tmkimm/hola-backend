{"version":3,"file":"user.js","sourceRoot":"/","sources":["services/user.ts"],"names":[],"mappings":"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","sourcesContent":["import { Types } from 'mongoose';\nimport AWS from 'aws-sdk';\nimport { IUserDocument, User as UserModel } from '../models/User';\nimport { ReadPosts as ReadPostsModel } from '../models/ReadPosts';\nimport { LikePosts as LikePostsModel } from '../models/LikePosts';\nimport { INotificationModel } from '../models/Notification';\nimport { Post as PostModel } from '../models/Post';\nimport config from '../config/index';\nimport CustomError from '../CustomError';\nimport { SignOutUser as SignOutUserModel } from '../models/SignOutUser';\n\n// 닉네임을 이용하여 사용자 정보를 조회한다.\nconst findByNickName = async (nickName: string) => {\n  const users = await UserModel.findByNickName(nickName);\n  return users;\n};\n\n// id를 이용하여 사용자 정보를 조회한다.\nconst findById = async (id: Types.ObjectId) => {\n  const users = await UserModel.findById(id);\n  return users;\n};\n\n// 사용자 정보를 수정한다.\n// 닉네임을 기준으로 Token을 생성하기 때문에 Token을 재발급한다.\nconst modifyUser = async (id: Types.ObjectId, tokenUserId: Types.ObjectId, user: IUserDocument) => {\n  if (id.toString() !== tokenUserId.toString())\n    throw new CustomError('NotAuthenticatedError', 401, 'User does not match');\n  const userRecord = await UserModel.modifyUser(id, user);\n  const [accessToken, refreshToken] = await Promise.all([\n    userRecord.generateAccessToken(),\n    userRecord.generateRefreshToken(),\n  ]);\n  return { userRecord, accessToken, refreshToken };\n};\n\n// 회원 탈퇴\nconst deleteUser = async (id: Types.ObjectId, tokenUserId: Types.ObjectId) => {\n  if (id.toString() !== tokenUserId.toString())\n    throw new CustomError('NotAuthenticatedError', 401, 'User does not match');\n  const user: IUserDocument | null = await UserModel.findById(id);\n\n  if (user) {\n    // 탈퇴 유저 이력 생성\n    await SignOutUserModel.create({\n      idToken: user.idToken,\n      tokenType: user.tokenType,\n      nickName: user.nickName,\n      signInDate: user.createdAt,\n      signOutDate: new Date(),\n      userId: user._id,\n    });\n    await UserModel.findOneAndDelete({ _id: id });\n  }\n};\n\n// 사용자가 관심 등록한 글 리스트를 조회한다.\nconst findUserLikes = async (id: Types.ObjectId) => {\n  const likePosts = await LikePostsModel.find({ userId: id })\n    .populate({\n      path: 'postId',\n      select: `title views comments likes language isClosed totalLikes startDate endDate type onlineOrOffline contactType recruits expectedPeriod author positions createdAt`,\n      match: { isDeleted: false },\n      populate: { path: 'author', select: `nickName image` },\n    })\n    .sort('-createdAt');\n\n  const result = likePosts.map((i) => {\n    return i.postId;\n  });\n  return result;\n};\n\n// 사용자의 읽은 목록을 조회한다.\nconst findReadList = async (id: Types.ObjectId) => {\n  const readList = await ReadPostsModel.find({ userId: id })\n    .populate({\n      path: 'postId',\n      select: `title views comments likes language isClosed totalLikes startDate endDate type onlineOrOffline contactType recruits expectedPeriod author positions createdAt`,\n      match: { isDeleted: false },\n      populate: { path: 'author', select: `nickName image` },\n    })\n    .sort('-createdAt');\n\n  const result = readList.map((i) => {\n    return i.postId;\n  });\n  return result;\n};\n// 사용자의 작성 목록을 조회한다.\nconst findMyPosts = async (id: Types.ObjectId) => {\n  const myPosts = await PostModel.find({ author: id, isDeleted: false })\n    .populate('author', 'nickName image')\n    .sort('-createdAt');\n  return myPosts;\n};\n\n// S3 Pre-Sign Url을 발급한다.\n// eslint-disable-next-line class-methods-use-this\nconst getPreSignUrl = async (fileName: string) => {\n  const s3 = new AWS.S3({\n    accessKeyId: config.S3AccessKeyId,\n    secretAccessKey: config.S3SecretAccessKey,\n    region: config.S3BucketRegion,\n  });\n\n  const params = {\n    Bucket: config.S3BucketName,\n    Key: fileName,\n    Expires: 60 * 60 * 3,\n  };\n\n  const signedUrlPut = await s3.getSignedUrlPromise('putObject', params);\n  return signedUrlPut;\n};\n\n// 사용자의 읽은 목록을 추가한다.\nconst addReadLists = async (postId: Types.ObjectId, userId: Types.ObjectId) => {\n  const user = await UserModel.addReadList(postId, userId);\n  return user;\n};\n\nexport {\n  findByNickName,\n  findById,\n  modifyUser,\n  deleteUser,\n  findUserLikes,\n  findReadList,\n  findMyPosts,\n  getPreSignUrl,\n  addReadLists,\n};\n"]}