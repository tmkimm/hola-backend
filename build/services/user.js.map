{"version":3,"file":"user.js","sourceRoot":"/","sources":["services/user.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oDAA0B;AAE1B,+DAAyC;AACzC,0DAAqC;AACrC,iDAAgD;AAGhD,iDAAgD;AAChD,qDAAoD;AAEpD,mDAAkD;AAClD,+CAA8C;AAE9C;IACE,qBACY,SAAqB,EACrB,SAAqB,EACrB,iBAAqC;QAFrC,cAAS,GAAT,SAAS,CAAY;QACrB,cAAS,GAAT,SAAS,CAAY;QACrB,sBAAiB,GAAjB,iBAAiB,CAAoB;IAC9C,CAAC;IAEJ,0BAA0B;IACpB,oCAAc,GAApB,UAAqB,QAAgB;;;;;4BACrB,qBAAM,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAA;;wBAArD,KAAK,GAAG,SAA6C;wBAC3D,sBAAO,KAAK,EAAC;;;;KACd;IAED,yBAAyB;IACnB,8BAAQ,GAAd,UAAe,EAAkB;;;;;4BACjB,qBAAM,IAAI,CAAC,SAAS;6BAC/B,QAAQ,CAAC,EAAE,CAAC;6BACZ,MAAM,CACL,6GAA6G,CAC9G,EAAA;;wBAJG,KAAK,GAAG,SAIX;wBACH,sBAAO,KAAK,EAAC;;;;KACd;IAED,gBAAgB;IAChB,0CAA0C;IACpC,gCAAU,GAAhB,UAAiB,EAAkB,EAAE,WAA2B,EAAE,IAAmB;;;;;;wBACnF,IAAI,EAAE,CAAC,QAAQ,EAAE,KAAK,WAAW,CAAC,QAAQ,EAAE;4BAC1C,MAAM,IAAI,qBAAW,CAAC,uBAAuB,EAAE,GAAG,EAAE,qBAAqB,CAAC,CAAC;wBAC1D,qBAAM,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,EAAE,IAAI,CAAC,EAAA;;wBAAtD,UAAU,GAAG,SAAyC;wBACxB,qBAAM,OAAO,CAAC,GAAG,CAAC;gCACpD,UAAU,CAAC,mBAAmB,EAAE;gCAChC,UAAU,CAAC,oBAAoB,EAAE;6BAClC,CAAC,EAAA;;wBAHI,KAA8B,SAGlC,EAHK,WAAW,QAAA,EAAE,YAAY,QAAA;wBAIhC,sBAAO,EAAE,UAAU,YAAA,EAAE,WAAW,aAAA,EAAE,YAAY,cAAA,EAAE,EAAC;;;;KAClD;IAED,QAAQ;IACF,gCAAU,GAAhB,UAAiB,EAAkB,EAAE,WAA2B;;;;;;wBAC9D,IAAI,EAAE,CAAC,QAAQ,EAAE,KAAK,WAAW,CAAC,QAAQ,EAAE;4BAC1C,MAAM,IAAI,qBAAW,CAAC,uBAAuB,EAAE,GAAG,EAAE,qBAAqB,CAAC,CAAC;wBAC1C,qBAAM,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAA;;wBAA9D,IAAI,GAAyB,SAAiC;6BAEhE,IAAI,EAAJ,wBAAI;wBACN,cAAc;wBACd,qBAAM,yBAAW,CAAC,MAAM,CAAC;gCACvB,OAAO,EAAE,IAAI,CAAC,OAAO;gCACrB,SAAS,EAAE,IAAI,CAAC,SAAS;gCACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ;gCACvB,UAAU,EAAE,IAAI,CAAC,SAAS;gCAC1B,WAAW,EAAE,IAAI,IAAI,EAAE;gCACvB,MAAM,EAAE,IAAI,CAAC,GAAG;6BACjB,CAAC,EAAA;;wBARF,cAAc;wBACd,SAOE,CAAC;wBACH,qBAAM,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAA;;wBAAlD,SAAkD,CAAC;;;;;;KAEtD;IAED,2BAA2B;IACrB,mCAAa,GAAnB,UAAoB,EAAkB;;;;;4BAClB,qBAAM,qBAAS,CAAC,SAAS,CAAC;4BAC1C,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE;4BAC1B;gCACE,OAAO,EAAE;oCACP,IAAI,EAAE,OAAO;oCACb,UAAU,EAAE,QAAQ;oCACpB,YAAY,EAAE,KAAK;oCACnB,QAAQ,EAAE;wCACR;4CACE,QAAQ,EAAE;gDACR,KAAK,EAAE,CAAC;gDACR,KAAK,EAAE,CAAC;gDACR,QAAQ,EAAE,CAAC;gDACX,KAAK,EAAE,CAAC;gDACR,QAAQ,EAAE,CAAC;gDACX,QAAQ,EAAE,CAAC;gDACX,UAAU,EAAE,CAAC;gDACb,SAAS,EAAE,CAAC;gDACZ,OAAO,EAAE,CAAC;gDACV,IAAI,EAAE,CAAC;gDACP,eAAe,EAAE,CAAC;gDAClB,WAAW,EAAE,CAAC;gDACd,QAAQ,EAAE,CAAC;gDACX,cAAc,EAAE,CAAC;gDACjB,MAAM,EAAE,CAAC;gDACT,SAAS,EAAE,CAAC;gDACZ,SAAS,EAAE,CAAC;6CACb;yCACF;qCACF;oCACD,EAAE,EAAE,QAAQ;iCACb;6BACF;4BACD;gCACE,OAAO,EAAE,SAAS;6BACnB;4BACD;gCACE,OAAO,EAAE;oCACP,IAAI,EAAE,OAAO;oCACb,UAAU,EAAE,eAAe;oCAC3B,YAAY,EAAE,KAAK;oCACnB,QAAQ,EAAE,CAAC,EAAE,QAAQ,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;oCAC3D,EAAE,EAAE,eAAe;iCACpB;6BACF;yBACF,CAAC,CAAC,IAAI,CAAC;4BACN,kBAAkB,EAAE,CAAC,CAAC;yBACvB,CAAC,EAAA;;wBA/CI,SAAS,GAAG,SA+ChB;wBAEI,MAAM,GAAG,SAAS;6BACrB,MAAM,CAAC,UAAC,CAAC;4BACR,OAAO,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC;wBACvC,CAAC,CAAC;6BACD,GAAG,CAAC,UAAC,CAAC;4BACL,OAAO,CAAC,CAAC,MAAM,CAAC;wBAClB,CAAC,CAAC,CAAC;wBACL,sBAAO,MAAM,EAAC;;;;KACf;IAED,oBAAoB;IACd,kCAAY,GAAlB,UAAmB,EAAkB;;;;;4BAClB,qBAAM,qBAAS,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;6BAClD,QAAQ,CAAC;4BACR,IAAI,EAAE,QAAQ;4BACd,MAAM,EAAE,+JAA+J;4BACvK,KAAK,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE;4BAC3B,QAAQ,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,gBAAgB,EAAE;yBACvD,CAAC;6BACD,IAAI,CAAC,YAAY,CAAC,EAAA;;wBAPf,QAAQ,GAAG,SAOI;wBAEf,MAAM,GAAG,QAAQ;6BACpB,MAAM,CAAC,UAAC,CAAC;4BACR,OAAO,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC;wBACvC,CAAC,CAAC;6BACD,GAAG,CAAC,UAAC,CAAC;4BACL,OAAO,CAAC,CAAC,MAAM,CAAC;wBAClB,CAAC,CAAC,CAAC;wBACL,sBAAO,MAAM,EAAC;;;;KACf;IAED,oBAAoB;IACd,iCAAW,GAAjB,UAAkB,EAAkB;;;;;4BAClB,qBAAM,IAAI,CAAC,SAAS;6BACjC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;6BACtC,QAAQ,CAAC,QAAQ,EAAE,gBAAgB,CAAC;6BACpC,IAAI,CAAC,YAAY,CAAC,EAAA;;wBAHf,OAAO,GAAG,SAGK;wBACrB,sBAAO,OAAO,EAAC;;;;KAChB;IAED,yBAAyB;IACzB,kDAAkD;IAC5C,mCAAa,GAAnB,UAAoB,QAAgB;;;;;;wBAC5B,EAAE,GAAG,IAAI,iBAAG,CAAC,EAAE,CAAC;4BACpB,WAAW,EAAE,eAAM,CAAC,aAAa;4BACjC,eAAe,EAAE,eAAM,CAAC,iBAAiB;4BACzC,MAAM,EAAE,eAAM,CAAC,cAAc;yBAC9B,CAAC,CAAC;wBAEG,MAAM,GAAG;4BACb,MAAM,EAAE,eAAM,CAAC,YAAY;4BAC3B,GAAG,EAAE,QAAQ;4BACb,OAAO,EAAE,EAAE,GAAG,EAAE,EAAE,UAAU;yBAC7B,CAAC;wBAEmB,qBAAM,EAAE,CAAC,mBAAmB,CAAC,WAAW,EAAE,MAAM,CAAC,EAAA;;wBAAhE,YAAY,GAAG,SAAiD;wBACtE,sBAAO,YAAY,EAAC;;;;KACrB;IAED,oBAAoB;IACd,kCAAY,GAAlB,UAAmB,MAAsB,EAAE,MAAsB;;;;;4BAClD,qBAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC,EAAA;;wBAAvD,IAAI,GAAG,SAAgD;wBAC7D,sBAAO,IAAI,EAAC;;;;KACb;IAED,2BAA2B;IACrB,wCAAkB,GAAxB,UAAyB,EAAkB;;;;;4BACtB,qBAAM,uBAAU,CAAC,SAAS,CAAC;4BAC5C,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE;4BAC1B;gCACE,OAAO,EAAE;oCACP,IAAI,EAAE,QAAQ;oCACd,UAAU,EAAE,SAAS;oCACrB,YAAY,EAAE,KAAK;oCACnB,QAAQ,EAAE;wCACR;4CACE,QAAQ,EAAE;gDACR,KAAK,EAAE,CAAC;gDACR,KAAK,EAAE,CAAC;gDACR,KAAK,EAAE,CAAC;gDACR,OAAO,EAAE,CAAC;gDACV,YAAY,EAAE,CAAC;gDACf,eAAe,EAAE,CAAC;gDAClB,QAAQ,EAAE,CAAC;gDACX,aAAa,EAAE,CAAC;gDAChB,SAAS,EAAE,CAAC;gDACZ,QAAQ,EAAE,CAAC;gDACX,SAAS,EAAE,CAAC;gDACZ,OAAO,EAAE,CAAC;gDACV,oBAAoB,EAAE,CAAC;gDACvB,kBAAkB,EAAE,CAAC;gDACrB,MAAM,EAAE,CAAC;gDACT,KAAK,EAAE,CAAC;gDACR,KAAK,EAAE,CAAC;gDACR,SAAS,EAAE,CAAC;6CACb;yCACF;qCACF;oCACD,EAAE,EAAE,SAAS;iCACd;6BACF;4BACD;gCACE,OAAO,EAAE,UAAU;6BACpB;4BACD;gCACE,OAAO,EAAE;oCACP,IAAI,EAAE,OAAO;oCACb,UAAU,EAAE,gBAAgB;oCAC5B,YAAY,EAAE,KAAK;oCACnB,QAAQ,EAAE,CAAC,EAAE,QAAQ,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;oCAC3D,EAAE,EAAE,gBAAgB;iCACrB;6BACF;yBACF,CAAC,CAAC,IAAI,CAAC;4BACN,mBAAmB,EAAE,CAAC,CAAC;yBACxB,CAAC,EAAA;;wBAhDI,UAAU,GAAG,SAgDjB;wBACI,MAAM,GAAG,UAAU;6BACtB,MAAM,CAAC,UAAC,CAAC;4BACR,OAAO,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC;wBACzC,CAAC,CAAC;6BACD,GAAG,CAAC,UAAC,CAAC;4BACL,OAAO,CAAC,CAAC,OAAO,CAAC;wBACnB,CAAC,CAAC,CAAC;wBACL,sBAAO,MAAM,EAAC;;;;KACf;IAED,2BAA2B;IACrB,iDAA2B,GAAjC,UAAkC,EAAkB,EAAE,IAAmB,EAAE,KAAoB;;;;;;wBAC7F,IAAI,CAAC,IAAA,mBAAQ,EAAC,IAAI,CAAC,IAAI,CAAC,IAAA,mBAAQ,EAAC,KAAK,CAAC;4BACrC,MAAM,IAAI,qBAAW,CAAC,sBAAsB,EAAE,GAAG,EAAE,0BAA0B,CAAC,CAAC;wBAC3E,QAAQ,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;wBACxD,OAAO,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;wBACnC,qBAAM,uBAAU,CAAC,SAAS,CAAC;gCAC5C,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE;gCAC1B;oCACE,OAAO,EAAE;wCACP,IAAI,EAAE,QAAQ;wCACd,UAAU,EAAE,SAAS;wCACrB,YAAY,EAAE,KAAK;wCACnB,QAAQ,EAAE;4CACR;gDACE,QAAQ,EAAE;oDACR,KAAK,EAAE,CAAC;oDACR,KAAK,EAAE,CAAC;oDACR,KAAK,EAAE,CAAC;oDACR,OAAO,EAAE,CAAC;oDACV,YAAY,EAAE,CAAC;oDACf,eAAe,EAAE,CAAC;oDAClB,QAAQ,EAAE,CAAC;oDACX,aAAa,EAAE,CAAC;oDAChB,SAAS,EAAE,CAAC;oDACZ,QAAQ,EAAE,CAAC;oDACX,SAAS,EAAE,CAAC;oDACZ,OAAO,EAAE,CAAC;oDACV,oBAAoB,EAAE,CAAC;oDACvB,kBAAkB,EAAE,CAAC;oDACrB,MAAM,EAAE,CAAC;oDACT,KAAK,EAAE,CAAC;oDACR,KAAK,EAAE,CAAC;oDACR,SAAS,EAAE,CAAC;iDACb;6CACF;yCACF;wCACD,EAAE,EAAE,SAAS;qCACd;iCACF;gCACD;oCACE,OAAO,EAAE,UAAU;iCACpB;gCACD,EAAE,MAAM,EAAE,EAAE,mBAAmB,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE;gCACtE;oCACE,OAAO,EAAE;wCACP,IAAI,EAAE,OAAO;wCACb,UAAU,EAAE,gBAAgB;wCAC5B,YAAY,EAAE,KAAK;wCACnB,QAAQ,EAAE,CAAC,EAAE,QAAQ,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;wCAC3D,EAAE,EAAE,gBAAgB;qCACrB;iCACF;6BACF,CAAC,CAAC,IAAI,CAAC;gCACN,mBAAmB,EAAE,CAAC,CAAC;6BACxB,CAAC,EAAA;;wBAjDI,UAAU,GAAG,SAiDjB;wBACI,MAAM,GAAG,UAAU;6BACtB,MAAM,CAAC,UAAC,CAAC;4BACR,OAAO,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC;wBACzC,CAAC,CAAC;6BACD,GAAG,CAAC,UAAC,CAAC;4BACL,OAAO,CAAC,CAAC,OAAO,CAAC;wBACnB,CAAC,CAAC,CAAC;wBACL,sBAAO,MAAM,EAAC;;;;KACf;IACH,kBAAC;AAAD,CAAC,AA1SD,IA0SC;AA1SY,kCAAW","sourcesContent":["import AWS from 'aws-sdk';\nimport { Types } from 'mongoose';\nimport CustomError from '../CustomError';\nimport config from '../config/index';\nimport { LikePosts } from '../models/LikePosts';\nimport { INotificationModel } from '../models/Notification';\nimport { IPostModel } from '../models/Post';\nimport { ReadPosts } from '../models/ReadPosts';\nimport { SignOutUser } from '../models/SignOutUser';\nimport { IUserDocument, IUserModel } from '../models/User';\nimport { LikeEvents } from '../models/LikeEvents';\nimport { isNumber } from '../utills/isNumber';\n\nexport class UserService {\n  constructor(\n    protected postModel: IPostModel,\n    protected userModel: IUserModel,\n    protected notificationModel: INotificationModel\n  ) {}\n\n  // 닉네임을 이용하여 사용자 정보를 조회한다.\n  async findByNickName(nickName: string) {\n    const users = await this.userModel.findByNickName(nickName);\n    return users;\n  }\n\n  // id를 이용하여 사용자 정보를 조회한다.\n  async findById(id: Types.ObjectId) {\n    const users = await this.userModel\n      .findById(id)\n      .select(\n        '_id nickName image workExperience position organizationName organizationIsOpen urls introduce likeLanguages'\n      );\n    return users;\n  }\n\n  // 사용자 정보를 수정한다.\n  // 닉네임을 기준으로 Token을 생성하기 때문에 Token을 재발급한다.\n  async modifyUser(id: Types.ObjectId, tokenUserId: Types.ObjectId, user: IUserDocument) {\n    if (id.toString() !== tokenUserId.toString())\n      throw new CustomError('NotAuthenticatedError', 401, 'User does not match');\n    const userRecord = await this.userModel.modifyUser(id, user);\n    const [accessToken, refreshToken] = await Promise.all([\n      userRecord.generateAccessToken(),\n      userRecord.generateRefreshToken(),\n    ]);\n    return { userRecord, accessToken, refreshToken };\n  }\n\n  // 회원 탈퇴\n  async deleteUser(id: Types.ObjectId, tokenUserId: Types.ObjectId) {\n    if (id.toString() !== tokenUserId.toString())\n      throw new CustomError('NotAuthenticatedError', 401, 'User does not match');\n    const user: IUserDocument | null = await this.userModel.findById(id);\n\n    if (user) {\n      // 탈퇴 유저 이력 생성\n      await SignOutUser.create({\n        idToken: user.idToken,\n        tokenType: user.tokenType,\n        nickName: user.nickName,\n        signInDate: user.createdAt,\n        signOutDate: new Date(),\n        userId: user._id,\n      });\n      await this.userModel.findOneAndDelete({ _id: id });\n    }\n  }\n\n  // 사용자가 관심 등록한 글 리스트를 조회한다.\n  async findUserLikes(id: Types.ObjectId) {\n    const likePosts = await LikePosts.aggregate([\n      { $match: { userId: id } },\n      {\n        $lookup: {\n          from: 'posts',\n          localField: 'postId',\n          foreignField: '_id',\n          pipeline: [\n            {\n              $project: {\n                title: 1,\n                views: 1,\n                comments: 1,\n                likes: 1,\n                language: 1,\n                isClosed: 1,\n                totalLikes: 1,\n                startDate: 1,\n                endDate: 1,\n                type: 1,\n                onlineOrOffline: 1,\n                contactType: 1,\n                recruits: 1,\n                expectedPeriod: 1,\n                author: 1,\n                positions: 1,\n                createdAt: 1,\n              },\n            },\n          ],\n          as: 'postId',\n        },\n      },\n      {\n        $unwind: '$postId',\n      },\n      {\n        $lookup: {\n          from: 'users',\n          localField: 'postId.author',\n          foreignField: '_id',\n          pipeline: [{ $project: { _id: 1, nickName: 1, image: 1 } }],\n          as: 'postId.author',\n        },\n      },\n    ]).sort({\n      'postId.createdAt': -1,\n    });\n\n    const result = likePosts\n      .filter((i) => {\n        return i.postId && i.postId !== null;\n      })\n      .map((i) => {\n        return i.postId;\n      });\n    return result;\n  }\n\n  // 사용자의 읽은 목록을 조회한다.\n  async findReadList(id: Types.ObjectId) {\n    const readList = await ReadPosts.find({ userId: id })\n      .populate({\n        path: 'postId',\n        select: `title views comments likes language isClosed totalLikes startDate endDate type onlineOrOffline contactType recruits expectedPeriod author positions createdAt`,\n        match: { isDeleted: false },\n        populate: { path: 'author', select: `nickName image` },\n      })\n      .sort('-createdAt');\n\n    const result = readList\n      .filter((i) => {\n        return i.postId && i.postId !== null;\n      })\n      .map((i) => {\n        return i.postId;\n      });\n    return result;\n  }\n\n  // 사용자의 작성 목록을 조회한다.\n  async findMyPosts(id: Types.ObjectId) {\n    const myPosts = await this.postModel\n      .find({ author: id, isDeleted: false })\n      .populate('author', 'nickName image')\n      .sort('-createdAt');\n    return myPosts;\n  }\n\n  // S3 Pre-Sign Url을 발급한다.\n  // eslint-disable-next-line class-methods-use-this\n  async getPreSignUrl(fileName: string) {\n    const s3 = new AWS.S3({\n      accessKeyId: config.S3AccessKeyId,\n      secretAccessKey: config.S3SecretAccessKey,\n      region: config.S3BucketRegion,\n    });\n\n    const params = {\n      Bucket: config.S3BucketName,\n      Key: fileName,\n      Expires: 60 * 10, // seconds\n    };\n\n    const signedUrlPut = await s3.getSignedUrlPromise('putObject', params);\n    return signedUrlPut;\n  }\n\n  // 사용자의 읽은 목록을 추가한다.\n  async addReadLists(postId: Types.ObjectId, userId: Types.ObjectId) {\n    const user = await this.userModel.addReadList(postId, userId);\n    return user;\n  }\n\n  // 사용자가 관심 등록한 글 리스트를 조회한다.\n  async findUserLikeEvents(id: Types.ObjectId) {\n    const likeEvents = await LikeEvents.aggregate([\n      { $match: { userId: id } },\n      {\n        $lookup: {\n          from: 'events',\n          localField: 'eventId',\n          foreignField: '_id',\n          pipeline: [\n            {\n              $project: {\n                title: 1,\n                views: 1,\n                likes: 1,\n                content: 1,\n                organization: 1,\n                onlineOrOffline: 1,\n                imageUrl: 1,\n                smallImageUrl: 1,\n                isDeleted: 1,\n                isClosed: 1,\n                startDate: 1,\n                endDate: 1,\n                applicationStartDate: 1,\n                applicationEndDate: 1,\n                author: 1,\n                price: 1,\n                place: 1,\n                eventType: 1,\n              },\n            },\n          ],\n          as: 'eventId',\n        },\n      },\n      {\n        $unwind: '$eventId',\n      },\n      {\n        $lookup: {\n          from: 'users',\n          localField: 'eventId.author',\n          foreignField: '_id',\n          pipeline: [{ $project: { _id: 1, nickName: 1, image: 1 } }],\n          as: 'eventId.author',\n        },\n      },\n    ]).sort({\n      'eventId.createdAt': -1,\n    });\n    const result = likeEvents\n      .filter((i) => {\n        return i.eventId && i.eventId !== null;\n      })\n      .map((i) => {\n        return i.eventId;\n      });\n    return result;\n  }\n\n  // 사용자가 관심 등록한 글 리스트를 조회한다.\n  async findUserLikeEventByCalendar(id: Types.ObjectId, year: string | null, month: string | null) {\n    if (!isNumber(year) || !isNumber(month))\n      throw new CustomError('IllegalArgumentError', 400, 'Date format is incorrect');\n    const firstDay = new Date(Number(year), Number(month) - 1, 1);\n    const lastDay = new Date(Number(year), Number(month));\n    const likeEvents = await LikeEvents.aggregate([\n      { $match: { userId: id } },\n      {\n        $lookup: {\n          from: 'events',\n          localField: 'eventId',\n          foreignField: '_id',\n          pipeline: [\n            {\n              $project: {\n                title: 1,\n                views: 1,\n                likes: 1,\n                content: 1,\n                organization: 1,\n                onlineOrOffline: 1,\n                imageUrl: 1,\n                smallImageUrl: 1,\n                isDeleted: 1,\n                isClosed: 1,\n                startDate: 1,\n                endDate: 1,\n                applicationStartDate: 1,\n                applicationEndDate: 1,\n                author: 1,\n                price: 1,\n                place: 1,\n                eventType: 1,\n              },\n            },\n          ],\n          as: 'eventId',\n        },\n      },\n      {\n        $unwind: '$eventId',\n      },\n      { $match: { 'eventId.startDate': { $gte: firstDay, $lte: lastDay } } },\n      {\n        $lookup: {\n          from: 'users',\n          localField: 'eventId.author',\n          foreignField: '_id',\n          pipeline: [{ $project: { _id: 1, nickName: 1, image: 1 } }],\n          as: 'eventId.author',\n        },\n      },\n    ]).sort({\n      'eventId.createdAt': -1,\n    });\n    const result = likeEvents\n      .filter((i) => {\n        return i.eventId && i.eventId !== null;\n      })\n      .map((i) => {\n        return i.eventId;\n      });\n    return result;\n  }\n}\n"]}