{"version":3,"file":"post.js","sourceRoot":"/","sources":["services/post.ts"],"names":[],"mappings":"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","sourcesContent":["import sanitizeHtml from 'sanitize-html';\nimport { Types } from 'mongoose';\nimport { IPost, IPostModel, IPostDocument } from '../models/Post';\nimport { INotificationModel } from '../models/Notification';\nimport { PostFilterLog } from '../models/PostFilterLog';\nimport { ReadPosts } from '../models/ReadPosts';\nimport { LikePosts } from '../models/LikePosts';\n\nimport { IUserModel } from '../models/User';\nimport CustomError from '../CustomError';\n\nexport class PostService {\n  constructor(\n    protected postModel: IPostModel,\n    protected userModel: IUserModel,\n    protected notificationModel: INotificationModel,\n  ) {}\n\n  // 리팩토링필요\n  // 메인 화면에서 글 리스트를 조회한다.\n  async findPost(\n    offset: number | null,\n    limit: number | null,\n    sort: string | null,\n    language: string | null,\n    period: number | null,\n    isClosed: string | null,\n    type: string | null,\n    position: string | null,\n    search: string | null,\n  ) {\n    const posts = await this.postModel.findPost(\n      offset,\n      limit,\n      sort,\n      language,\n      period,\n      isClosed,\n      type,\n      position,\n      search,\n    );\n    // 언어 필터링 로그 생성\n    // if (language) {\n    //   await PostFilterLog.create({\n    //     viewDate: new Date(),\n    //     language: language.split(','),\n    //   });\n    // }\n    return posts;\n  }\n\n  // 메인 화면에서 글 리스트를 조회한다.\n  async findPostPagination(\n    page: string | null,\n    previousPage: string | null,\n    lastId: Types.ObjectId | string,\n    sort: string | null,\n    language: string | null,\n    period: number | null,\n    isClosed: string | null,\n    type: string | null,\n    position: string | null,\n    search: string | null,\n    userId: Types.ObjectId | null,\n  ) {\n    const result: any = await this.postModel.findPostPagination(\n      page,\n      previousPage,\n      lastId,\n      sort,\n      language,\n      period,\n      isClosed,\n      type,\n      position,\n      search,\n    );\n    // 관심 등록 여부 추가\n    const { posts } = result;\n    let addIsLiked;\n\n    // 로그인하지 않은 사용자\n    if (userId == null) {\n      addIsLiked = posts.map((post: any) => {\n        post.isLiked = false;\n        return post;\n      });\n    } else {\n      // 로그인한 사용자\n      addIsLiked = posts.map((post: any) => {\n        let isLiked = false;\n        if (post.likes && post.likes.length > 0) {\n          // ObjectId 특성 상 IndexOf를 사용할 수 없어 loop로 비교(리팩토링 필요)\n          for (const likeUserId of post.likes) {\n            if (likeUserId.toString() == userId.toString()) {\n              isLiked = true;\n              break;\n            }\n          }\n        }\n        post.isLiked = isLiked;\n        return post;\n      });\n    }\n    result.posts = addIsLiked;\n\n    // 언어 필터링 로그 생성\n    // if (language) {\n    //   await PostFilterLog.create({\n    //     viewDate: new Date(),\n    //     language: language.split(','),\n    //   });\n    // }\n    return result;\n  }\n\n  // Pagination을 위해 마지막 페이지를 구한다.\n  async findLastPage(\n    language: string | null,\n    period: number | null,\n    isClosed: string | null,\n    type: string | null,\n    position: string | null,\n    search: string | null,\n  ) {\n    const itemsPerPage = 4 * 6; // 한 페이지에 표현할 수\n    const totalCount = await this.postModel.countPost(language, period, isClosed, type, position, search);\n    const lastPage = Math.ceil(totalCount / itemsPerPage);\n    return lastPage;\n  }\n\n  // 인기글 조회\n  async findPopularPosts(postId: Types.ObjectId, userId: Types.ObjectId) {\n    const posts = await this.postModel.findPopularPosts(postId, userId);\n    return posts;\n  }\n\n  // 메인 화면에서 글를 추천한다.(현재 미사용, 제거예정)\n  async recommendToUserFromMain(userId: Types.ObjectId) {\n    let sort;\n    let likeLanguages = null;\n    const limit = 20;\n    if (userId) {\n      const user = await this.userModel.findById(userId);\n      if (user !== null && user.likeLanguages) likeLanguages = user.likeLanguages;\n      sort = 'views';\n    } else {\n      sort = 'totalLikes';\n    }\n\n    const posts = await this.postModel.findPostRecommend('-views', likeLanguages, null, null, limit);\n    return posts;\n  }\n\n  // 글에서 글를 추천한다.\n  async recommendToUserFromPost(postId: Types.ObjectId, userId: Types.ObjectId) {\n    const sort = '-views';\n    let language = null;\n    const limit = 10;\n    if (postId) {\n      const post = await this.postModel.findById(postId);\n      if (post === null) throw new CustomError('JsonWebTokenError', 404, 'Post not found');\n\n      language = post.language;\n    }\n\n    const posts = await this.postModel.findPostRecommend(sort, language, postId, userId, limit);\n    return posts;\n  }\n\n  // 조회수 증가\n  async increaseView(postId: Types.ObjectId, userId: Types.ObjectId, readList: string) {\n    let isAlreadyRead = true;\n    let updateReadList = readList;\n    // 조회수 중복 증가 방지\n    if (readList === undefined || (typeof readList === 'string' && readList.indexOf(postId.toString()) === -1)) {\n      if (userId)\n        await Promise.all([\n          await ReadPosts.create({\n            userId,\n            postId,\n          }),\n          this.postModel.increaseView(postId),\n        ]);\n      else await this.postModel.increaseView(postId); // 조회수 증가\n\n      if (readList === undefined) updateReadList = `${postId}`;\n      else updateReadList = `${readList}|${postId}`;\n      isAlreadyRead = false;\n    }\n    return { updateReadList, isAlreadyRead };\n  }\n\n  // 상세 글 정보를 조회한다.\n  // 로그인된 사용자일 경우 읽은 목록을 추가한다.\n  async findPostDetail(postId: Types.ObjectId) {\n    const posts = await this.postModel.findById(postId).populate('author', 'nickName image');\n    if (!posts) throw new CustomError('NotFoundError', 404, 'Post not found');\n    return posts;\n  }\n\n  // 사용자의 관심 등록 여부를 조회한다.\n  async findUserLiked(postId: Types.ObjectId, userId: Types.ObjectId) {\n    if (userId && postId) {\n      const posts = await this.postModel.find({ _id: postId, likes: userId });\n      const isLiked = posts.length > 0;\n      return isLiked;\n    }\n    return false;\n  }\n\n  // 글의 관심 등록한 사용자 리스트를 조회한다.\n  async findLikeUsers(postId: Types.ObjectId) {\n    const likeUsers = await this.postModel.findById(postId).select('likes');\n    if (!likeUsers) return [];\n    return likeUsers.likes;\n  }\n\n  // 신규 글를 등록한다.\n  async registerPost(userID: Types.ObjectId, post: IPostDocument) {\n    post.author = userID;\n    if (post.content) {\n      const cleanHTML = sanitizeHtml(post.content, {\n        allowedTags: sanitizeHtml.defaults.allowedTags.concat(['img']),\n      });\n      post.content = cleanHTML;\n    }\n    const postRecord = await this.postModel.create(post);\n    return postRecord;\n  }\n\n  // 글 정보를 수정한다.\n  async modifyPost(id: Types.ObjectId, tokenUserId: Types.ObjectId, tokenType: string, post: IPost) {\n    await this.postModel.checkPostAuthorization(id, tokenUserId, tokenType); // 접근 권한 체크\n    if (post.content) {\n      const cleanHTML = sanitizeHtml(post.content, {\n        allowedTags: sanitizeHtml.defaults.allowedTags.concat(['img']),\n      });\n      post.content = cleanHTML;\n    }\n    const postRecord = await this.postModel.modifyPost(id, post);\n    return postRecord;\n  }\n\n  // 글를 삭제한다.\n  async deletePost(id: Types.ObjectId, tokenUserId: Types.ObjectId, tokenType: string) {\n    await this.postModel.checkPostAuthorization(id, tokenUserId, tokenType); // 접근 권한 체크\n    await this.postModel.deletePost(id);\n    await this.notificationModel.deleteNotificationByPost(id); // 글 삭제 시 관련 알림 제거\n  }\n\n  // 관심 등록 추가\n  async addLike(postId: Types.ObjectId, userId: Types.ObjectId) {\n    const { post, isLikeExist } = await this.postModel.addLike(postId, userId);\n    if (!isLikeExist) {\n      await LikePosts.add(postId, userId);\n      // await this.notificationModel.registerNotification(postId, post.author, userId, 'like');   // 알림 등록\n    }\n    return post;\n  }\n\n  // 관심 등록 취소(삭제)\n  async deleteLike(postId: Types.ObjectId, userId: Types.ObjectId) {\n    const { post, isLikeExist } = await this.postModel.deleteLike(postId, userId);\n    if (isLikeExist) {\n      await LikePosts.delete(postId, userId);\n      // await this.notificationModel.deleteNotification(postId, post.author, userId, 'like');   // 알림 삭제\n    }\n    return post;\n  }\n\n  // 자동 마감\n  async autoClosing() {\n    await this.postModel.autoClosing();\n  }\n}\n"]}