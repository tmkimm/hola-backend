{"version":3,"file":"post.js","sourceRoot":"/","sources":["services/post.ts"],"names":[],"mappings":"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","sourcesContent":["import sanitizeHtml from 'sanitize-html';\nimport { Types } from 'mongoose';\nimport { IPost, IPostModel, IPostDocument } from '../models/Post';\nimport { INotificationModel } from '../models/Notification';\nimport { PostFilterLog } from '../models/PostFilterLog';\nimport { ReadPosts } from '../models/ReadPosts';\nimport { LikePosts } from '../models/LikePosts';\n\nimport { IUserModel } from '../models/User';\nimport CustomError from '../CustomError';\n\nexport class PostService {\n  constructor(\n    protected postModel: IPostModel,\n    protected userModel: IUserModel,\n    protected notificationModel: INotificationModel,\n  ) {}\n\n  // 이번주 인기글 조회\n  async findTopPost() {\n    const posts = await this.postModel.findTopPost(10, '-views');\n\n    const today: Date = new Date();\n\n    // mongoose document는 불변상태이기 때문에 POJO로 변환\n    const postArr: any = posts.map((post: any) => {\n      post = post.toObject({ virtuals: true });\n      if (post.startDate > today) {\n        post.badge = [\n          {\n            type: 'deadline',\n            name: `마감 ${this.timeForEndDate(post.startDate)}`,\n          },\n        ];\n      }\n      return post;\n    });\n    return postArr;\n  }\n\n  // 메인 화면에서 글 리스트를 조회한다.\n  async findPostPagination(\n    page: string | null,\n    sort: string | null,\n    language: string | null,\n    period: number | null,\n    isClosed: string | null,\n    type: string | null,\n    position: string | null,\n    search: string | null,\n    userId: Types.ObjectId | null,\n    onOffLine: string | null,\n  ) {\n    let result: IPostDocument[] = await this.postModel.findPostPagination(\n      page,\n      sort,\n      language,\n      period,\n      isClosed,\n      type,\n      position,\n      search,\n      onOffLine,\n    );\n    result = this.addPostVirtualField(result, userId);\n    return { posts: result };\n  }\n\n  // mongoose virtual field 추가\n  // mongodb text search를 위해 aggregate 사용 시 virtual field가 조회되지 않음 > 수동 추가\n  // isLiked : 사용자의 관심 등록 여부\n  // state : 상태 뱃지\n  // totalComments : 댓글 수\n  addPostVirtualField(posts: IPostDocument[], userId: Types.ObjectId | null): IPostDocument[] {\n    let result = [];\n    // 글 상태\n    const today: Date = new Date();\n    const daysAgo: Date = new Date();\n    const millisecondDay: number = 1000 * 60 * 60 * 24;\n    daysAgo.setDate(today.getDate() - 1); // 24시간 이내\n    result = posts.map((post: any) => {\n      let isLiked = false;\n\n      // add isLiked\n      if (userId != null && post.likes && post.likes.length > 0) {\n        // ObjectId 특성 상 IndexOf를 사용할 수 없어 loop로 비교(리팩토링 필요)\n        for (const likeUserId of post.likes) {\n          if (likeUserId.toString() == userId.toString()) {\n            isLiked = true;\n            break;\n          }\n        }\n      }\n      post.isLiked = isLiked;\n\n      // set Author info\n      if (post.author.length > 0) post.author = post.author[post.author.length - 1];\n\n      // add totalComments\n      post.totalComments = post.comments.length;\n\n      // add state\n      // 1. 3일 이내에 등록된 글이면 최신 글\n      // 2. 3일 이내 글이면 마감 임박\n      // 3. 일 조회수가 60 이상이면 인기\n      if (post.createdAt > daysAgo) post.state = 'new';\n      else if (post.startDate > today && (post.startDate.getTime() - today.getTime()) / millisecondDay <= 3)\n        post.state = 'deadline';\n      else if (Math.abs(post.views / Math.ceil((today.getTime() - post.createdAt.getTime()) / millisecondDay)) >= 60)\n        post.state = 'hot';\n      else post.state = '';\n      return post;\n    });\n\n    return result;\n  }\n\n  // Pagination을 위해 마지막 페이지를 구한다.\n  async findLastPage(\n    language: string | null,\n    period: number | null,\n    isClosed: string | null,\n    type: string | null,\n    position: string | null,\n    search: string | null,\n    onOffLine: string | null,\n  ) {\n    const itemsPerPage = 4 * 5; // 한 페이지에 표현할 수\n    const totalCount = await this.postModel.countPost(language, period, isClosed, type, position, search, onOffLine);\n    const lastPage = Math.ceil(totalCount / itemsPerPage);\n    return lastPage;\n  }\n\n  // 인기글 조회\n  async findPopularPosts(postId: Types.ObjectId, userId: Types.ObjectId) {\n    const posts = await this.postModel.findPopularPosts(postId, userId);\n    return posts;\n  }\n\n  // 메인 화면에서 글를 추천한다.(현재 미사용, 제거예정)\n  async recommendToUserFromMain(userId: Types.ObjectId) {\n    let sort;\n    let likeLanguages = null;\n    const limit = 20;\n    if (userId) {\n      const user = await this.userModel.findById(userId);\n      if (user !== null && user.likeLanguages) likeLanguages = user.likeLanguages;\n      sort = 'views';\n    } else {\n      sort = 'totalLikes';\n    }\n\n    const posts = await this.postModel.findPostRecommend('-views', likeLanguages, null, null, limit);\n    return posts;\n  }\n\n  // 글에서 글를 추천한다.\n  async recommendToUserFromPost(postId: Types.ObjectId, userId: Types.ObjectId) {\n    const sort = '-views';\n    let language = null;\n    const limit = 10;\n    if (postId) {\n      const post = await this.postModel.findById(postId);\n      if (post === null) throw new CustomError('JsonWebTokenError', 404, 'Post not found');\n\n      language = post.language;\n    }\n\n    const posts = await this.postModel.findPostRecommend(sort, language, postId, userId, limit);\n    return posts;\n  }\n\n  // 조회수 증가\n  async increaseView(postId: Types.ObjectId, userId: Types.ObjectId) {\n    // 읽은 목록 중복 삽입 방지\n    if (userId) {\n      await Promise.all([await ReadPosts.insertIfNotExist(postId, userId), await this.postModel.increaseView(postId)]);\n    } else {\n      await this.postModel.increaseView(postId); // 조회수 증가\n    }\n  }\n\n  // 상세 글 정보를 조회한다.\n  // 로그인된 사용자일 경우 읽은 목록을 추가한다.\n  async findPostDetail(postId: Types.ObjectId, userId: Types.ObjectId) {\n    const posts = await this.postModel.findById(postId).populate('author', 'nickName image');\n    if (!posts) throw new CustomError('NotFoundError', 404, 'Post not found');\n    const postToObject = posts.toObject({ virtuals: true });\n    const today: Date = new Date();\n    const badge = [];\n    if (postToObject.startDate > today) {\n      badge.push({\n        type: 'deadline',\n        name: `마감 ${this.timeForEndDate(postToObject.startDate)}`,\n      });\n    }\n    postToObject.badge = badge;\n\n    await this.increaseView(postId, userId); // 조회수 증가\n    return postToObject;\n  }\n\n  timeForEndDate(endDate: Date): string {\n    const today: Date = new Date();\n    const betweenTime: number = Math.floor((endDate.getTime() - today.getTime()) / 1000 / 60);\n\n    const betweenTimeDay = Math.floor(betweenTime / 60 / 24);\n    if (betweenTimeDay > 1 && betweenTimeDay < 365) {\n      return `${betweenTimeDay}일전`;\n    }\n    const betweenTimeHour = Math.floor(betweenTime / 60);\n    return `${betweenTimeHour}시간전`;\n  }\n\n  // 사용자의 관심 등록 여부를 조회한다.\n  async findUserLiked(postId: Types.ObjectId, userId: Types.ObjectId) {\n    if (userId && postId) {\n      const posts = await this.postModel.find({ _id: postId, likes: userId });\n      const isLiked = posts.length > 0;\n      return isLiked;\n    }\n    return false;\n  }\n\n  // 글의 관심 등록한 사용자 리스트를 조회한다.\n  async findLikeUsers(postId: Types.ObjectId) {\n    const likeUsers = await this.postModel.findById(postId).select('likes');\n    if (!likeUsers) return [];\n    return likeUsers.likes;\n  }\n\n  // 신규 글를 등록한다.\n  async registerPost(userID: Types.ObjectId, post: IPostDocument) {\n    post.author = userID;\n    if (post.content) {\n      const cleanHTML = sanitizeHtml(post.content, {\n        allowedTags: sanitizeHtml.defaults.allowedTags.concat(['img']),\n      });\n      post.content = cleanHTML;\n    }\n    const postRecord = await this.postModel.create(post);\n    return postRecord;\n  }\n\n  // 글 정보를 수정한다.\n  async modifyPost(id: Types.ObjectId, tokenUserId: Types.ObjectId, tokenType: string, post: IPost) {\n    await this.postModel.checkPostAuthorization(id, tokenUserId, tokenType); // 접근 권한 체크\n    if (post.content) {\n      const cleanHTML = sanitizeHtml(post.content, {\n        allowedTags: sanitizeHtml.defaults.allowedTags.concat(['img']),\n      });\n      post.content = cleanHTML;\n    }\n    const postRecord = await this.postModel.modifyPost(id, post);\n    return postRecord;\n  }\n\n  // 글를 삭제한다.\n  async deletePost(id: Types.ObjectId, tokenUserId: Types.ObjectId, tokenType: string) {\n    await this.postModel.checkPostAuthorization(id, tokenUserId, tokenType); // 접근 권한 체크\n    await this.postModel.deletePost(id);\n    await this.notificationModel.deleteNotificationByPost(id); // 글 삭제 시 관련 알림 제거\n  }\n\n  // 관심 등록 추가\n  async addLike(postId: Types.ObjectId, userId: Types.ObjectId) {\n    const { post, isLikeExist } = await this.postModel.addLike(postId, userId);\n    if (!isLikeExist) {\n      await LikePosts.add(postId, userId);\n      // await this.notificationModel.registerNotification(postId, post.author, userId, 'like');   // 알림 등록\n    }\n    return post;\n  }\n\n  // 관심 등록 취소(삭제)\n  async deleteLike(postId: Types.ObjectId, userId: Types.ObjectId) {\n    const { post, isLikeExist } = await this.postModel.deleteLike(postId, userId);\n    if (isLikeExist) {\n      await LikePosts.delete(postId, userId);\n      // await this.notificationModel.deleteNotification(postId, post.author, userId, 'like');   // 알림 삭제\n    }\n    return post;\n  }\n\n  // 자동 마감\n  async autoClosing() {\n    await this.postModel.autoClosing();\n  }\n}\n"]}