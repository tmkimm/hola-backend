{"version":3,"file":"post.js","sourceRoot":"/","sources":["services/post.ts"],"names":[],"mappings":"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","sourcesContent":["import sanitizeHtml from 'sanitize-html';\nimport { Types } from 'mongoose';\nimport { IPost, IPostModel, IPostDocument, Post as PostModel } from '../models/Post';\nimport { User as UserModel, IUserModel } from '../models/User';\nimport { Notification as NotificationModel } from '../models/Notification';\nimport { PostFilterLog as PostFilterLogModel } from '../models/PostFilterLog';\nimport { ReadPosts as ReadPostsModel } from '../models/ReadPosts';\nimport { LikePosts as LikePostsModel } from '../models/LikePosts';\n\nimport CustomError from '../CustomError';\n\n// 리팩토링필요\n// 메인 화면에서 글 리스트를 조회한다.\nconst findPost = async (\n  offset: number | null,\n  limit: number | null,\n  sort: string | null,\n  language: string | null,\n  period: number | null,\n  isClosed: string | null,\n  type: string | null,\n  position: string | null,\n  search: string | null,\n) => {\n  const posts = await PostModel.findPost(offset, limit, sort, language, period, isClosed, type, position, search);\n  // 언어 필터링 로그 생성\n  // if (language) {\n  //   await PostFilterLog.create({\n  //     viewDate: new Date(),\n  //     language: language.split(','),\n  //   });\n  // }\n  return posts;\n};\n\n// 메인 화면에서 글 리스트를 조회한다.\nconst findPostPagination = async (\n  page: string | null,\n  sort: string | null,\n  language: string | null,\n  period: number | null,\n  isClosed: string | null,\n  type: string | null,\n  position: string | null,\n  search: string | null,\n  userId: Types.ObjectId | null,\n) => {\n  const result: any = await PostModel.findPostPagination(\n    page,\n    sort,\n    language,\n    period,\n    isClosed,\n    type,\n    position,\n    search,\n  );\n\n  // mongoose document는 불변상태이기 때문에 POJO로 변환\n  const documentToObject = result.posts.map((post: any) => {\n    return post.toObject({ virtuals: true });\n  });\n\n  // 관심 등록 여부 추가\n  let addIsLiked;\n  // 로그인하지 않은 사용자\n  if (userId == null) {\n    addIsLiked = documentToObject.map((post: any) => {\n      post.isLiked = false;\n      return post;\n    });\n  } else {\n    // 로그인한 사용자\n    addIsLiked = documentToObject.map((post: any) => {\n      let isLiked = false;\n      if (post.likes && post.likes.length > 0) {\n        // ObjectId 특성 상 IndexOf를 사용할 수 없어 loop로 비교(리팩토링 필요)\n        for (const likeUserId of post.likes) {\n          if (likeUserId.toString() == userId.toString()) {\n            isLiked = true;\n            break;\n          }\n        }\n      }\n      post.isLiked = isLiked;\n      return post;\n    });\n  }\n  result.posts = addIsLiked;\n\n  // 언어 필터링 로그 생성\n  // if (language) {\n  //   await PostFilterLog.create({\n  //     viewDate: new Date(),\n  //     language: language.split(','),\n  //   });\n  // }\n  return result;\n};\n\n// Pagination을 위해 마지막 페이지를 구한다.\nconst findLastPage = async (\n  language: string | null,\n  period: number | null,\n  isClosed: string | null,\n  type: string | null,\n  position: string | null,\n  search: string | null,\n) => {\n  const itemsPerPage = 4 * 5; // 한 페이지에 표현할 수\n  const totalCount = await PostModel.countPost(language, period, isClosed, type, position, search);\n  const lastPage = Math.ceil(totalCount / itemsPerPage);\n  return lastPage;\n};\n\n// 인기글 조회\nconst findPopularPosts = async (postId: Types.ObjectId, userId: Types.ObjectId) => {\n  const posts = await PostModel.findPopularPosts(postId, userId);\n  return posts;\n};\n\n// 메인 화면에서 글를 추천한다.(현재 미사용, 제거예정)\nconst recommendToUserFromMain = async (userId: Types.ObjectId) => {\n  let sort;\n  let likeLanguages = null;\n  const limit = 20;\n  if (userId) {\n    const user = await UserModel.findById(userId);\n    if (user !== null && user.likeLanguages) likeLanguages = user.likeLanguages;\n    sort = 'views';\n  } else {\n    sort = 'totalLikes';\n  }\n\n  const posts = await PostModel.findPostRecommend('-views', likeLanguages, null, null, limit);\n  return posts;\n};\n\n// 글에서 글를 추천한다.\nconst recommendToUserFromPost = async (postId: Types.ObjectId, userId: Types.ObjectId) => {\n  const sort = '-views';\n  let language = null;\n  const limit = 10;\n  if (postId) {\n    const post = await PostModel.findById(postId);\n    if (post === null) throw new CustomError('JsonWebTokenError', 404, 'Post not found');\n\n    language = post.language;\n  }\n\n  const posts = await PostModel.findPostRecommend(sort, language, postId, userId, limit);\n  return posts;\n};\n\n// 조회수 증가\nconst increaseView = async (postId: Types.ObjectId, userId: Types.ObjectId, readList: string) => {\n  let isAlreadyRead = true;\n  let updateReadList = readList;\n  // 조회수 중복 증가 방지\n  if (readList === undefined || (typeof readList === 'string' && readList.indexOf(postId.toString()) === -1)) {\n    if (userId)\n      await Promise.all([\n        await ReadPostsModel.create({\n          userId,\n          postId,\n        }),\n        PostModel.increaseView(postId),\n      ]);\n    else await PostModel.increaseView(postId); // 조회수 증가\n\n    if (readList === undefined) updateReadList = `${postId}`;\n    else updateReadList = `${readList}|${postId}`;\n    isAlreadyRead = false;\n  }\n  return { updateReadList, isAlreadyRead };\n};\n\n// 상세 글 정보를 조회한다.\n// 로그인된 사용자일 경우 읽은 목록을 추가한다.\nconst findPostDetail = async (postId: Types.ObjectId) => {\n  const posts = await PostModel.findById(postId).populate('author', 'nickName image');\n  if (!posts) throw new CustomError('NotFoundError', 404, 'Post not found');\n  return posts;\n};\n\n// 사용자의 관심 등록 여부를 조회한다.\nconst findUserLiked = async (postId: Types.ObjectId, userId: Types.ObjectId) => {\n  if (userId && postId) {\n    const posts = await PostModel.find({ _id: postId, likes: userId });\n    const isLiked = posts.length > 0;\n    return isLiked;\n  }\n  return false;\n};\n\n// 글의 관심 등록한 사용자 리스트를 조회한다.\nconst findLikeUsers = async (postId: Types.ObjectId) => {\n  const likeUsers = await PostModel.findById(postId).select('likes');\n  if (!likeUsers) return [];\n  return likeUsers.likes;\n};\n\n// 신규 글를 등록한다.\nconst registerPost = async (userID: Types.ObjectId, post: IPostDocument) => {\n  post.author = userID;\n  if (post.content) {\n    const cleanHTML = sanitizeHtml(post.content, {\n      allowedTags: sanitizeHtml.defaults.allowedTags.concat(['img']),\n    });\n    post.content = cleanHTML;\n  }\n  const postRecord = await PostModel.create(post);\n  return postRecord;\n};\n\n// 글 정보를 수정한다.\nconst modifyPost = async (id: Types.ObjectId, tokenUserId: Types.ObjectId, tokenType: string, post: IPost) => {\n  await PostModel.checkPostAuthorization(id, tokenUserId, tokenType); // 접근 권한 체크\n  if (post.content) {\n    const cleanHTML = sanitizeHtml(post.content, {\n      allowedTags: sanitizeHtml.defaults.allowedTags.concat(['img']),\n    });\n    post.content = cleanHTML;\n  }\n  const postRecord = await PostModel.modifyPost(id, post);\n  return postRecord;\n};\n\n// 글를 삭제한다.\nconst deletePost = async (id: Types.ObjectId, tokenUserId: Types.ObjectId, tokenType: string) => {\n  await PostModel.checkPostAuthorization(id, tokenUserId, tokenType); // 접근 권한 체크\n  await PostModel.deletePost(id);\n  await NotificationModel.deleteNotificationByPost(id); // 글 삭제 시 관련 알림 제거\n};\n\n// 관심 등록 추가\nconst addLike = async (postId: Types.ObjectId, userId: Types.ObjectId) => {\n  const { post, isLikeExist } = await PostModel.addLike(postId, userId);\n  if (!isLikeExist) {\n    await LikePostsModel.add(postId, userId);\n    // await NotificationModel.registerNotification(postId, post.author, userId, 'like');   // 알림 등록\n  }\n  return post;\n};\n\n// 관심 등록 취소(삭제)\nconst deleteLike = async (postId: Types.ObjectId, userId: Types.ObjectId) => {\n  const { post, isLikeExist } = await PostModel.deleteLike(postId, userId);\n  if (isLikeExist) {\n    await LikePostsModel.delete(postId, userId);\n    // await this.notificationModel.deleteNotification(postId, post.author, userId, 'like');   // 알림 삭제\n  }\n  return post;\n};\n\n// 자동 마감\nconst autoClosing = async () => {\n  await PostModel.autoClosing();\n};\n\nexport {\n  findPost,\n  findPostPagination,\n  findLastPage,\n  findPopularPosts,\n  recommendToUserFromMain,\n  recommendToUserFromPost,\n  increaseView,\n  findPostDetail,\n  findUserLiked,\n  findLikeUsers,\n  registerPost,\n  modifyPost,\n  deletePost,\n  addLike,\n  deleteLike,\n  autoClosing,\n};\n"]}