{"version":3,"file":"notification.js","sourceRoot":"/","sources":["services/notification.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,+DAA8D;AAE9D;IACE,6BAAsB,iBAAqC;QAArC,sBAAiB,GAAjB,iBAAiB,CAAoB;IAAG,CAAC;IAE/D,gBAAgB;IACV,+CAAiB,GAAvB,UAAwB,MAAsB;;;;;4BACJ,qBAAM,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAA;;wBAAxF,MAAM,GAA4B,SAAsD;wBAExF,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,UAAC,IAA2B;4BACpD,IAAI,CAAC,OAAO,GAAG,IAAA,mCAAgB,EAAC,IAAI,CAAC,SAAS,CAAC,CAAC;4BAChD,OAAO,IAAI,CAAC;wBACd,CAAC,CAAC,CAAA;wBACF,sBAAO,MAAM,EAAC;;;;KACf;IAED,oBAAoB;IACd,6CAAe,GAArB,UAAsB,MAAsB;;;;;4BAC3B,qBAAM,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,MAAM,CAAC,EAAA;;wBAA7D,MAAM,GAAG,SAAoD;wBACnE,sBAAO,MAAM,EAAC;;;;KACf;IAED,WAAW;IACL,8CAAgB,GAAtB,UAAuB,GAAmB;;;;4BACxC,qBAAM,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAAA;;wBAAlD,SAAkD,CAAC;;;;;KACpD;IAED,cAAc;IACR,qCAAO,GAAb,UAAc,YAA4B;;;;4BACxC,qBAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,YAAY,CAAC,EAAA;;wBAAlD,SAAkD,CAAC;;;;;KACpD;IAEC,WAAW;IACP,gDAAkB,GAAxB,UAAyB,YAA4B,EAAE,QAAgB;;;;;;wBACjE,IAAI,GAAG,cAAI,CAAC;wBACZ,GAAG,GAAG,UAAU,CAAC;wBACjB,KAAK,GAAG,UAAG,QAAQ,kJAAiC,CAAC;wBACrD,WAAW,GAAG,6CAAU,CAAC;wBAC7B,qBAAM,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,QAAQ,EAAE,YAAY,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,WAAW,CAAC,EAAA;;wBAAtG,SAAsG,CAAC;;;;;KACxG;IAED,QAAQ;IACF,iDAAmB,GAAzB,UAA0B,YAA4B,EAAE,QAAgB,EAAE,MAAsB,EAAE,YAA4B,EAAE,cAA8B,EAAE,cAAsB;;;;;;wBACpL,IAAG,YAAY,CAAC,QAAQ,EAAE,KAAK,YAAY,CAAC,QAAQ,EAAE;4BACpD,sBAAO;wBAEL,IAAI,GAAG,cAAI,CAAC;wBACZ,GAAG,GAAG,iBAAU,MAAM,CAAC,QAAQ,EAAE,CAAE,CAAC;wBACpC,KAAK,GAAG,UAAG,QAAQ,iEAAe,cAAc,CAAE,CAAC;wBACnD,WAAW,GAAG,0BAAM,CAAC;wBACzB,qBAAM,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,SAAS,EAAE,YAAY,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,WAAW,EAAE,YAAY,EAAE,cAAc,EAAE,MAAM,CAAC,EAAA;;wBAA7I,SAA6I,CAAC;;;;;KAC/I;IAEK,kDAAoB,GAA1B,UAA2B,SAAyB,EAAE,QAAgB,EAAE,OAAe;;;;;;wBACjF,KAAK,GAAG,UAAG,QAAQ,iEAAe,OAAO,CAAE,CAAC;wBAChD,qBAAM,IAAI,CAAC,iBAAiB,CAAC,uBAAuB,CAAC,SAAS,EAAE,KAAK,CAAC,EAAA;;wBAAtE,SAAsE,CAAC;;;;;KACxE;IACH,0BAAC;AAAD,CAAC,AAvDD,IAuDC;AAvDY,kDAAmB","sourcesContent":["import { Types } from 'mongoose';\nimport { INotification, INotificationDocument, INotificationModel } from '../models/Notification';\nimport { timeForCreatedAt } from '../utills/timeForCreatedAt';\n\nexport class NotificationService {\n  constructor(protected notificationModel: INotificationModel) {}\n\n  // 알림 리스트를 조회한다.\n  async findNotifications(userId: Types.ObjectId) {\n    const notice: INotificationDocument[] = await this.notificationModel.findNotifications(userId);\n    // 시간 전 계산\n    const result = notice.map((item: INotificationDocument) => {\n      item.timeAgo = timeForCreatedAt(item.createdAt);\n      return item;\n    })\n    return result;\n  }\n\n  // 읽지 않은 알림 수를 조회한다.\n  async findUnReadCount(author: Types.ObjectId) {\n    const notice = await this.notificationModel.findUnReadCount(author);\n    return notice;\n  }\n\n  // 알림 읽음 처리\n  async readNotification(_id: Types.ObjectId) {\n    await this.notificationModel.readNotification(_id);\n  }\n\n  // 알림 전체 읽음 처리\n  async readAll(targetUserId: Types.ObjectId) {\n    await this.notificationModel.readAll(targetUserId);\n  }\n\n    // 회원 가입 알림\n  async createSignUpNotice(targetUserId: Types.ObjectId, nickName: string) {\n    let icon = `👋`;\n    let urn = `/setting`;\n    let title = `${nickName}님 반가워요 🥳 올라에서 원하는 팀원을 만나보세요 :)`;\n    let buttonLabel = `프로필 완성하기`;\n    await this.notificationModel.createNotification('signup', targetUserId, urn, title, icon, buttonLabel);\n  }\n\n  // 댓글 알림\n  async createCommentNotice(targetUserId: Types.ObjectId, nickName: string, postId: Types.ObjectId, createUserId: Types.ObjectId, createObjectId: Types.ObjectId, commentContent: string) {\n    if(targetUserId.toString() === createUserId.toString())\n      return;\n\n    let icon = `💬`;\n    let urn = `/study/${postId.toString()}`;\n    let title = `${nickName}이 댓글을 남겼어요: ${commentContent}`;\n    let buttonLabel = `확인하기`;\n    await this.notificationModel.createNotification('comment', targetUserId, urn, title, icon, buttonLabel, createUserId, createObjectId, postId);\n  }\n  \n  async modifyCommentContent(commentId: Types.ObjectId, nickName: string, content: string) {\n    let title = `${nickName}이 댓글을 남겼어요: ${content}`;\n    await this.notificationModel.modifyNotificationTitle(commentId, title);\n  }\n}\n"]}