{"version":3,"file":"auth.js","sourceRoot":"/","sources":["services/auth.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+DAAyC;AACzC,uCAAmD;AACnD,qCAA0C;AAE1C,iCAAiC;AACjC,IAAM,MAAM,GAAG,UAAO,OAAe;;;;oBACtB,qBAAM,WAAS,CAAC,aAAa,CAAC,OAAO,CAAC,EAAA;;gBAA7C,IAAI,GAAG,SAAsC;gBACnD,IAAI,CAAC,IAAI;oBAAE,MAAM,IAAI,qBAAW,CAAC,uBAAuB,EAAE,GAAG,EAAE,gBAAgB,CAAC,CAAC;gBAEzE,GAAG,GAAqC,IAAI,IAAzC,EAAE,QAAQ,GAA2B,IAAI,SAA/B,EAAE,KAAK,GAAoB,IAAI,MAAxB,EAAE,aAAa,GAAK,IAAI,cAAT,CAAU;gBACjB,qBAAM,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,mBAAmB,EAAE,EAAE,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC,EAAA;;gBAA1G,KAA8B,SAA4E,EAAzG,WAAW,QAAA,EAAE,YAAY,QAAA;gBAChC,sBAAO,EAAE,GAAG,KAAA,EAAE,QAAQ,UAAA,EAAE,KAAK,OAAA,EAAE,aAAa,eAAA,EAAE,WAAW,aAAA,EAAE,YAAY,cAAA,EAAE,EAAC;;;KAC3E,CAAC;AAqBO,wBAAM;AAnBf,0CAA0C;AAC1C,IAAM,kBAAkB,GAAG,UAAO,YAAoB;;;;;gBAChD,aAAa,GAAG,IAAI,CAAC;;;;gBAEI,qBAAM,IAAA,eAAS,EAAC,YAAY,CAAC,EAAA;;gBAAlD,kBAAkB,GAAG,SAA6B;gBACxD,IAAI,OAAO,kBAAkB,KAAK,QAAQ;oBAAE,MAAM,IAAI,qBAAW,CAAC,mBAAmB,EAAE,GAAG,EAAE,eAAe,CAAC,CAAC;gBAEhG,qBAAM,WAAS,CAAC,cAAc,CAAC,kBAAkB,CAAC,QAAQ,CAAC,EAAA;;gBAAlE,IAAI,GAAG,SAA2D;gBACxE,IAAI,CAAC,IAAI;oBAAE,MAAM,IAAI,qBAAW,CAAC,uBAAuB,EAAE,GAAG,EAAE,gBAAgB,CAAC,CAAC;gBAEzE,GAAG,GAA4C,IAAI,IAAhD,EAAE,QAAQ,GAAkC,IAAI,SAAtC,EAAE,KAAK,GAA2B,IAAI,MAA/B,EAAE,KAAK,GAAoB,IAAI,MAAxB,EAAE,aAAa,GAAK,IAAI,cAAT,CAAU;gBACxC,qBAAM,IAAI,CAAC,mBAAmB,EAAE,EAAA;;gBAA9C,WAAW,GAAG,SAAgC;gBACpD,sBAAO,EAAE,aAAa,eAAA,EAAE,GAAG,KAAA,EAAE,QAAQ,UAAA,EAAE,KAAK,OAAA,EAAE,KAAK,OAAA,EAAE,aAAa,eAAA,EAAE,WAAW,aAAA,EAAE,EAAC;;;gBAElF,aAAa,GAAG,KAAK,CAAC;gBACtB,sBAAO,EAAE,aAAa,eAAA,EAAE,EAAC;;;;KAE5B,CAAC;AAEe,gDAAkB","sourcesContent":["import CustomError from '../CustomError';\nimport { User as UserModel } from '../models/User';\nimport { verifyJWT } from '../utills/jwt';\n\n// 로그인 시 사용자 정보를 조회, Token을 생성한다.\nconst SignIn = async (idToken: string) => {\n  const user = await UserModel.findByIdToken(idToken);\n  if (!user) throw new CustomError('InvaildParameterError', 401, 'User not found');\n  // Access Token, Refresh Token 발급\n  const { _id, nickName, image, likeLanguages } = user;\n  const [accessToken, refreshToken] = await Promise.all([user.generateAccessToken(), user.generateRefreshToken()]);\n  return { _id, nickName, image, likeLanguages, accessToken, refreshToken };\n};\n\n// Refresh Token을 이용하여 Access Token 재발급한다.\nconst reissueAccessToken = async (refreshToken: string) => {\n  let decodeSuccess = true;\n  try {\n    const decodeRefreshToken = await verifyJWT(refreshToken);\n    if (typeof decodeRefreshToken === 'string') throw new CustomError('JsonWebTokenError', 401, 'Invaild Token');\n\n    const user = await UserModel.findByNickName(decodeRefreshToken.nickName);\n    if (!user) throw new CustomError('InvaildParameterError', 401, 'User not found');\n\n    const { _id, nickName, email, image, likeLanguages } = user;\n    const accessToken = await user.generateAccessToken();\n    return { decodeSuccess, _id, nickName, email, image, likeLanguages, accessToken };\n  } catch (err) {\n    decodeSuccess = false;\n    return { decodeSuccess };\n  }\n};\n\nexport { SignIn, reissueAccessToken };\n"]}