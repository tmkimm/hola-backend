{"version":3,"file":"auth.js","sourceRoot":"/","sources":["services/auth.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+DAAyC;AAEzC,qCAA0C;AAE1C;IACE,qBAAsB,SAAqB;QAArB,cAAS,GAAT,SAAS,CAAY;IAAG,CAAC;IAE/C,kCAAkC;IAC5B,4BAAM,GAAZ,UAAa,OAAe;;;;;4BACb,qBAAM,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,OAAO,CAAC,EAAA;;wBAAlD,IAAI,GAAG,SAA2C;wBACxD,IAAI,CAAC,IAAI;4BAAE,MAAM,IAAI,qBAAW,CAAC,uBAAuB,EAAE,GAAG,EAAE,gBAAgB,CAAC,CAAC;wBAGzE,GAAG,GAAqC,IAAI,IAAzC,EAAE,QAAQ,GAA2B,IAAI,SAA/B,EAAE,KAAK,GAAoB,IAAI,MAAxB,EAAE,aAAa,GAAK,IAAI,cAAT,CAAU;wBACjB,qBAAM,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,mBAAmB,EAAE,EAAE,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC,EAAA;;wBAA1G,KAA8B,SAA4E,EAAzG,WAAW,QAAA,EAAE,YAAY,QAAA;wBAEhC,sBAAO,EAAE,GAAG,KAAA,EAAE,QAAQ,UAAA,EAAE,KAAK,OAAA,EAAE,aAAa,eAAA,EAAE,WAAW,aAAA,EAAE,YAAY,cAAA,EAAE,EAAC;;;;KAC3E;IAED,0CAA0C;IACpC,wCAAkB,GAAxB,UAAyB,YAAoB;;;;;;wBACvC,aAAa,GAAG,IAAI,CAAC;;;;wBAEI,qBAAM,IAAA,eAAS,EAAC,YAAY,CAAC,EAAA;;wBAAlD,kBAAkB,GAAG,SAA6B;wBACxD,IAAI,OAAO,kBAAkB,KAAK,QAAQ;4BAAE,MAAM,IAAI,qBAAW,CAAC,mBAAmB,EAAE,GAAG,EAAE,eAAe,CAAC,CAAC;wBAEhG,qBAAM,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,kBAAkB,CAAC,QAAQ,CAAC,EAAA;;wBAAvE,IAAI,GAAG,SAAgE;wBAC7E,IAAI,CAAC,IAAI;4BAAE,MAAM,IAAI,qBAAW,CAAC,uBAAuB,EAAE,GAAG,EAAE,gBAAgB,CAAC,CAAC;wBAEzE,GAAG,GAA4C,IAAI,IAAhD,EAAE,QAAQ,GAAkC,IAAI,SAAtC,EAAE,KAAK,GAA2B,IAAI,MAA/B,EAAE,KAAK,GAAoB,IAAI,MAAxB,EAAE,aAAa,GAAK,IAAI,cAAT,CAAU;wBACxC,qBAAM,IAAI,CAAC,mBAAmB,EAAE,EAAA;;wBAA9C,WAAW,GAAG,SAAgC;wBACpD,sBAAO,EAAE,aAAa,eAAA,EAAE,GAAG,KAAA,EAAE,QAAQ,UAAA,EAAE,KAAK,OAAA,EAAE,KAAK,OAAA,EAAE,aAAa,eAAA,EAAE,WAAW,aAAA,EAAE,EAAC;;;wBAElF,aAAa,GAAG,KAAK,CAAC;wBACtB,sBAAO,EAAE,aAAa,eAAA,EAAE,EAAC;;;;;KAE5B;IACH,kBAAC;AAAD,CAAC,AAjCD,IAiCC;AAjCY,kCAAW","sourcesContent":["import CustomError from '../CustomError';\nimport { IUserModel } from '../models/User';\nimport { verifyJWT } from '../utills/jwt';\n\nexport class AuthService {\n  constructor(protected userModel: IUserModel) {}\n\n  // 로그인 시 사용자 정보를 조회하고 Token을 생성한다.\n  async SignIn(idToken: string) {\n    const user = await this.userModel.findByIdToken(idToken);\n    if (!user) throw new CustomError('InvaildParameterError', 401, 'User not found');\n\n    // Access Token, Refresh Token 발급\n    const { _id, nickName, image, likeLanguages } = user;\n    const [accessToken, refreshToken] = await Promise.all([user.generateAccessToken(), user.generateRefreshToken()]);\n\n    return { _id, nickName, image, likeLanguages, accessToken, refreshToken };\n  }\n\n  // Refresh Token을 이용하여 Access Token 재발급한다.\n  async reissueAccessToken(refreshToken: string) {\n    let decodeSuccess = true;\n    try {\n      const decodeRefreshToken = await verifyJWT(refreshToken);\n      if (typeof decodeRefreshToken === 'string') throw new CustomError('JsonWebTokenError', 401, 'Invaild Token');\n\n      const user = await this.userModel.findByNickName(decodeRefreshToken.nickName);\n      if (!user) throw new CustomError('InvaildParameterError', 401, 'User not found');\n\n      const { _id, nickName, email, image, likeLanguages } = user;\n      const accessToken = await user.generateAccessToken();\n      return { decodeSuccess, _id, nickName, email, image, likeLanguages, accessToken };\n    } catch (err) {\n      decodeSuccess = false;\n      return { decodeSuccess };\n    }\n  }\n}\n"]}