{"version":3,"file":"comment.js","sourceRoot":"/","sources":["services/comment.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,uCAA2F;AAE3F,0BAA0B;AAC1B,IAAM,YAAY,GAAG,UAAO,EAAkB;;;;oBAC3B,qBAAM,WAAS,CAAC,YAAY,CAAC,EAAE,CAAC,EAAA;;gBAA3C,QAAQ,GAAG,SAAgC;gBACjD,sBAAO,QAAQ,EAAC;;;KACjB,CAAC;AAuBO,oCAAY;AArBrB,WAAW;AACX,IAAM,eAAe,GAAG,UAAO,MAAsB,EAAE,MAAsB,EAAE,OAAe,EAAE,QAAgB;;;;oBAClF,qBAAM,WAAS,CAAC,eAAe,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC,EAAA;;gBAA9E,KAAsB,SAAwD,EAA5E,IAAI,UAAA,EAAE,SAAS,eAAA;gBACvB,2HAA2H;gBAC3H,sBAAO,IAAI,EAAC;;;KACb,CAAC;AAgBqB,0CAAe;AAdtC,WAAW;AACX,IAAM,aAAa,GAAG,UAAO,OAAyB,EAAE,WAA2B,EAAE,SAAiB;;;;oBACpG,qBAAM,WAAS,CAAC,yBAAyB,CAAC,OAAO,CAAC,GAAG,EAAE,WAAW,EAAE,SAAS,CAAC,EAAA;;gBAA9E,SAA8E,CAAC;gBACzD,qBAAM,WAAS,CAAC,aAAa,CAAC,OAAO,CAAC,EAAA;;gBAAtD,aAAa,GAAG,SAAsC;gBAC5D,sBAAO,aAAa,EAAC;;;KACtB,CAAC;AASsC,sCAAa;AAPrD,WAAW;AACX,IAAM,aAAa,GAAG,UAAO,SAAyB,EAAE,MAAsB,EAAE,SAAiB;;;;oBAC/F,qBAAM,WAAS,CAAC,yBAAyB,CAAC,SAAS,EAAE,MAAM,EAAE,SAAS,CAAC,EAAA;;gBAAvE,SAAuE,CAAC;gBACrD,qBAAM,WAAS,CAAC,aAAa,CAAC,SAAS,CAAC,EAAA;;gBAArD,UAAU,GAAG,SAAwC;;;;KAE5D,CAAC;AAEqD,sCAAa","sourcesContent":["import { Types } from 'mongoose';\nimport { ICommentDocument, IComment, IPostModel, Post as PostModel } from '../models/Post';\n\n// 글 id를 이용해 댓글 리스트를 조회한다.\nconst findComments = async (id: Types.ObjectId) => {\n  const comments = await PostModel.findComments(id);\n  return comments;\n};\n\n// 신규 댓글 추가\nconst registerComment = async (userID: Types.ObjectId, postId: Types.ObjectId, content: string, nickName: string) => {\n  const { post, commentId } = await PostModel.registerComment(postId, content, userID);\n  // await this.notificationModel.registerNotification(postId, post.author, userID, 'comment', commentId, nickName); // 알림 등록\n  return post;\n};\n\n// 댓글 수정한다.\nconst modifyComment = async (comment: ICommentDocument, tokenUserId: Types.ObjectId, tokenType: string) => {\n  await PostModel.checkCommentAuthorization(comment._id, tokenUserId, tokenType);\n  const commentRecord = await PostModel.modifyComment(comment);\n  return commentRecord;\n};\n\n// 댓글 삭제한다.\nconst deleteComment = async (commentId: Types.ObjectId, userId: Types.ObjectId, tokenType: string) => {\n  await PostModel.checkCommentAuthorization(commentId, userId, tokenType);\n  const postRecord = await PostModel.deleteComment(commentId);\n  // await this.notificationModel.deleteNotification(commentId); // 알림 삭제\n};\n\nexport { findComments, registerComment, modifyComment, deleteComment };\n"]}