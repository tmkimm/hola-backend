{"version":3,"file":"event.js","sourceRoot":"/","sources":["services/event.ts"],"names":[],"mappings":"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","sourcesContent":["import { Types } from 'mongoose';\nimport CustomError from '../CustomError';\nimport { IAdvertisementModel } from '../models/Advertisement';\nimport { IEventDocument, IEventModel } from '../models/Event';\nimport { timeForEndDate } from '../utills/timeForEndDate';\nimport { isNumber } from './../utills/isNumber';\nimport AWS from 'aws-sdk';\nimport config from '../config';\nimport { LikeEvents } from '../models/LikeEvents';\n\nexport class EventService {\n  constructor(\n    protected eventModel: IEventModel,\n    protected adverisementModel: IAdvertisementModel\n  ) {}\n\n  // 리스트뷰 조회\n  async findEventList(\n    page: string | null,\n    sort: string | null,\n    eventType: string | null,\n    search: string | null,\n    onOffLine: string | null,\n    userId: Types.ObjectId | null\n  ) {\n    let result: IEventDocument[] = await this.eventModel.findEventPagination(page, sort, eventType, search, onOffLine);\n    result = this.addPostVirtualField(result, userId);\n    return result;\n  }\n\n  // Pagination을 위해 마지막 페이지를 구한다.\n  async findEventLastPage(eventType: string | null, search: string | null, onOffLine: string | null) {\n    const itemsPerPage = 4 * 5; // 한 페이지에 표현할 수\n    let count = await this.eventModel.countEvent(eventType, search, onOffLine);\n    const lastPage = Math.ceil(count / itemsPerPage);\n    return lastPage;\n  }\n\n  // 캘린더뷰 조회\n  async findEventListInCalendar(\n    year: string | null,\n    month: string | null,\n    eventType: string | null,\n    search: string | null,\n    userId: Types.ObjectId | null,\n    onOffLine: string | null\n  ) {\n    if (!isNumber(year) || !isNumber(month))\n      throw new CustomError('IllegalArgumentError', 400, 'Date format is incorrect');\n    let result: IEventDocument[] = await this.eventModel.findEventCalendar(\n      Number(year),\n      Number(month),\n      eventType,\n      search,\n      onOffLine\n    );\n    result = this.addPostVirtualField(result, userId);\n    return result;\n  }\n\n  // 진행중인 모든 공모전 조회(SelectBox 전용)\n  async findEventTitleForSelectBox() {\n    let result: IEventDocument[] = await this.eventModel.findEventForSelectBox(80);\n    return result;\n  }\n\n  // mongoose virtual field 추가\n  // mongodb text search를 위해 aggregate 사용 시 virtual field가 조회되지 않음 > 수동 추가\n  // isLiked : 사용자의 관심 등록 여부\n  addPostVirtualField(events: IEventDocument[], userId: Types.ObjectId | null): IEventDocument[] {\n    let result = [];\n    // 글 상태\n    result = events.map((event: any) => {\n      let isLiked = false;\n\n      // add isLiked\n      if (userId != null && event.likes && event.likes.length > 0) {\n        // ObjectId 특성 상 IndexOf를 사용할 수 없어 loop로 비교(리팩토링 필요)\n        for (const likeUserId of event.likes) {\n          if (likeUserId.toString() == userId.toString()) {\n            isLiked = true;\n            break;\n          }\n        }\n      }\n      event.isLiked = isLiked;\n\n      return event;\n    });\n\n    return result;\n  }\n\n  // 공모전 상세 조회\n  async findEvent(eventId: Types.ObjectId, userId: Types.ObjectId) {\n    const event: any = await this.eventModel.findById(eventId).lean();\n    // 관심 등록 여부 추가\n    let isLiked = false;\n    // add isLiked\n    if (userId != null && event.likes && event.likes.length > 0) {\n      // ObjectId 특성 상 IndexOf를 사용할 수 없어 loop로 비교(리팩토링 필요)\n      for (const likeUserId of event.likes) {\n        if (likeUserId.toString() == userId.toString()) {\n          isLiked = true;\n          break;\n        }\n      }\n    }\n    event.isLiked = isLiked;\n\n    if (!event) throw new CustomError('NotFoundError', 404, 'Event not found');\n    await this.increaseView(eventId); // 조회수 증가\n    return event;\n  }\n\n  // 추천 이벤트\n  async findRecommendEventList() {\n    // 광고 진행중인 공모전 조회\n    const activeADInEvent = await this.adverisementModel.findActiveADListInEvent();\n\n    // event 정보만 분리\n    const adEventList = activeADInEvent\n      .filter((i: any) => {\n        return i.event && i.event.length > 0 && i.event[0] !== null && i.event[0] !== undefined;\n      })\n      .map((i: any) => {\n        i.event[0].isAd = true;\n        return i.event[0];\n      });\n\n    // 인기 공모전 조회 시 광고로 조회된 공모전 제외\n    const notInEventId = adEventList.map((event: IEventDocument) => {\n      return event._id;\n    });\n\n    // id를 분리하여 not in으로\n    const events = await this.eventModel.findRecommendEventList(notInEventId);\n    adEventList.push(...events);\n\n    // 마감임박 뱃지 추가\n    const today: Date = new Date();\n    const result: any = adEventList.map((event: any) => {\n      if (!event.isAd || event.isAd !== true) event.isAd = false;\n\n      event.badge = [];\n      if (event.endDate > today) {\n        event.badge.push({\n          type: 'deadline',\n          name: `${timeForEndDate(event.endDate)}`,\n        });\n      }\n      return event;\n    });\n    return result;\n  }\n\n  // 글 상세에서 추천 이벤트 조회\n  async findRecommendEventListInDetail(eventId: Types.ObjectId, eventType: string | null) {\n    const event = await this.eventModel.findRandomEventByEventType(eventId, eventType);\n    return event;\n  }\n\n  // 조회수 증가\n  async increaseView(eventId: Types.ObjectId) {\n    await this.eventModel.increaseView(eventId); // 조회수 증가\n  }\n\n  // 공모전 등록\n  async createEvent(event: IEventDocument) {\n    // TODO 사용자 정보 기입\n    //event.author = userID;\n    let image = event.imageUrl;\n    event.smallImageUrl = image.replace('event-original', 'event-thumbnail'); // 이미지 등록 시 Lambda에서 thumbnail 이미지 생성\n    const eventRecord = await this.eventModel.create(event);\n    return eventRecord;\n  }\n\n  // 공모전 수정\n  async modifyEvent(id: Types.ObjectId, event: IEventDocument) {\n    // TODO 공모전 권한 관리\n    // if (id.toString() !== tokenEventId.toString())\n    //   throw new CustomError('NotAuthenticatedError', 401, 'Event does not match');\n    const eventRecord = await this.eventModel.modifyEvent(id, event);\n    return eventRecord;\n  }\n\n  // 공모전 삭제\n  async deleteEvent(id: Types.ObjectId) {\n    // TODO 공모전 권한 관리\n    // if (id.toString() !== tokenEventId.toString())\n    //   throw new CustomError('NotAuthenticatedError', 401, 'Event does not match');\n    await this.eventModel.deleteEvent(id);\n  }\n\n  // S3 Pre-Sign Url을 발급한다.\n  async getPreSignUrl(fileName: string) {\n    if (!fileName) {\n      throw new CustomError('NotFoundError', 404, '\"fileName\" does not exist');\n    }\n\n    const s3 = new AWS.S3({\n      accessKeyId: config.S3AccessKeyId,\n      secretAccessKey: config.S3SecretAccessKey,\n      region: config.S3BucketRegion,\n    });\n\n    const params = {\n      Bucket: config.S3BucketName,\n      Key: `event-original/${fileName}`,\n      Expires: 60 * 10, // seconds\n    };\n\n    const signedUrlPut = await s3.getSignedUrlPromise('putObject', params);\n    return signedUrlPut;\n  }\n\n  // 관심 등록 추가\n  async addLike(postId: Types.ObjectId, userId: Types.ObjectId) {\n    const { event, isLikeExist } = await this.eventModel.addLike(postId, userId);\n    if (!isLikeExist) {\n      await LikeEvents.add(postId, userId);\n    }\n    return event;\n  }\n\n  // 관심 등록 취소(삭제)\n  async deleteLike(postId: Types.ObjectId, userId: Types.ObjectId) {\n    const { event, isLikeExist } = await this.eventModel.deleteLike(postId, userId);\n    if (isLikeExist) {\n      await LikeEvents.delete(postId, userId);\n    }\n    return event;\n  }\n  async updateClosedAfterEndDate() {\n    await this.eventModel.updateClosedAfterEndDate();\n  }\n}\n"]}