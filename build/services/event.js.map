{"version":3,"file":"event.js","sourceRoot":"/","sources":["services/event.ts"],"names":[],"mappings":"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","sourcesContent":["import { Types } from 'mongoose';\nimport CustomError from '../CustomError';\nimport { IAdvertisementModel } from '../models/Advertisement';\nimport { IEventDocument, IEventModel } from '../models/Event';\nimport { timeForEndDate } from '../utills/timeForEndDate';\nimport { isNumber } from './../utills/isNumber';\n\nexport class EventService {\n  constructor(\n    protected eventModel: IEventModel,\n    protected adverisementModel: IAdvertisementModel\n  ) {}\n\n  // 메인 화면에서 글 리스트를 조회한다.\n  async findEventList(\n    page: string | null,\n    sort: string | null,\n    eventType: string | null,\n    search: string | null,\n    onOffLine: string | null\n  ) {\n    let result: IEventDocument[] = await this.eventModel.findEventPagination(page, sort, eventType, search, onOffLine);\n    return result;\n  }\n\n  // Pagination을 위해 마지막 페이지를 구한다.\n  async findEventLastPage(eventType: string | null, search: string | null, onOffLine: string | null) {\n    const itemsPerPage = 4 * 5; // 한 페이지에 표현할 수\n    let count = await this.eventModel.countEvent(eventType, search, onOffLine);\n    const lastPage = Math.ceil(count / itemsPerPage);\n    return lastPage;\n  }\n\n  // 메인 화면에서 글 리스트를 조회한다.\n  async findEventListInCalendar(\n    year: string | null,\n    month: string | null,\n    eventType: string | null,\n    search: string | null\n  ) {\n    if (!isNumber(year) || !isNumber(month))\n      throw new CustomError('IllegalArgumentError', 400, 'Date format is incorrect');\n    let b: String = '123';\n    let result: IEventDocument[] = await this.eventModel.findEventCalendar(\n      Number(year),\n      Number(month),\n      eventType,\n      search\n    );\n    return result;\n  }\n\n  // 메인 화면에서 글 리스트를 조회한다.\n  async findEvent(eventId: Types.ObjectId) {\n    const event = await this.eventModel.findById(eventId);\n    if (!event) throw new CustomError('NotFoundError', 404, 'Event not found');\n    return event;\n  }\n\n  // 추천 이벤트\n  async findRecommendEventList() {\n    // 광고 진행중인 공모전 조회\n    const activeADInEvent = await this.adverisementModel.findActiveADListInEvent();\n\n    // event 정보만 분리\n    const adEventList = activeADInEvent\n      .filter((i: any) => {\n        return i.event && i.event.length > 0 && i.event[0] !== null && i.event[0] !== undefined;\n      })\n      .map((i: any) => {\n        i.event[0].isAd = true;\n        return i.event[0];\n      });\n\n    // 인기 공모전 조회 시 광고로 조회된 공모전 제외\n    const notInEventId = adEventList.map((event: IEventDocument) => {\n      return event._id;\n    });\n\n    // id를 분리하여 not in으로\n    const events = await this.eventModel.findRecommendEventList(notInEventId);\n    adEventList.push(...events);\n\n    // 마감임박 뱃지 추가\n    const today: Date = new Date();\n    const result: any = adEventList.map((event: any) => {\n      if (!event.isAd || event.isAd !== true) event.isAd = false;\n\n      event.badge = [];\n      if (event.endDate > today) {\n        event.badge.push({\n          type: 'deadline',\n          name: `${timeForEndDate(event.endDate)}`,\n        });\n      }\n      return event;\n    });\n    return result;\n  }\n\n  // 글 상세에서 추천 이벤트 조회\n  async findRecommendEventListInDetail(eventId: Types.ObjectId, eventType: string | null) {\n    const event = await this.eventModel.findRandomEventByEventType(eventId, eventType);\n    return event;\n  }\n\n  // 공모전 등록\n  async createEvent(event: IEventDocument) {\n    // TODO 사용자 정보 기입\n    //event.author = userID;\n    let image = event.imageUrl;\n    event.smallImageUrl = image.replace('event-original', 'event-thumbnail'); // 이미지 등록 시 Lambda에서 thumbnail 이미지 생성\n    const eventRecord = await this.eventModel.create(event);\n    return eventRecord;\n  }\n\n  // 공모전 수정\n  async modifyEvent(id: Types.ObjectId, event: IEventDocument) {\n    // TODO 공모전 권한 관리\n    // if (id.toString() !== tokenEventId.toString())\n    //   throw new CustomError('NotAuthenticatedError', 401, 'Event does not match');\n    const eventRecord = await this.eventModel.modifyEvent(id, event);\n    return eventRecord;\n  }\n\n  // 공모전 삭제\n  async deleteEvent(id: Types.ObjectId) {\n    // TODO 공모전 권한 관리\n    // if (id.toString() !== tokenEventId.toString())\n    //   throw new CustomError('NotAuthenticatedError', 401, 'Event does not match');\n    await this.eventModel.deleteEvent(id);\n  }\n}\n"]}