{"version":3,"file":"event.js","sourceRoot":"/","sources":["schedule/event.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gEAAqC;AAErC,2CAA8D;AAC9D,yDAA8E;AAC9E,yCAAsD;AACtD;;EAEE;AAEF,QAAQ;AACR,SAAe,gBAAgB;;;;;;yBAEzB,CAAA,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,CAAA,EAArC,wBAAqC;oBACjC,IAAI,GAAG,IAAI,uBAAQ,CAAC,cAAc,EAAE,CAAC;oBAC3C,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;oBACd,IAAI,CAAC,EAAE,GAAG,YAAY,CAAC;oBAEX,qBAAM,uBAAQ,CAAC,WAAW,CAAC,IAAI,EAAE;;;;;;4CACrC,oBAAoB,GAAG,IAAI,oBAAY,CAAC,aAAU,EAAE,6BAAkB,CAAC,CAAC;4CAC9E,qBAAM,oBAAoB,CAAC,wBAAwB,EAAE,EAAA;;4CAArD,SAAqD,CAAC;;;;;yBACvD,CAAC,EAAA;;oBAHI,GAAG,GAAG,SAGV;;;;;;CAEL;AAEQ,4CAAgB","sourcesContent":["import schedule from 'node-schedule';\nimport { Notification as NotificationModel } from '../models/Notification';\nimport { EventService, PostService } from '../services/index';\nimport { Advertisement as AdvertisementModel } from '../models/Advertisement';\nimport { Event as EventModel } from '../models/Event';\n/*\n  글에 관련된 Schedule을 정의한다.\n*/\n\n// 자동 마감\nasync function eventAutoClosing() {\n  // 프로덕션 환경에서만 실행\n  if (process.env.NODE_ENV === 'production') {\n    const rule = new schedule.RecurrenceRule();\n    rule.hour = 0;\n    rule.tz = 'Asia/Seoul';\n\n    const job = await schedule.scheduleJob(rule, async function () {\n      const EventServiceInstance = new EventService(EventModel, AdvertisementModel);\n      await EventServiceInstance.updateClosedAfterEndDate();\n    });\n  }\n}\n\nexport { eventAutoClosing };\n"]}