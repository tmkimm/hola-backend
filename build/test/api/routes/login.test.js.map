{"version":3,"file":"login.test.js","sourceRoot":"/","sources":["test/api/routes/login.test.ts"],"names":[],"mappings":"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","sourcesContent":["import request from 'supertest';\nimport mongoose from 'mongoose';\nimport 'regenerator-runtime/runtime';\nimport jwt from 'jsonwebtoken';\nimport server from '../../../app';\nimport config from '../../../config/index';\nimport mockData from '../../mockData';\n\nbeforeAll(async () => {\n  await mongoose.connect(process.env.MONGODB_TEST_URI! as string, {\n    useNewUrlParser: true,\n    useUnifiedTopology: true,\n    useCreateIndex: true,\n    useFindAndModify: false,\n    autoIndex: false,\n  });\n});\n\nafterAll(async () => {\n  await mongoose.disconnect();\n  await mongoose.connection.close();\n  await server.close();\n});\n\nconst isAccessTokenValid = async (accessToken: string): Promise<boolean> => {\n  try {\n    const decodedUser = await jwt.verify(accessToken, config.jwtSecretKey);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\ndescribe('POST /api/login/signup', () => {\n  it('닉네임이 중복되었을 경우 200 응답', async () => {\n    const res = await request(server)\n      .post('/api/login/signup')\n      .type('application/json')\n      .send({ nickName: mockData.DuplicateNickname });\n    expect(res.status).toBe(200);\n    expect(res.body.isExists).toEqual(true);\n  });\n\n  it('사용자 ID가 올바르지 않을 경우 404 응답', async () => {\n    const res = await request(server)\n      .post('/api/login/signup')\n      .type('application/json')\n      .send({ id: mockData.InvalidUserId });\n    expect(res.status).toBe(404);\n  });\n\n  it('성공시 발급된 Access Token이 유효한지 체크 응답', async () => {\n    const res = await request(server)\n      .post('/api/login/signup')\n      .type('application/json')\n      .send({ id: '61442c0e97ce44432e9d5f2d' });\n\n    expect(res.status).toBe(200);\n    await expect(await isAccessTokenValid(res.body.accessToken)).toEqual(true);\n  });\n});\n\ndescribe('POST /api/login', () => {\n  it('구글 로그인 시 올바른 Oauth2.0 token이 아니면 400 응답', async () => {\n    const res = await request(server)\n      .post('/api/login')\n      .type('application/json')\n      .send({ loginType: 'google', code: mockData.InvalidOauthToken });\n    expect(res.status).toBe(400);\n  });\n  it('깃허브 로그인 시 올바른 Oauth2.0 token이 아니면 400 응답', async () => {\n    const res = await request(server)\n      .post('/api/login')\n      .type('application/json')\n      .send({ loginType: 'github', code: mockData.InvalidOauthToken });\n    expect(res.status).toBe(400);\n  });\n  it('카카오 로그인 시 올바른 Oauth2.0 token이 아니면 400 응답', async () => {\n    const res = await request(server)\n      .post('/api/login')\n      .type('application/json')\n      .send({ loginType: 'kakao', code: mockData.InvalidOauthToken });\n    expect(res.status).toBe(400);\n  });\n\n  it('로그인 성공 시 발급된 Access Token이 유효한지 체크', async () => {\n    const res = await request(server).post('/api/login').type('application/json').send({ loginType: 'guest' });\n    expect(res.status).toBe(200);\n    await expect(await isAccessTokenValid(res.body.accessToken)).toEqual(true);\n  });\n});\n"]}