{"version":3,"file":"comment.test.js","sourceRoot":"/","sources":["test/api/routes/comment.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { IPostDocument } from '../../../models/Post';\nimport request from 'supertest';\nimport 'regenerator-runtime/runtime';\nimport mongoose from 'mongoose';\nimport server from '../../../app';\nimport 'dotenv/config';\nimport mockData from '../../mockData';\n\nlet accessToken: string;\nlet newCommentId: string;\nlet commentData: any;\n\nconst getCommentBody = async (): Promise<any> => {\n  const result = await request(server).get('/api/posts?language=react').type('application/json');\n  return {\n    postId: result.body[0]._id,\n    content: mockData.CommentContent,\n  };\n};\n\nconst getAccessToken = async (): Promise<string> => {\n  const result = await request(server).post('/api/login').type('application/json').send({ loginType: 'guest' });\n  return result.body.accessToken;\n};\n\nbeforeAll(async () => {\n  await mongoose.connect(process.env.MONGODB_TEST_URI! as string, {\n    useNewUrlParser: true,\n    useUnifiedTopology: true,\n    useCreateIndex: true,\n    useFindAndModify: false,\n    autoIndex: false,\n  });\n\n  // accessToken 발급\n  accessToken = await getAccessToken();\n  commentData = await getCommentBody();\n});\n\nafterAll(async () => {\n  await mongoose.disconnect();\n  await mongoose.connection.close();\n  await server.close();\n});\n\ndescribe('POST /api/posts/comments', () => {\n  it('access token이 유효하지 않을 경우 401 응답', async () => {\n    const res = await request(server)\n      .post('/api/posts/comments')\n      .type('application/json')\n      .send(commentData)\n      .set('Authorization', mockData.InvalidAccessToken);\n    expect(res.status).toBe(401);\n  });\n\n  it('댓글 등록 성공 시 201 응답', async () => {\n    const res = await request(server)\n      .post('/api/posts/comments')\n      .type('application/json')\n      .send(commentData)\n      .set('Authorization', `Bearer ${accessToken}`);\n    expect(res.status).toBe(201);\n    newCommentId = res.body.comments[res.body.comments.length - 1]._id;\n  });\n});\n\ndescribe(\"PATCH /api/posts/comments'\", () => {\n  it('댓글 수정 성공 시 201 응답', async () => {\n    const res = await request(server)\n      .patch(`/api/posts/comments/${newCommentId}`)\n      .type('application/json')\n      .send(commentData)\n      .set('Authorization', `Bearer ${accessToken}`);\n    expect(res.status).toBe(200);\n  });\n});\n\ndescribe('DELETE /api/posts/comments/:id', () => {\n  it('정상 삭제 시 204 응답', async () => {\n    const result = await request(server)\n      .delete(`/api/posts/comments/${newCommentId}`)\n      .set('Authorization', `Bearer ${accessToken}`);\n    expect(result.status).toBe(204);\n  });\n});\n\ndescribe('GET /api/posts/comments/:id', () => {\n  it('정상 조회 시 200번 응답', async () => {\n    const result = await request(server).get(`/api/posts/comments/${commentData.postId}`);\n    expect(result.status).toBe(200);\n  });\n  it('댓글 필수 필드 확인', async () => {\n    const result = await request(server).get(`/api/posts/comments/${commentData.postId}`);\n    const requiredField = [`_id`, `author.nickName`, `author.image`];\n    result.body.comments.forEach((v: IPostDocument) => {\n      requiredField.forEach((field) => {\n        expect(v).toHaveProperty(field);\n      });\n    });\n  });\n});\n"]}