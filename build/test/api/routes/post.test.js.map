{"version":3,"file":"post.test.js","sourceRoot":"/","sources":["test/api/routes/post.test.ts"],"names":[],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\r\nimport request from 'supertest';\r\nimport { IPostDocument } from '../../../models/Post';\r\nimport 'regenerator-runtime/runtime';\r\nimport server from '../../../app';\r\nimport mockData from '../../mockData';\r\n\r\nlet accessToken: string;\r\nlet newPostId: string;\r\nconst createPostData = {\r\n  language: mockData.PostLanguage,\r\n  title: mockData.PostTitle,\r\n  content: mockData.PostContent,\r\n};\r\n\r\nconst getAccessToken = async (): Promise<string> => {\r\n  const result = await request(server).post('/api/login').type('application/json').send({ loginType: 'guest' });\r\n  return result.body.accessToken;\r\n};\r\n\r\nbeforeAll(async () => {\r\n  await mongoose.connect(process.env.MONGODB_TEST_URI! as string, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n    useCreateIndex: true,\r\n    useFindAndModify: false,\r\n    autoIndex: false,\r\n  });\r\n\r\n  // accessToken 발급\r\n  accessToken = await getAccessToken();\r\n});\r\n\r\nafterAll(async () => {\r\n  await mongoose.disconnect();\r\n  await mongoose.connection.close();\r\n  await server.close();\r\n});\r\n\r\ndescribe('POST /api/posts', () => {\r\n  it('access token이 유효하지 않을 경우 401 응답', async () => {\r\n    const res = await request(server)\r\n      .post('/api/posts')\r\n      .type('application/json')\r\n      .send(createPostData)\r\n      .set('Authorization', mockData.InvalidAccessToken);\r\n    expect(res.status).toBe(401);\r\n  });\r\n\r\n  it('글 등록 성공 시 201 응답', async () => {\r\n    const res = await request(server)\r\n      .post('/api/posts')\r\n      .type('application/json')\r\n      .send(createPostData)\r\n      .set('Authorization', `Bearer ${accessToken}`);\r\n    expect(res.status).toBe(201);\r\n    newPostId = res.body._id;\r\n  });\r\n});\r\n\r\ndescribe('PATCH /api/posts', () => {\r\n  it('글 수정 성공 시 201 응답', async () => {\r\n    const res = await request(server)\r\n      .patch(`/api/posts/${newPostId}`)\r\n      .type('application/json')\r\n      .send(createPostData)\r\n      .set('Authorization', `Bearer ${accessToken}`);\r\n    expect(res.status).toBe(200);\r\n  });\r\n});\r\n\r\ndescribe('GET /api/posts/:id', () => {\r\n  it('글 id가 존재하지 않을 경우 404 응답', async () => {\r\n    const result = await request(server).get(`/api/posts/${mockData.InvalidPostId}`);\r\n    expect(result.status).toBe(404);\r\n  });\r\n\r\n  it('신규 등록한 글 상세 정상 조회', async () => {\r\n    const post = await request(server).get(`/api/posts/${newPostId}`);\r\n    expect(post.status).toBe(200);\r\n  });\r\n\r\n  it('글 필수 필드 존재하는지 확인', async () => {\r\n    const post = await request(server).get(`/api/posts/${newPostId}`);\r\n    const requiredField = [`title`, `content`, `language`, `isClosed`, `createdAt`, `likes`, `views`, `_id`];\r\n    requiredField.forEach((v) => {\r\n      expect(post.body).toHaveProperty(v);\r\n    });\r\n  });\r\n});\r\n\r\ndescribe('POST /api/posts/likes', () => {\r\n  it('좋아요 추가 성공 시 201 응답', async () => {\r\n    const res = await request(server)\r\n      .post('/api/posts/likes')\r\n      .type('application/json')\r\n      .send({ postId: newPostId })\r\n      .set('Authorization', `Bearer ${accessToken}`);\r\n    expect(res.status).toBe(201);\r\n    expect(res.body.likeUsers).toBeDefined();\r\n  });\r\n});\r\n\r\ndescribe('DELETE /api/posts/likes', () => {\r\n  it('좋아요 삭제 성공 시 201 응답', async () => {\r\n    const res = await request(server)\r\n      .delete(`/api/posts/likes/${newPostId}`)\r\n      .type('application/json')\r\n      .set('Authorization', `Bearer ${accessToken}`);\r\n    expect(res.status).toBe(201);\r\n    expect(res.body.likeUsers).toBeDefined();\r\n  });\r\n});\r\n\r\ndescribe('DELETE /api/posts/:id', () => {\r\n  it('글 id가 존재하지 않을 경우 404 응답', async () => {\r\n    const result = await request(server).delete(`/api/posts/${mockData.InvalidPostId}`);\r\n    expect(result.status).toBe(404);\r\n  });\r\n  it('정상 삭제 시 204 응답', async () => {\r\n    const result = await request(server)\r\n      .delete(`/api/posts/${newPostId}`)\r\n      .set('Authorization', `Bearer ${accessToken}`);\r\n    expect(result.status).toBe(204);\r\n  });\r\n});\r\n\r\ndescribe('GET /api/posts', () => {\r\n  it('글 리스트 정상 조회 시 200 응답', async () => {\r\n    const result = await request(server).get('/api/posts');\r\n    expect(result.status).toBe(200);\r\n  });\r\n\r\n  it('필수 필드 존재하는지 확인', async () => {\r\n    const post = await request(server).get(`/api/posts`);\r\n    const requiredField: string[] = [`title`, `language`, `isClosed`, `likes`, `views`, `_id`];\r\n    post.body.forEach((v: IPostDocument) => {\r\n      requiredField.forEach((field) => {\r\n        expect(v).toHaveProperty(field);\r\n      });\r\n    });\r\n  });\r\n});\r\n"]}