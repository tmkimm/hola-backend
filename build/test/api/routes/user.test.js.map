{"version":3,"file":"user.test.js","sourceRoot":"/","sources":["test/api/routes/user.test.ts"],"names":[],"mappings":"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","sourcesContent":["import request from 'supertest';\r\nimport 'regenerator-runtime/runtime';\r\nimport mongoose from 'mongoose';\r\nimport jwt from 'jsonwebtoken';\r\nimport server from '../../../app';\r\nimport config from '../../../config/index';\r\nimport mockData from '../../mockData';\r\n\r\nlet accessToken: string;\r\nconst isAccessTokenValid = async (token: string): Promise<boolean> => {\r\n  try {\r\n    const decodedUser = await jwt.verify(token, config.jwtSecretKey);\r\n    return true;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n};\r\n\r\nbeforeAll(async () => {\r\n  await mongoose.connect(process.env.MONGODB_TEST_URI! as string, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n    useCreateIndex: true,\r\n    useFindAndModify: false,\r\n    autoIndex: false,\r\n  });\r\n\r\n  // 테스트를 위한 accessToken 발급\r\n  const res = await request(server).post('/api/login').type('application/json').send({ loginType: 'guest' });\r\n  accessToken = res.body.accessToken;\r\n});\r\n\r\nafterAll(async () => {\r\n  await mongoose.disconnect();\r\n  await mongoose.connection.close();\r\n  await server.close();\r\n});\r\n\r\ndescribe('POST /api/users/sign', () => {\r\n  it('s3 pre-sign url 정상 발급', async () => {\r\n    const res = await request(server)\r\n      .post('/api/users/sign')\r\n      .type('application/json')\r\n      .send({ fileName: mockData.DuplicateNickname });\r\n    expect(res.status).toBe(200);\r\n    expect(res.body.preSignUrl).toBeDefined();\r\n  });\r\n});\r\n\r\ndescribe('PATCH /api/users/:id', () => {\r\n  it('사용자 id가 존재하지 않으면 404 응답', async () => {\r\n    const res = await request(server).patch(`/api/users/${mockData.InvalidUserId}`).type('application/json');\r\n    expect(res.status).toBe(404);\r\n  });\r\n\r\n  it('access token이 유효하지 않으면 401 응답', async () => {\r\n    const res = await request(server)\r\n      .patch('/api/users/61442c0e97ce44432e9d5f2d')\r\n      .type('application/json')\r\n      .set('Authorization', mockData.InvalidAccessToken);\r\n    expect(res.status).toBe(401);\r\n  });\r\n\r\n  it('닉네임이 중복되었을 경우 200 응답', async () => {\r\n    const res = await request(server)\r\n      .patch('/api/users/61442c0e97ce44432e9d5f2d')\r\n      .type('application/json')\r\n      .send({ nickName: 'Hola' })\r\n      .set('Authorization', `Bearer ${accessToken}`);\r\n    expect(res.status).toBe(200);\r\n    expect(res.body.isExists).toEqual(true);\r\n  });\r\n\r\n  it('내 정보 수정 완료 시 새로 발급된 Access Token이 유효한지 체크', async () => {\r\n    const res = await request(server)\r\n      .patch('/api/users/61442c0e97ce44432e9d5f2d')\r\n      .type('application/json')\r\n      .send({ likeLanguages: mockData.PostLanguage })\r\n      .set('Authorization', `Bearer ${accessToken}`);\r\n    expect(res.status).toBe(200);\r\n    await expect(await isAccessTokenValid(res.body.accessToken)).toEqual(true);\r\n  });\r\n});\r\n\r\ndescribe('DELETE /api/users/:id', () => {\r\n  it('회원 탈퇴 시 access token이 유효하지 않으면 401 응답', async () => {\r\n    const res = await request(server)\r\n      .delete('/api/users/61442c0e97ce44432e9d5f2d')\r\n      .type('application/json')\r\n      .set('Authorization', mockData.InvalidAccessToken);\r\n    expect(res.status).toBe(401);\r\n  });\r\n});\r\n\r\ndescribe('GET /api/users/likes/:id', () => {\r\n  it('정상적으로 조회', async () => {\r\n    const res = await request(server)\r\n      .get('/api/users/likes/61442c0e97ce44432e9d5f2d')\r\n      .type('application/json')\r\n      .set('Authorization', `Bearer ${accessToken}`);\r\n    expect(res.status).toBe(200);\r\n    expect(res.body.likePosts).toBeDefined();\r\n  });\r\n});\r\n\r\ndescribe('GET /api/users/read-list/:id', () => {\r\n  it('정상적으로 조회', async () => {\r\n    const res = await request(server)\r\n      .get('/api/users/read-list/61442c0e97ce44432e9d5f2d')\r\n      .type('application/json')\r\n      .set('Authorization', `Bearer ${accessToken}`);\r\n    expect(res.status).toBe(200);\r\n    expect(res.body.readList).toBeDefined();\r\n  });\r\n});\r\n\r\ndescribe('GET /api/users/myposts/:id', () => {\r\n  it('정상적으로 조회', async () => {\r\n    const res = await request(server)\r\n      .get('/api/users/myposts/61442c0e97ce44432e9d5f2d')\r\n      .type('application/json')\r\n      .set('Authorization', `Bearer ${accessToken}`);\r\n    expect(res.status).toBe(200);\r\n  });\r\n});\r\n"]}