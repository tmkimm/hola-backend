{"version":3,"file":"ReadPosts.js","sourceRoot":"/","sources":["models/ReadPosts.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAAuD;AAcvD,IAAM,eAAe,GAAG,IAAI,iBAAM,CAChC;IACE,MAAM,EAAE,EAAE,IAAI,EAAE,gBAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE;IAC7C,MAAM,EAAE,EAAE,IAAI,EAAE,gBAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE;CAC9C,EACD;IACE,UAAU,EAAE,IAAI;CACjB,CACF,CAAC;AAEF,eAAe,CAAC,OAAO,CAAC,gBAAgB,GAAG,UAAgB,MAAM,EAAE,MAAM;;;;wBACvE,qBAAM,IAAI,CAAC,SAAS,CAClB,EAAE,MAAM,QAAA,EAAE,MAAM,QAAA,EAAE,EAClB;wBACE,YAAY,EAAE;4BACZ,MAAM,QAAA;4BACN,MAAM,QAAA;yBACP;qBACF,EACD,EAAE,MAAM,EAAE,IAAI,EAAE,CACjB,EAAA;;oBATD,SASC,CAAC;;;;;CACH,CAAC;AAEF,IAAM,SAAS,GAAG,IAAA,gBAAK,EAAsC,WAAW,EAAE,eAAe,CAAC,CAAC;AAClF,8BAAS","sourcesContent":["import { Model, Schema, Types, model } from 'mongoose';\n\nexport interface IReadPosts {\n  viewDate: Date;\n  userId: Types.ObjectId;\n  postId: Types.ObjectId;\n}\n\nexport interface IReadPostsDocument extends IReadPosts, Document {}\n\nexport interface IReadPostsModel extends Model<IReadPostsDocument> {\n  insertIfNotExist: (postId: Types.ObjectId, userId: Types.ObjectId) => void;\n}\n\nconst ReadPostsSchema = new Schema<IReadPostsDocument>(\n  {\n    userId: { type: Types.ObjectId, ref: 'User' },\n    postId: { type: Types.ObjectId, ref: 'Post' },\n  },\n  {\n    timestamps: true,\n  }\n);\n\nReadPostsSchema.statics.insertIfNotExist = async function (postId, userId) {\n  await this.updateOne(\n    { postId, userId },\n    {\n      $setOnInsert: {\n        userId,\n        postId,\n      },\n    },\n    { upsert: true }\n  );\n};\n\nconst ReadPosts = model<IReadPostsDocument, IReadPostsModel>('ReadPosts', ReadPostsSchema);\nexport { ReadPosts };\n"]}