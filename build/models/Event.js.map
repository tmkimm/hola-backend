{"version":3,"file":"Event.js","sourceRoot":"/","sources":["models/Event.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAAuD;AACvD,+CAA8C;AA0P9C,IAAM,WAAW,GAAG,IAAI,iBAAM,CAC5B;IACE,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IACvC,OAAO,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IACzC,SAAS,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IAC3C,eAAe,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IACjD,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IACvC,YAAY,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IAC9C,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IACtC,QAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IAC1C,aAAa,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IAC/C,SAAS,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE;IACzC,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE;IACvC,SAAS,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE;IACzC,MAAM,EAAE,EAAE,IAAI,EAAE,gBAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE;IAC9D,SAAS,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE;IAC5C,QAAQ,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE;IAC3C,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,EAAE;IACnC,UAAU,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,EAAE;IACxC,WAAW,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE;IAC5C,MAAM,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE;IACzC,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,KAAK;CAC9C,EACD;IACE,UAAU,EAAE,IAAI;CACjB,CACF,CAAC;AAEF,WAAW,CAAC,OAAO,CAAC,WAAW,GAAG,UAAgB,EAAE,EAAE,KAAK;;;;;wBACrC,qBAAM,IAAI,CAAC,iBAAiB,CAAC,EAAE,EAAE,KAAK,EAAE;wBAC1D,GAAG,EAAE,IAAI;qBACV,CAAC,EAAA;;oBAFI,WAAW,GAAG,SAElB;oBACF,sBAAO,WAAW,EAAC;;;;CACpB,CAAC;AAEF,WAAW,CAAC,OAAO,CAAC,WAAW,GAAG,UAAgB,EAAE;;;;wBAClD,qBAAM,IAAI,CAAC,gBAAgB,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAA;;oBAA7D,SAA6D,CAAC;;;;;CAC/D,CAAC;AAEF,cAAc;AACd,IAAM,kBAAkB,GAAG,UAAC,SAAwB,EAAE,SAAwB;IAC5E,QAAQ;IACR,IAAM,KAAK,GAAQ,EAAE,CAAC;IAEtB,IAAI,OAAO,SAAS,KAAK,QAAQ,IAAI,SAAS,IAAI,SAAS,IAAI,KAAK;QAAE,KAAK,CAAC,eAAe,GAAG,SAAS,CAAC;IAExG,KAAK,CAAC,QAAQ,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC;IAChC,KAAK,CAAC,SAAS,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC;IAEjC,2DAA2D;IAC3D,IAAI,OAAO,SAAS,KAAK,QAAQ,IAAI,SAAS,IAAI,SAAS,IAAI,KAAK,EAAE;QACpE,KAAK,CAAC,SAAS,GAAG,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC;KACtC;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,aAAa;AACb,WAAW,CAAC,OAAO,CAAC,mBAAmB,GAAG,UACxC,IAAmB,EACnB,IAAmB,EACnB,SAAwB,EACxB,MAAqB,EACrB,SAAwB;;;;;;oBAEpB,SAAS,GAAG,EAAE,CAAC;oBACnB,UAAU;oBACV,IAAI,IAAI,EAAE;wBACF,oBAAkB,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;wBAC/C,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,UAAC,KAAa;4BAC/C,OAAO,iBAAe,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,iBAAe,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;wBAChH,CAAC,CAAC,CAAC;wBACH,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;qBAC9B;yBAAM;wBACL,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;qBAC7B;oBACK,KAAK,GAAG,kBAAkB,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;oBAEjD,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC;oBACvB,UAAU,GAAG,CAAC,CAAC;oBACnB,IAAI,IAAA,mBAAQ,EAAC,IAAI,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;wBAAE,UAAU,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,YAAY,CAAC;oBACjF,eAAe,GAAG,EAAE,CAAC;oBAC3B,IAAI,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;wBACxC,eAAe,CAAC,IAAI,CAAC;4BACnB,OAAO,EAAE;gCACP,KAAK,EAAE,oBAAoB;gCAC3B,IAAI,EAAE;oCACJ,KAAK,EAAE,MAAM;oCACb,IAAI,EAAE;wCACJ,QAAQ,EAAE,GAAG;qCACd;iCACF;6BACF;yBACF,CAAC,CAAC;qBACJ;oBACK,SAAS,mCAAO,eAAe,UAAE,EAAE,MAAM,EAAE,KAAK,EAAE,SAAC,CAAC;oBAE3C,qBAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,EAAA;;oBAA/G,MAAM,GAAG,SAAsG;oBACrH,sBAAO,MAAM,EAAC;;;;CACf,CAAC;AAEF,cAAc;AACd,WAAW,CAAC,OAAO,CAAC,iBAAiB,GAAG,UACtC,IAAY,EACZ,KAAa,EACb,SAAwB,EACxB,MAAqB;;;;;;oBAEf,KAAK,GAAG,kBAAkB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;oBAC5C,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;oBACxC,OAAO,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;oBACzC,KAAK,CAAC,SAAS,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;oBAE9C,eAAe,GAAG,EAAE,CAAC;oBAC3B,IAAI,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;wBACxC,eAAe,CAAC,IAAI,CAAC;4BACnB,OAAO,EAAE;gCACP,KAAK,EAAE,oBAAoB;gCAC3B,IAAI,EAAE;oCACJ,KAAK,EAAE,MAAM;oCACb,IAAI,EAAE;wCACJ,QAAQ,EAAE,GAAG;qCACd;iCACF;6BACF;yBACF,CAAC,CAAC;qBACJ;oBACK,SAAS,mCAAO,eAAe,UAAE,EAAE,MAAM,EAAE,KAAK,EAAE,SAAC,CAAC;oBAE3C,qBAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,EAAA;;oBAA1D,MAAM,GAAG,SAAiD;oBAChE,sBAAO,MAAM,EAAC;;;;CACf,CAAC;AAEF,cAAc;AACd,WAAW,CAAC,OAAO,CAAC,UAAU,GAAG,UAAgB,SAAS,EAAE,SAAS,EAAE,MAAM;;;;;;oBACrE,KAAK,GAAG,kBAAkB,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;oBACjD,eAAe,GAAG,EAAE,CAAC;oBAC3B,IAAI,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;wBACxC,eAAe,CAAC,IAAI,CAAC;4BACnB,OAAO,EAAE;gCACP,KAAK,EAAE,oBAAoB;gCAC3B,IAAI,EAAE;oCACJ,KAAK,EAAE,MAAM;oCACb,IAAI,EAAE;wCACJ,QAAQ,EAAE,GAAG;qCACd;iCACF;6BACF;yBACF,CAAC,CAAC;qBACJ;oBAEK,SAAS,mCACV,eAAe;wBAClB,EAAE,MAAM,EAAE,KAAK,EAAE;wBACjB;4BACE,QAAQ,EAAE;gCACR,KAAK,EAAE,CAAC;gCACR,KAAK,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE;6BAChC;yBACF;6BACF,CAAC;oBACF,SAAS,CAAC,IAAI,CAAC;wBACb,MAAM,EAAE,YAAY;qBACrB,CAAC,CAAC;oBAEiB,qBAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAA;;oBAA7C,MAAM,GAAQ,SAA+B;oBACnD,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC;wBAAE,sBAAO,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,EAAC;;wBACxD,sBAAO,CAAC,EAAC;;;;;CACf,CAAC;AAEF,YAAY;AACZ,uBAAuB;AACvB,WAAW,CAAC,OAAO,CAAC,sBAAsB,GAAG,UAAgB,YAA8B;;;;;;oBACrF,KAAK,GAAG,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;oBAC3C,KAAK,CAAC,GAAG,GAAG,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC;oBAC/B,KAAK,GAAG,EAAE,GAAG,YAAY,CAAC,MAAM,CAAC;oBAC/B,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;oBACzB,KAAK,CAAC,SAAS,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,GAAG,CAAC,EAAE,CAAC;oBAClD,qBAAM,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;6BAClC,MAAM,CAAC,oEAAoE,CAAC;6BAC5E,IAAI,CAAC,QAAQ,CAAC;6BACd,KAAK,CAAC,KAAK,CAAC;6BACZ,IAAI,EAAE,EAAA;;oBAJH,MAAM,GAAG,SAIN;oBACT,sBAAO,MAAM,EAAC;;;;CACf,CAAC;AAEF,uBAAuB;AACvB,WAAW,CAAC,OAAO,CAAC,0BAA0B,GAAG,UAAgB,OAAuB,EAAE,SAAwB;;;;;;oBAC1G,KAAK,GAAG,kBAAkB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;oBAClD,KAAK,CAAC,GAAG,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC,CAAC,gBAAgB;oBAEhC,qBAAM,IAAI,CAAC,SAAS,CAAC;4BACjC,EAAE,MAAM,EAAE,KAAK,EAAE;4BACjB,EAAE,OAAO,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE;4BACxB;gCACE,QAAQ,EAAE;oCACR,GAAG,EAAE,CAAC;oCACN,KAAK,EAAE,CAAC;oCACR,SAAS,EAAE,CAAC;oCACZ,QAAQ,EAAE,CAAC;oCACX,aAAa,EAAE,CAAC;oCAChB,SAAS,EAAE,CAAC;oCACZ,OAAO,EAAE,CAAC;oCACV,KAAK,EAAE,CAAC;iCACT;6BACF;yBACF,CAAC,EAAA;;oBAfI,KAAK,GAAG,SAeZ;oBACF,sBAAO,KAAK,EAAC;;;;CACd,CAAC;AAEF,IAAM,KAAK,GAAG,IAAA,gBAAK,EAA8B,OAAO,EAAE,WAAW,CAAC,CAAC;AAC9D,sBAAK","sourcesContent":["import { Model, Schema, Types, model } from 'mongoose';\nimport { isNumber } from '../utills/isNumber';\n\n// #region Swagger schema - Event\n\n/**\n * @swagger\n *  components:\n *  schemas:\n *   Event:\n *     properties:\n *      _id:\n *        type: string\n *        description: 공모전 ID\n *        example: '611dbf22739c10ccdbffad39'\n *      title:\n *        type: string\n *        description: '제목'\n *        example: '인프콘 2023'\n *      content:\n *        type: string\n *        description: '내용'\n *        example: '<h1>인프콘 2023 개최!</h1>'\n *      eventType:\n *        type: string\n *        description: '공모전 구분(conference, hackathon, contest, bootcamp, others)'\n *        example: 'conference'\n *      onlineOrOffline:\n *        type: string\n *        description: 온오프라인 구분(on, off, onOff)\n *        example: 'on'\n *      place:\n *        type: string\n *        description: 장소\n *        example: '삼성동 COEX 그랜드홀룸 2F'\n *      organization:\n *        type: string\n *        description: 주최자명\n *        example: '인프런'\n *      link:\n *        type: string\n *        description: 원문 링크\n *        example: 'https://www.inflearn.com/conf/infcon-2023?gad=1&gclid=Cj0KCQjwx5qoBhDyARIsAPbMagAH6o1ODZN3niCQfLRl4NzHuxr0iTgE5RABaJ2yIWZG2m2w5lx7dxIaAnYPEALw_wcB'\n *      imageUrl:\n *        type: string\n *        description: '이미지 URL'\n *        example: 'https://hola-post-image.s3.ap-northeast-2.amazonaws.com/event-original/20221230_164934.jpg'\n *      smallImageUrl:\n *        type: string\n *        description: '이미지 URL(모바일용)'\n *        example: 'https://hola-post-image.s3.ap-northeast-2.amazonaws.com/event-thumbnail/20221230_164934.jpg'\n *      startDate:\n *        type: string\n *        description: 시작일\n *        format: date-time\n *        example: \"2023-08-15T08:30:00Z\"\n *      endDate:\n *        type: string\n *        description: 종료일\n *        format: date-time\n *        example: \"2023-08-15T08:30:00Z\"\n *      closeDate:\n *        type: string\n *        description: 모집 마감일\n *        format: date-time\n *        example: \"2023-08-01T08:30:00Z\"\n *      author:\n *        type: string\n *        description: 작성자 ID\n *        example: '63574b3b37ad67001411ba50'\n *      isDeleted:\n *        type: boolean\n *        description: 삭제 여부\n *        example: false\n *      isClosed:\n *        type: boolean\n *        description: 마감 여부\n *        example: false\n *      views:\n *        type: number\n *        description: 조회수\n *        example: 497\n *      totalLikes:\n *        type: number\n *        description: 관심 등록 수\n *        example: false\n *      description:\n *        type: string\n *        description: 공모전 설명\n *        example: '인프콘 2023'\n */\n// #endregion\n\n/**\n * @swagger\n *  components:\n *  schemas:\n *   RecommendedEvent:\n *     properties:\n *      _id:\n *        type: string\n *        description: 공모전 ID\n *        example: '611dbf22739c10ccdbffad39'\n *      title:\n *        type: string\n *        description: '제목'\n *        example: '인프콘 2023'\n *      eventType:\n *        type: string\n *        description: '공모전 구분(conference, hackathon, contest, bootcamp, others)'\n *        example: 'conference'\n *      imageUrl:\n *        type: string\n *        description: '이미지 URL'\n *        example: 'https://hola-post-image.s3.ap-northeast-2.amazonaws.com/event-original/20221230_164934.jpg'\n *      smallImageUrl:\n *        type: string\n *        description: '이미지 URL(모바일용)'\n *        example: 'https://hola-post-image.s3.ap-northeast-2.amazonaws.com/event-thumbnail/20221230_164934.jpg'\n *      startDate:\n *        type: string\n *        description: 시작일\n *        format: date-time\n *        example: \"2023-08-15T08:30:00Z\"\n *      endDate:\n *        type: string\n *        description: 종료일\n *        format: date-time\n *        example: \"2023-08-15T08:30:00Z\"\n *      views:\n *        type: number\n *        description: 조회수\n *        example: 497\n *      isAD:\n *        type: boolean\n *        description: 광고 여부\n *        example: false\n *      badge:\n *        properties:\n *          type:\n *            type: string\n *            description: 뱃지종류\n *            example: 'deadline'\n *          name:\n *            type: string\n *            description: 뱃지명\n *            example: '마감 3일전'\n */\n// #endregion\n\n/**\n * @swagger\n *  components:\n *  schemas:\n *   PostEvent:\n *     properties:\n *      title:\n *        type: string\n *        description: '제목'\n *        example: '인프콘 2023'\n *      content:\n *        type: string\n *        description: '내용'\n *        example: '<h1>인프콘 2023 개최!</h1>'\n *      eventType:\n *        type: string\n *        description: '공모전 구분(conference, hackathon, contest, bootcamp, others)'\n *        example: 'conference'\n *      onlineOrOffline:\n *        type: string\n *        description: 온오프라인 구분(on, off, onOff)\n *        example: 'on'\n *      place:\n *        type: string\n *        description: 장소\n *        example: '삼성동 COEX 그랜드홀룸 2F'\n *      organization:\n *        type: string\n *        description: 주최자명\n *        example: '인프런'\n *      link:\n *        type: string\n *        description: 원문 링크\n *        example: 'https://www.inflearn.com/conf/infcon-2023?gad=1&gclid=Cj0KCQjwx5qoBhDyARIsAPbMagAH6o1ODZN3niCQfLRl4NzHuxr0iTgE5RABaJ2yIWZG2m2w5lx7dxIaAnYPEALw_wcB'\n *      imageUrl:\n *        type: string\n *        description: '이미지 URL'\n *        example: 'https://hola-post-image.s3.ap-northeast-2.amazonaws.com/event-thumbnail/20221230_164934.jpg'\n *      startDate:\n *        type: string\n *        description: 시작일\n *        format: date-time\n *        example: \"2023-08-15T08:30:00Z\"\n *      endDate:\n *        type: string\n *        description: 종료일\n *        format: date-time\n *        example: \"2023-08-15T08:30:00Z\"\n *      closeDate:\n *        type: string\n *        description: 모집 마감일\n *        format: date-time\n *        example: \"2023-08-01T08:30:00Z\"\n */\n// #endregion\nexport interface IEvent {\n  _id: Types.ObjectId;\n  title: string;\n  content: string;\n  place: string;\n  organization: string;\n  link: string;\n  onlineOrOffline: string;\n  imageUrl: string;\n  smallImageUrl: string;\n  isDeleted: boolean;\n  isClosed: boolean;\n  startDate: Date;\n  endDate: Date;\n  closeDate: Date;\n  author: Types.ObjectId | null;\n  view: number;\n  totalLikes: number;\n  description: boolean | null;\n  isFree: boolean;\n  price: number;\n}\n\nexport interface IEventDocument extends IEvent, Document {}\n\nexport interface IEventModel extends Model<IEventDocument> {\n  deleteEvent: (id: Types.ObjectId) => void;\n  modifyEvent: (id: Types.ObjectId, event: IEventDocument) => Promise<IEventDocument[]>;\n  findEventPagination: (\n    page: string | null,\n    sort: string | null,\n    eventType: string | null,\n    search: string | null,\n    onOffLine: string | null\n  ) => Promise<IEventDocument[]>;\n  findEventCalendar: (\n    year: number,\n    month: number,\n    eventType: string | null,\n    search: string | null\n  ) => Promise<IEventDocument[]>;\n  countEvent: (eventType: string | null, onOffLine: string | null, search: string | null) => Promise<number>;\n  findRecommendEventList: (notInEventId: Types.ObjectId[]) => Promise<IEventDocument[]>;\n  findRandomEventByEventType: (eventId: Types.ObjectId, eventType: string | null) => Promise<IEventDocument[]>;\n}\n\nconst eventSchema = new Schema<IEventDocument>(\n  {\n    title: { type: String, required: true },\n    content: { type: String, required: true }, // 내용\n    eventType: { type: String, required: true }, // 공모전 구분(conference, hackathon, contest, bootcamp, others)\n    onlineOrOffline: { type: String, required: true }, // 진행방식(온라인/오프라인)\n    place: { type: String, required: true }, // 장소,\n    organization: { type: String, required: true }, // 주최자명\n    link: { type: String, required: true }, // 원문 링크\n    imageUrl: { type: String, required: true }, // 이미지 URL\n    smallImageUrl: { type: String, required: true }, // 이미지 URL(Small)\n    startDate: { type: Date, required: true }, //  시작일\n    endDate: { type: Date, required: true }, //  종료일\n    closeDate: { type: Date, required: true }, //  모집 마감일(자동 마감용도)\n    author: { type: Types.ObjectId, ref: 'User', required: false }, // 작성자\n    isDeleted: { type: Boolean, default: false }, // 삭제 여부\n    isClosed: { type: Boolean, default: false }, // 마감 여부\n    views: { type: Number, default: 0 }, // 조회수\n    totalLikes: { type: Number, default: 0 }, // 관심 등록 수\n    description: { type: String, default: null }, // 공모전 설명\n    isFree: { type: Boolean, default: false }, // 무료 여부\n    price: { type: Number, default: null }, // 금액\n  },\n  {\n    timestamps: true,\n  }\n);\n\neventSchema.statics.modifyEvent = async function (id, event) {\n  const eventRecord = await this.findByIdAndUpdate(id, event, {\n    new: true,\n  });\n  return eventRecord;\n};\n\neventSchema.statics.deleteEvent = async function (id) {\n  await this.findOneAndUpdate({ _id: id }, { isDeleted: true });\n};\n\n// 조회 query 생성\nconst makeFindEventQuery = (eventType: string | null, onOffLine: string | null) => {\n  // Query\n  const query: any = {};\n\n  if (typeof onOffLine === 'string' && onOffLine && onOffLine != 'ALL') query.onlineOrOffline = onOffLine;\n\n  query.isClosed = { $eq: false };\n  query.isDeleted = { $eq: false };\n\n  // 공모전 구분(conference, hackathon, contest, bootcamp, others)\n  if (typeof eventType === 'string' && eventType && eventType != 'ALL') {\n    query.eventType = { $eq: eventType };\n  }\n  return query;\n};\n\n// 최신, 트레딩 조회\neventSchema.statics.findEventPagination = async function (\n  page: string | null,\n  sort: string | null,\n  eventType: string | null,\n  search: string | null,\n  onOffLine: string | null\n) {\n  let sortQuery = [];\n  // Sorting\n  if (sort) {\n    const sortableColumns = ['views', 'createdAt'];\n    sortQuery = sort.split(',').filter((value: string) => {\n      return sortableColumns.indexOf(value.substr(1, value.length)) !== -1 || sortableColumns.indexOf(value) !== -1;\n    });\n    sortQuery.push('-createdAt');\n  } else {\n    sortQuery.push('createdAt');\n  }\n  const query = makeFindEventQuery(eventType, onOffLine); // 조회 query 생성\n  // Pagenation\n  const itemsPerPage = 4 * 5; // 한 페이지에 표현할 수\n  let pageToSkip = 0;\n  if (isNumber(page) && Number(page) > 0) pageToSkip = (Number(page) - 1) * itemsPerPage;\n  const aggregateSearch = [];\n  if (search && typeof search === 'string') {\n    aggregateSearch.push({\n      $search: {\n        index: 'events_text_search',\n        text: {\n          query: search,\n          path: {\n            wildcard: '*',\n          },\n        },\n      },\n    });\n  }\n  const aggregate = [...aggregateSearch, { $match: query }];\n\n  const events = await this.aggregate(aggregate).sort(sortQuery.join(' ')).skip(pageToSkip).limit(Number(itemsPerPage));\n  return events;\n};\n\n// 공모전 캘린더뷰 조회\neventSchema.statics.findEventCalendar = async function (\n  year: number,\n  month: number,\n  eventType: string | null,\n  search: string | null\n) {\n  const query = makeFindEventQuery(eventType, null); // 조회 query 생성\n  const firstDay = new Date(year, month - 1, 1);\n  const lastDay = new Date(year, month, 0);\n  query.startDate = { $gte: firstDay, $lte: lastDay };\n\n  const aggregateSearch = [];\n  if (search && typeof search === 'string') {\n    aggregateSearch.push({\n      $search: {\n        index: 'events_text_search',\n        text: {\n          query: search,\n          path: {\n            wildcard: '*',\n          },\n        },\n      },\n    });\n  }\n  const aggregate = [...aggregateSearch, { $match: query }];\n\n  const events = await this.aggregate(aggregate).sort('startDate');\n  return events;\n};\n\n// 총 Page 수 계산\neventSchema.statics.countEvent = async function (eventType, onOffLine, search) {\n  const query = makeFindEventQuery(eventType, onOffLine); // 조회 query 생성\n  const aggregateSearch = [];\n  if (search && typeof search === 'string') {\n    aggregateSearch.push({\n      $search: {\n        index: 'events_text_search',\n        text: {\n          query: search,\n          path: {\n            wildcard: '*',\n          },\n        },\n      },\n    });\n  }\n\n  const aggregate: any = [\n    ...aggregateSearch,\n    { $match: query },\n    {\n      $project: {\n        title: 1,\n        score: { $meta: 'searchScore' },\n      },\n    },\n  ];\n  aggregate.push({\n    $count: 'eventCount',\n  });\n\n  const result: any = await this.aggregate(aggregate);\n  if (result && result.length > 0) return result[0].eventCount;\n  else return 0;\n};\n\n// 추천 이벤트 조회\n// TODO startDate 조건 변경\neventSchema.statics.findRecommendEventList = async function (notInEventId: Types.ObjectId[]) {\n  let query = makeFindEventQuery(null, null); // 조회 query 생성\n  query._id = { $nin: notInEventId };\n  let limit = 10 - notInEventId.length;\n  const today = new Date();\n  query.startDate = { $gte: today.setDate(today.getDate() - 180) };\n  const events = await this.find(query)\n    .select('_id title eventType imageUrl smallImageUrl startDate endDate views')\n    .sort('-views')\n    .limit(limit)\n    .lean();\n  return events;\n};\n\n// 랜덤 이벤트 조회(글 상세에서 추천)\neventSchema.statics.findRandomEventByEventType = async function (eventId: Types.ObjectId, eventType: string | null) {\n  const query = makeFindEventQuery(eventType, null); // 조회 query 생성\n  query._id = { $ne: eventId }; // 현재 읽고 있는 글 제외\n\n  const event = await this.aggregate([\n    { $match: query },\n    { $sample: { size: 6 } },\n    {\n      $project: {\n        _id: 1,\n        title: 1,\n        eventType: 1,\n        imageUrl: 1,\n        smallImageUrl: 1,\n        startDate: 1,\n        endDate: 1,\n        views: 1,\n      },\n    },\n  ]);\n  return event;\n};\n\nconst Event = model<IEventDocument, IEventModel>('Event', eventSchema);\nexport { Event };\n"]}