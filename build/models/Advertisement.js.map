{"version":3,"file":"Advertisement.js","sourceRoot":"/","sources":["models/Advertisement.ts"],"names":[],"mappings":"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","sourcesContent":["import { Model, Schema, Types, model } from 'mongoose';\n\n// #region Swagger schema - Advertisement\n\n/**\n * @swagger\n *  components:\n *  schemas:\n *   Advertisement:\n *     properties:\n *      _id:\n *        type: string\n *        description: 광고 ID\n *        example: '611dbf22739c10ccdbffad39'\n *      campaignId:\n *        type: string\n *        description: 캠페인 ID\n *        example: '611dbf22739c10ccdbffad39'\n *      advertisementType:\n *        type: string\n *        description: 광고유형(banner 메인 배너, event 공모전, eventBanner 공모전 배너, modalBanner 모달 상세 배너, postBlock 모집 블럭)\n *        example: banner\n *      startDate:\n *        type: string\n *        description: 시작일\n *        format: date-time\n *        example: \"2023-08-15T08:30:00Z\"\n *      endDate:\n *        type: string\n *        description: 종료일\n *        format: date-time\n *        example: \"2023-08-15T08:30:00Z\"\n *      realEndDate:\n *        type: string\n *        description: 실제 종료일(종료 처리된 날짜)\n *        format: date-time\n *        example: \"2023-08-15T08:30:00Z\"\n *      advertisementStatus:\n *        type: string\n *        description: 상태(before 진행전, active 진행중, close종료)\n *        example: 'active'\n *      link:\n *        type: string\n *        description: '링크'\n *        example: 'https://holaworld.io/study/650bc1d5c003f400133ac1ea'\n *      linkOpenType:\n *        type: string\n *        description: 링크 오픈 유형(blank 새탭, self 현재탭\u001b)\n *        example: 'blank'\n *      imageUrl:\n *        type: string\n *        description: 이미지 URL(배너광고)\n *        example: 'https://holaworld.io/images/logo/hola_logo_y.png'\n *      smallImageUrl:\n *        type: string\n *        description: 모바일용 이미지 URL(배너광고)\n *        example: 'https://holaworld.io/images/logo/hola_logo_y.png'\n *      mainCopy:\n *        type: string\n *        description: 메인 카피 (배너광고)\n *        example: 'Hola!는 봄맞이 새단장 완료'\n *      subCopy:\n *        type: string\n *        description: '서브 카피(배너광고)'\n *        example: '더 편해진 올라! 모르는 사람 없게 해주세요'\n *      bannerSequence:\n *        type: number\n *        description: '배너 순번(0 ~ 999 자유 지정)'\n *        example: 3\n *      eventId:\n *        type: string\n *        description: 공모전 id(공모전 광고)\n *        example: '611dbf22739c10ccdbffad39'\n */\n// #endregion\n\nexport interface IAdvertisement {\n  _id: Types.ObjectId;\n  campaignId: Types.ObjectId;\n  advertisementType: string;\n  startDate: Date;\n  endDate: Date;\n  realEndDate: Date;\n  advertisementStatus: string;\n  link: string;\n  linkOpenType: string;\n  imageUrl: string;\n  smallImageUrl: string;\n  mainCopy: string;\n  subCopy: string;\n  bannerSequence: number;\n  views: number;\n  eventId: Types.ObjectId;\n}\n\nexport interface IAdvertisementDocument extends IAdvertisement, Document {}\n\nexport interface IAdvertisementModel extends Model<IAdvertisementDocument> {\n  findAdvertisement: (id: Types.ObjectId) => Promise<IAdvertisementDocument>;\n  findAdvertisementByEventId: (eventId: Types.ObjectId) => Promise<IAdvertisementDocument[]>;\n  findAdvertisementInCampaign: (campaignId: Types.ObjectId) => Promise<IAdvertisementDocument[]>;\n  findAdvertisementByType: (campaignId: Types.ObjectId, advertisementType: string) => Promise<IAdvertisementDocument[]>;\n  findActiveADListInEvent: () => Promise<IAdvertisementDocument[]>;\n  deleteAdvertisement: (id: Types.ObjectId) => void;\n  modifyAdvertisement: (id: Types.ObjectId, advertisement: IAdvertisementDocument) => Promise<IAdvertisementDocument[]>;\n  findActiveBanner: (bannerType: 'banner' | 'eventBanner') => Promise<IAdvertisementDocument[]>;\n  updateClosedAfterEndDate: () => void;\n}\n\nconst advertisementSchema = new Schema<IAdvertisementDocument>(\n  {\n    campaignId: { type: Types.ObjectId, ref: 'Campaign', required: true }, // 캠페인 Id\n    advertisementType: { type: String, required: true }, // 광고유형(banner 메인 배너, event 공모전, eventBanner 공모전 배너, modalBanner 모달 상세 배너, postBlock 모집 블럭)\n    startDate: { type: Date, required: true }, //  시작일\n    endDate: { type: Date, required: false }, //  종료일\n    realEndDate: { type: Date, required: false }, //  실제 종료일(종료 처리된 날짜)\n    advertisementStatus: { type: String, default: 'active' }, // 상태(before 진행전, active 진행중, close종료)\n    link: { type: String, required: true }, // 링크\n    linkOpenType: { type: String, defulat: 'blank' }, // 링크 오픈 유형(blank 새탭, self 현재탭\u001b)\n    imageUrl: { type: String, required: false }, // 이미지 URL(배너광고)\n    smallImageUrl: { type: String, required: false }, // 모바일 이미지 URL(배너광고)\n    mainCopy: { type: String, required: false }, // 메인 카피 (배너광고)\n    subCopy: { type: String, required: false }, // 서브 카피(배너광고)\n    bannerSequence: { type: Number, default: 999 }, // 배너 순번(배너광고)\n    views: { type: Number, default: 0 }, // 조회수\n    eventId: { type: Types.ObjectId, ref: 'Event', required: false }, // 이벤트 Id(공모전 광고)\n  },\n  {\n    timestamps: true,\n  }\n);\n\n// 광고 상세 조회\nadvertisementSchema.statics.findAdvertisement = async function (id) {\n  return await this.findById(id).populate('eventId', 'title').lean();\n};\n\nadvertisementSchema.statics.findAdvertisementByEventId = async function (eventId) {\n  return await this.find({ eventId });\n};\n\nadvertisementSchema.statics.findAdvertisementByType = async function (campaignId, advertisementType) {\n  return await this.find({ campaignId, advertisementType });\n};\n\n// 진행중인 공모전 광고 조회\nadvertisementSchema.statics.findActiveADListInEvent = async function () {\n  const adEvent = await this.aggregate([\n    { $match: { advertisementType: 'event', advertisementStatus: 'active' } },\n    { $sample: { size: 2 } },\n    {\n      $lookup: {\n        from: 'events',\n        localField: 'eventId',\n        foreignField: '_id',\n        pipeline: [\n          {\n            $project: {\n              _id: 1,\n              title: 1,\n              eventType: 1,\n              imageUrl: 1,\n              smallImageUrl: 1,\n              startDate: 1,\n              endDate: 1,\n              views: 1,\n              place: 1,\n              organization: 1,\n            },\n          },\n        ],\n        as: 'event',\n      },\n    },\n    {\n      $project: { event: 1 },\n    },\n  ]);\n  return adEvent;\n};\n\n// 진행중인 배너 광고 조회\nadvertisementSchema.statics.findActiveBanner = async function (bannerType: 'banner' | 'eventBanner') {\n  const result = await this.find({ advertisementType: bannerType, advertisementStatus: 'active' })\n    .sort('+bannerSequence')\n    .select('link linkOpenType imageUrl smallImageUrl mainCopy subCopy bannerSequence startDate endDate');\n  return result;\n};\n\nadvertisementSchema.statics.modifyAdvertisement = async function (id, advertisement) {\n  const advertisementRecord = await this.findByIdAndUpdate(id, advertisement, {\n    new: true,\n  });\n  return advertisementRecord;\n};\n\nadvertisementSchema.statics.deleteAdvertisement = async function (id) {\n  await this.findByIdAndDelete(id);\n};\n\n// 캠페인의 광고 리스트 조회\nadvertisementSchema.statics.findAdvertisementInCampaign = async function (campaignId: Types.ObjectId) {\n  const result = await this.find({ campaignId }).select(`advertisementType startDate endDate advertisementStatus`);\n  return result;\n};\n\n// 광고 진행 기간이 지난글 자동 마감\nadvertisementSchema.statics.updateClosedAfterEndDate = async function () {\n  const today = new Date();\n  await this.updateMany(\n    { $and: [{ advertisementStatus: 'active' }, { endDate: { $lte: today } }] },\n    { advertisementStatus: 'close' }\n  );\n};\n\nconst Advertisement = model<IAdvertisementDocument, IAdvertisementModel>('Advertisement', advertisementSchema);\nexport { Advertisement };\n"]}