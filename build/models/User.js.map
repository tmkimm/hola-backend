{"version":3,"file":"User.js","sourceRoot":"/","sources":["models/User.ts"],"names":[],"mappings":"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","sourcesContent":["import { Model, Schema, model, Types } from 'mongoose';\nimport { signJWT } from '../utills/jwt';\nimport { Post as PostModel } from './Post';\nimport { Notification as NotificationModel } from './Notification';\n\n/**\n * @swagger\n *  components:\n *  schemas:\n *   User:\n *     properties:\n *      _id:\n *        type: string\n *        description: 사용자 ID\n *        example: '611dbf22739c10ccdbffad39'\n *      idToken:\n *        type: string\n *        description: '사용자 토큰(Oauth용)'\n *        example: '1856444309'\n *      tokenType:\n *        type: string\n *        description: '로그인 종류(google, github, kakao, admin)'\n *        example: 'google'\n *      name:\n *        type: string\n *        description: 이름\n *        example: '김올라'\n *      nickName:\n *        type: string\n *        description: 이름\n *        example: 'hola'\n *      password:\n *        type: string\n *        description: 비밀번호(미사용)\n *        example: '1234'\n *      image:\n *        type: string\n *        description: '이미지 명(기본 : default.PNG)'\n *        example: 'default.PNG'\n *      likeLanguages:\n *        type: array\n *        items:\n *          type: string\n *        description: 관심 언어\n *        example:\n *          - react\n *          - java\n *      likePosts:\n *        type: array\n *        items:\n *          type: string\n *        description: 관심 등록 글(좋아요한 글)\n *      readList:\n *        type: array\n *        items:\n *          type: string\n *        description: 읽은 글\n *      position:\n *        type: string\n *        description: 직무\n *      githubLink:\n *        type: string\n *        description: 깃허브 링크\n *      blogLink:\n *        type: string\n *        description: 블로그 링크\n *      aboutMe:\n *        type: string\n *        description: 자기소개\n *      createdAt:\n *        type: string\n *        description: 생성일\n *        format: date-time\n *        example: \"2022-01-30T08:30:00Z\"\n *      updatedAt:\n *        type: string\n *        description: 수정일\n *        format: date-time\n *        example: \"2022-01-30T08:30:00Z\"\n */\n\nexport interface IUser {\n  _id: Types.ObjectId;\n  idToken: string;\n  tokenType: string;\n  email: string | undefined;\n  name: string | undefined;\n  nickName: string;\n  password: string | undefined;\n  image: string;\n  likeLanguages: string[] | undefined;\n  likePosts: Types.ObjectId[] | undefined;\n  readList: Types.ObjectId[] | undefined;\n  position: string;\n  githubLink: string;\n  blogLink: string;\n  aboutMe: string;\n  createdAt: Date;\n}\n\nexport interface IUserDocument extends IUser, Document {\n  generateAccessToken: () => Promise<string>;\n  generateRefreshToken: () => Promise<string>;\n}\n\nexport interface IUserModel extends Model<IUserDocument> {\n  deleteUser: (id: Types.ObjectId) => void;\n  modifyUser: (id: Types.ObjectId, user: IUserDocument) => Promise<IUserDocument>;\n  findByIdToken: (idToken: string) => Promise<IUserDocument>;\n  findByEmail: (email: string) => Promise<IUserDocument>;\n  findByNickName: (name: string) => Promise<IUserDocument>;\n  addLikePost: (postId: Types.ObjectId, userId: Types.ObjectId) => Promise<IUserDocument>;\n  deleteLikePost: (postId: Types.ObjectId, userId: Types.ObjectId) => Promise<IUserDocument>;\n  addReadList: (postId: Types.ObjectId, userId: Types.ObjectId) => void;\n}\n\nconst userSchema = new Schema<IUserDocument>(\n  {\n    idToken: { type: String, required: true },\n    tokenType: { type: String, required: true },\n    email: {\n      type: String,\n      trim: true,\n    },\n    name: {\n      type: String,\n      maxlength: 50,\n    },\n    nickName: {\n      type: String,\n      maxlength: 100,\n    },\n    password: {\n      type: String,\n      minlength: 8,\n    },\n    image: String,\n    likeLanguages: [String],\n    likePosts: [{ type: Types.ObjectId, ref: 'Post' }],\n    readList: [{ type: Types.ObjectId, ref: 'Post' }],\n    position: { type: String, default: '' },\n    githubLink: { type: String, default: '' },\n    blogLink: { type: String, default: '' },\n    aboutMe: { type: String, default: '' },\n  },\n  {\n    timestamps: true,\n  },\n);\n\nuserSchema.post('findOneAndDelete', async function (user: IUserDocument) {\n  // 사용자가 작성한 글 제거\n  await PostModel.deleteMany({ author: user._id });\n  // 사용자가 작성한 댓글 제거\n  await PostModel.findOneAndUpdate(\n    { comments: { $elemMatch: { author: user._id } } },\n    { $pull: { comments: { author: user._id } } },\n  );\n\n  // 사용자가 작성한 대댓글 제거\n  await PostModel.findOneAndUpdate(\n    { 'comments.replies': { $elemMatch: { author: user._id } } },\n    { $pull: { 'comments.$.replies': { author: user._id } } },\n  );\n\n  // 회원 탈퇴 시 관련 알림 제거\n  await NotificationModel.deleteNotificationByUser(user._id);\n});\n\nuserSchema.statics.modifyUser = async function (id, user) {\n  const userRecord = await this.findByIdAndUpdate(id, user, {\n    new: true,\n  });\n  return userRecord;\n};\n\nuserSchema.statics.findByIdToken = async function (idToken) {\n  const result = await this.findOne({ idToken });\n  return result;\n};\n\nuserSchema.statics.findByEmail = async function (email) {\n  const result = await this.findOne({ email });\n  return result;\n};\n\nuserSchema.statics.findByNickName = async function (nickName) {\n  const result = await this.findOne({ nickName });\n  return result;\n};\n\nuserSchema.methods.generateAccessToken = async function () {\n  const accessToken = await signJWT({ nickName: this.nickName, idToken: this.idToken }, '1h');\n\n  return accessToken;\n};\n\nuserSchema.methods.generateRefreshToken = async function () {\n  const refreshToken = await signJWT({ nickName: this.nickName }, '2w');\n\n  return refreshToken;\n};\n\nuserSchema.statics.addLikePost = async function (postId, userId) {\n  const result = await this.findByIdAndUpdate(\n    { _id: userId },\n    {\n      $push: {\n        likePosts: {\n          _id: postId,\n        },\n      },\n    },\n    {\n      new: true,\n      upsert: true,\n    },\n  );\n  return result;\n};\n\nuserSchema.statics.deleteLikePost = async function (postId, userId) {\n  const deleteRecord = await this.findOneAndUpdate(\n    { _id: userId },\n    {\n      $pull: { likePosts: postId },\n    },\n  );\n  return deleteRecord;\n};\n\nuserSchema.statics.addReadList = async function (postId, userId) {\n  const isPostExists = await this.findOne({ _id: userId, readList: postId });\n  if (!isPostExists) {\n    await this.findByIdAndUpdate(\n      { _id: userId },\n      {\n        $push: {\n          readList: {\n            _id: postId,\n          },\n        },\n      },\n    );\n  }\n};\n\nconst User = model<IUserDocument, IUserModel>('User', userSchema);\nexport { User };\n"]}