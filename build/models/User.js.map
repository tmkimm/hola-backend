{"version":3,"file":"User.js","sourceRoot":"/","sources":["models/User.ts"],"names":[],"mappings":"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","sourcesContent":["import { Model, Schema, model, Types } from 'mongoose';\r\nimport { signJWT } from '../utills/jwt';\r\nimport { Post as PostModel } from './Post';\r\nimport { Notification as NotificationModel } from './Notification';\r\n\r\n/**\r\n * @swagger\r\n *  components:\r\n *  schemas:\r\n *   User:\r\n *     properties:\r\n *      _id:\r\n *        type: string\r\n *        description: 사용자 ID\r\n *        example: '611dbf22739c10ccdbffad39'\r\n *      idToken:\r\n *        type: string\r\n *        description: '사용자 토큰(Oauth용)'\r\n *        example: '1856444309'\r\n *      tokenType:\r\n *        type: string\r\n *        description: '로그인 종류(google, github, kakao, admin)'\r\n *        example: 'google'\r\n *      name:\r\n *        type: string\r\n *        description: 이름\r\n *        example: '김올라'\r\n *      nickName:\r\n *        type: string\r\n *        description: 이름\r\n *        example: 'hola'\r\n *      password:\r\n *        type: string\r\n *        description: 비밀번호(미사용)\r\n *        example: '1234'\r\n *      image:\r\n *        type: string\r\n *        description: '이미지 명(기본 : default.PNG)'\r\n *        example: 'default.PNG'\r\n *      likeLanguages:\r\n *        type: array\r\n *        items:\r\n *          type: string\r\n *        description: 관심 언어\r\n *        example:\r\n *          - react\r\n *          - java\r\n *      likePosts:\r\n *        type: array\r\n *        items:\r\n *          type: string\r\n *        description: 관심 등록 글(좋아요한 글)\r\n *      readList:\r\n *        type: array\r\n *        items:\r\n *          type: string\r\n *        description: 읽은 글\r\n *      position:\r\n *        type: string\r\n *        description: 직무\r\n *      githubLink:\r\n *        type: string\r\n *        description: 깃허브 링크\r\n *      blogLink:\r\n *        type: string\r\n *        description: 블로그 링크\r\n *      aboutMe:\r\n *        type: string\r\n *        description: 자기소개\r\n *      createdAt:\r\n *        type: string\r\n *        description: 생성일\r\n *        format: date-time\r\n *        example: \"2022-01-30T08:30:00Z\"\r\n *      updatedAt:\r\n *        type: string\r\n *        description: 수정일\r\n *        format: date-time\r\n *        example: \"2022-01-30T08:30:00Z\"\r\n */\r\n\r\nexport interface IUser {\r\n  _id: Types.ObjectId;\r\n  idToken: string;\r\n  tokenType: string;\r\n  email: string | undefined;\r\n  name: string | undefined;\r\n  nickName: string;\r\n  password: string | undefined;\r\n  image: string;\r\n  likeLanguages: string[] | undefined;\r\n  likePosts: Types.ObjectId[] | undefined;\r\n  readList: Types.ObjectId[] | undefined;\r\n  position: string;\r\n  githubLink: string;\r\n  blogLink: string;\r\n  aboutMe: string;\r\n  createdAt: Date;\r\n}\r\n\r\nexport interface IUserDocument extends IUser, Document {\r\n  generateAccessToken: () => Promise<string>;\r\n  generateRefreshToken: () => Promise<string>;\r\n}\r\n\r\nexport interface IUserModel extends Model<IUserDocument> {\r\n  deleteUser: (id: Types.ObjectId) => void;\r\n  modifyUser: (id: Types.ObjectId, user: IUserDocument) => Promise<IUserDocument>;\r\n  findByIdToken: (idToken: string) => Promise<IUserDocument>;\r\n  findByEmail: (email: string) => Promise<IUserDocument>;\r\n  findByNickName: (name: string) => Promise<IUserDocument>;\r\n  deleteLikePost: (postId: Types.ObjectId, userId: Types.ObjectId) => Promise<IUserDocument>;\r\n  addReadList: (postId: Types.ObjectId, userId: Types.ObjectId) => void;\r\n}\r\n\r\nconst userSchema = new Schema<IUserDocument>(\r\n  {\r\n    idToken: { type: String, required: true },\r\n    tokenType: { type: String, required: true },\r\n    email: {\r\n      type: String,\r\n      trim: true,\r\n    },\r\n    name: {\r\n      type: String,\r\n      maxlength: 50,\r\n    },\r\n    nickName: {\r\n      type: String,\r\n      maxlength: 100,\r\n    },\r\n    password: {\r\n      type: String,\r\n      minlength: 8,\r\n    },\r\n    image: String,\r\n    likeLanguages: [String],\r\n    likePosts: [{ type: Types.ObjectId, ref: 'Post' }],\r\n    readList: [{ type: Types.ObjectId, ref: 'Post' }],\r\n    position: { type: String, default: '' },\r\n    githubLink: { type: String, default: '' },\r\n    blogLink: { type: String, default: '' },\r\n    aboutMe: { type: String, default: '' },\r\n  },\r\n  {\r\n    timestamps: true,\r\n  },\r\n);\r\n\r\nuserSchema.post('findOneAndDelete', async function (user: IUserDocument) {\r\n  // 사용자가 작성한 글 제거\r\n  await PostModel.deleteMany({ author: user._id });\r\n  // 사용자가 작성한 댓글 제거\r\n  await PostModel.findOneAndUpdate(\r\n    { comments: { $elemMatch: { author: user._id } } },\r\n    { $pull: { comments: { author: user._id } } },\r\n  );\r\n\r\n  // 사용자가 작성한 대댓글 제거\r\n  await PostModel.findOneAndUpdate(\r\n    { 'comments.replies': { $elemMatch: { author: user._id } } },\r\n    { $pull: { 'comments.$.replies': { author: user._id } } },\r\n  );\r\n\r\n  // 회원 탈퇴 시 관련 알림 제거\r\n  await NotificationModel.deleteNotificationByUser(user._id);\r\n});\r\n\r\nuserSchema.statics.modifyUser = async function (id, user) {\r\n  const userRecord = await this.findByIdAndUpdate(id, user, {\r\n    new: true,\r\n  });\r\n  return userRecord;\r\n};\r\n\r\nuserSchema.statics.findByIdToken = async function (idToken) {\r\n  const result = await this.findOne({ idToken });\r\n  return result;\r\n};\r\n\r\nuserSchema.statics.findByEmail = async function (email) {\r\n  const result = await this.findOne({ email });\r\n  return result;\r\n};\r\n\r\nuserSchema.statics.findByNickName = async function (nickName) {\r\n  const result = await this.findOne({ nickName });\r\n  return result;\r\n};\r\n\r\nuserSchema.methods.generateAccessToken = async function () {\r\n  const accessToken = await signJWT({ nickName: this.nickName, idToken: this.idToken, _id: this._id }, '1h');\r\n\r\n  return accessToken;\r\n};\r\n\r\nuserSchema.methods.generateRefreshToken = async function () {\r\n  const refreshToken = await signJWT({ nickName: this.nickName }, '2w');\r\n\r\n  return refreshToken;\r\n};\r\n\r\nuserSchema.statics.addReadList = async function (postId, userId) {\r\n  const isPostExists = await this.findOne({ _id: userId, readList: postId });\r\n  if (!isPostExists) {\r\n    await this.findByIdAndUpdate(\r\n      { _id: userId },\r\n      {\r\n        $push: {\r\n          readList: {\r\n            _id: postId,\r\n          },\r\n        },\r\n      },\r\n    );\r\n  }\r\n};\r\n\r\nconst User = model<IUserDocument, IUserModel>('User', userSchema);\r\nexport { User };\r\n"]}