{"version":3,"file":"Campaign.js","sourceRoot":"/","sources":["models/Campaign.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAAuD;AACvD,+CAA8C;AAgG9C,IAAM,cAAc,GAAG,IAAI,iBAAM,CAC/B;IACE,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IACvC,WAAW,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IAC7C,WAAW,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE;IAC9C,YAAY,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE;IAC/C,YAAY,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE;IAC/C,SAAS,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE;IACzC,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE;IACxC,mBAAmB,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,EAAE;IACjD,cAAc,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IAChD,cAAc,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,EAAE;IAC5C,cAAc,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE;IACnD,mBAAmB,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,EAAE;IACjD,MAAM,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,EAAE,KAAK;CACjD,EACD;IACE,UAAU,EAAE,IAAI;CACjB,CACF,CAAC;AAEF,cAAc,CAAC,OAAO,CAAC,YAAY,GAAG,UAAgB,EAAE;;;;;wBACrC,qBAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAA;;oBAAlC,QAAQ,GAAG,SAAuB;oBACxC,sBAAO,QAAQ,EAAC;;;;CACjB,CAAC;AAEF,YAAY;AACZ,cAAc,CAAC,OAAO,CAAC,4BAA4B,GAAG,UAAgB,IAAmB;;;;;;oBAEjF,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC;oBACvB,UAAU,GAAG,CAAC,CAAC;oBACnB,IAAI,IAAA,mBAAQ,EAAC,IAAI,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;wBAAE,UAAU,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,YAAY,CAAC;oBACxE,qBAAM,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,EAAA;;oBAA1F,MAAM,GAAG,SAAiF;oBAChG,sBAAO,MAAM,EAAC;;;;CACf,CAAC;AAEF,cAAc,CAAC,OAAO,CAAC,cAAc,GAAG,UAAgB,EAAE,EAAE,QAAQ;;;;;wBAC3C,qBAAM,IAAI,CAAC,iBAAiB,CAAC,EAAE,EAAE,QAAQ,EAAE;wBAChE,GAAG,EAAE,IAAI;qBACV,CAAC,EAAA;;oBAFI,cAAc,GAAG,SAErB;oBACF,sBAAO,cAAc,EAAC;;;;CACvB,CAAC;AAEF,cAAc,CAAC,OAAO,CAAC,cAAc,GAAG,UAAgB,EAAE;;;;wBACxD,qBAAM,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC,EAAA;;oBAAhC,SAAgC,CAAC;;;;;CAClC,CAAC;AAEF,IAAM,QAAQ,GAAG,IAAA,gBAAK,EAAoC,UAAU,EAAE,cAAc,CAAC,CAAC;AAC7E,4BAAQ","sourcesContent":["import { Model, Schema, Types, model } from 'mongoose';\nimport { isNumber } from '../utills/isNumber';\n\n// #region Swagger schema - Campaign\n\n/**\n * @swagger\n *  components:\n *  schemas:\n *   Campaign:\n *     properties:\n *      _id:\n *        type: string\n *        description: 캠페인 ID\n *        example: '611dbf22739c10ccdbffad39'\n *      title:\n *        type: string\n *        description: '캠페인 명'\n *        example: 'Hola 공모전 광고'\n *      companyName:\n *        type: string\n *        description: '광고주 명'\n *        example: 'Holaworld'\n *      managerName:\n *        type: string\n *        description: '담당자 명'\n *        example: '김홍길동'\n *      managerEmail:\n *        type: string\n *        description: '담당자 이메일'\n *        example: 'abc@gmail.com'\n *      managerPhone:\n *        type: string\n *        description: '담당자 휴대폰'\n *        example: '010-1234-5678'\n *      startDate:\n *        type: string\n *        description: 시작일\n *        format: date-time\n *        example: \"2023-08-15T08:30:00Z\"\n *      endDate:\n *        type: string\n *        description: 종료일\n *        format: date-time\n *        example: \"2023-08-15T08:30:00Z\"\n *      basicAdvertisingFee:\n *        type: number\n *        description: 기본 광고비\n *        example: 20000000\n *      conversionType:\n *        type: string\n *        description: 광고 유형(conversion 전환형, view 노출형)\n *        example: 'view'\n *      conversionCost:\n *        type: number\n *        description: '전환당 단가'\n *        example: 15\n *      campaignStatus:\n *        type: string\n *        description: '캠페인 상태(before 진행전, active 진행중, close종료)'\n *        example: 'active'\n *      expectedImpressions:\n *        type: number\n *        description: 예상노출수\n *        example: 56000\n *      remark:\n *        type: string\n *        description: '비고'\n *        example: '비비고 만두'\n */\n// #endregion\n\nexport interface ICampaign {\n  _id: Types.ObjectId;\n  companyName: string;\n  managerName: string;\n  managerEmail: string;\n  managerPhone: string;\n  startDate: Date;\n  endDate: Date;\n  basicAdvertisingFee: number;\n  conversionType: string;\n  conversionCost: number;\n  campaignStatus: string;\n  expectedImpressions: number;\n  remark: string;\n}\n\nexport interface ICampaignDocument extends ICampaign, Document {}\n\nexport interface ICampaignModel extends Model<ICampaignDocument> {\n  findCampaign: (id: Types.ObjectId) => Promise<ICampaignDocument>;\n  findCampaignListInPagination: (page: string | null) => Promise<ICampaignDocument[]>;\n  deleteCampaign: (id: Types.ObjectId) => void;\n  modifyCampaign: (id: Types.ObjectId, campaign: ICampaignDocument) => Promise<ICampaignDocument[]>;\n}\n\nconst campaignSchema = new Schema<ICampaignDocument>(\n  {\n    title: { type: String, required: true }, // 캠페인명\n    companyName: { type: String, required: true }, // 회사명\n    managerName: { type: String, required: false }, // 담당자명\n    managerEmail: { type: String, required: false }, // 담당자 메일\n    managerPhone: { type: String, required: false }, // 담당자 핸드폰 번호\n    startDate: { type: Date, required: true }, //  시작일\n    endDate: { type: Date, required: false }, //  종료일\n    basicAdvertisingFee: { type: Number, default: 0 }, // 기본광고비\n    conversionType: { type: String, required: true }, // 광고유형(conversion 전환형, view 노출형)\n    conversionCost: { type: Number, default: 0 }, // 전환당 단가\n    campaignStatus: { type: String, default: 'before' }, // 상태(before 진행전, active 진행중, close종료)\n    expectedImpressions: { type: Number, default: 0 }, // 예상노출수\n    remark: { type: String, required: false }, // 비고\n  },\n  {\n    timestamps: true,\n  }\n);\n\ncampaignSchema.statics.findCampaign = async function (id) {\n  const campaign = await this.findById(id);\n  return campaign;\n};\n\n// 캠페인 목록 조회\ncampaignSchema.statics.findCampaignListInPagination = async function (page: string | null) {\n  // Pagenation\n  const itemsPerPage = 4 * 5; // 한 페이지에 표현할 수\n  let pageToSkip = 0;\n  if (isNumber(page) && Number(page) > 0) pageToSkip = (Number(page) - 1) * itemsPerPage;\n  const result = await this.find().sort('-createdAt').skip(pageToSkip).limit(Number(itemsPerPage));\n  return result;\n};\n\ncampaignSchema.statics.modifyCampaign = async function (id, campaign) {\n  const campaignRecord = await this.findByIdAndUpdate(id, campaign, {\n    new: true,\n  });\n  return campaignRecord;\n};\n\ncampaignSchema.statics.deleteCampaign = async function (id) {\n  await this.findByIdAndDelete(id);\n};\n\nconst Campaign = model<ICampaignDocument, ICampaignModel>('Campaign', campaignSchema);\nexport { Campaign };\n"]}