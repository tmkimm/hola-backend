{"version":3,"file":"AdvertisementLog.js","sourceRoot":"/","sources":["models/AdvertisementLog.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAAuD;AAsEvD,IAAM,sBAAsB,GAAG,IAAI,iBAAM,CACvC;IACE,eAAe,EAAE,EAAE,IAAI,EAAE,gBAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,cAAc,EAAE,QAAQ,EAAE,IAAI,EAAE;IAC9E,OAAO,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IACzC,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,UAAU;CACpD,EACD;IACE,UAAU,EAAE,IAAI;CACjB,CACF,CAAC;AAEF,WAAW;AACX,sBAAsB,CAAC,OAAO,CAAC,YAAY,GAAG,UAAgB,eAAiC;;;;;wBAC9E,qBAAM,IAAI,CAAC,SAAS,CAAC;wBAClC;4BACE,MAAM,EAAE;gCACN,eAAe,EAAE,EAAE,GAAG,EAAE,eAAe,EAAE;6BAC1C;yBACF;wBACD;4BACE,MAAM,EAAE;gCACN,GAAG,EAAE;oCACH,eAAe,EAAE,kBAAkB;oCACnC,OAAO,EAAE,UAAU;iCACpB;gCACD,KAAK,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE;6BACnB;yBACF;wBACD;4BACE,OAAO,EAAE;gCACP,IAAI,EAAE,gBAAgB;gCACtB,UAAU,EAAE,qBAAqB;gCACjC,YAAY,EAAE,KAAK;gCACnB,QAAQ,EAAE,CAAC,EAAE,QAAQ,EAAE,EAAE,iBAAiB,EAAE,CAAC,EAAE,EAAE,CAAC;gCAClD,EAAE,EAAE,gBAAgB;6BACrB;yBACF;wBACD,EAAE,OAAO,EAAE,iBAAiB,EAAE;qBAC/B,CAAC,CAAC,IAAI,CAAC,8CAA8C,CAAC,EAAA;;oBAzBjD,MAAM,GAAG,SAyBwC;oBACvD,sBAAO,MAAM,EAAC;;;;CACf,CAAC;AAEF,IAAM,gBAAgB,GAAG,IAAA,gBAAK,EAC5B,kBAAkB,EAClB,sBAAsB,CACvB,CAAC;AAEO,4CAAgB","sourcesContent":["import { Model, Schema, Types, model } from 'mongoose';\n\n// #region Swagger schema - AdvertisementResult\n\n/**\n * @swagger\n *  components:\n *  schemas:\n *   AdvertisementResult:\n *     properties:\n *      _id:\n *        type: string\n *        description: 광고 ID\n *        example: '611dbf22739c10ccdbffad39'\n *      advertisementType:\n *        type: string\n *        description: 광고유형(banner 메인 배너, event 공모전, modalBanner 모달 상세 배너)\n *        example: banner\n *      logType:\n *        type: string\n *        description: 로그유형(impression 노출, reach 도달)\n *        example: impression\n *      count:\n *        type: number\n *        description: 결과 수\n *        example: \"3572\"\n */\n// #endregion\n\n// #region Swagger schema - AdvertisementLog\n\n/**\n * @swagger\n *  components:\n *  schemas:\n *   AdvertisementLog:\n *     properties:\n *      _id:\n *        type: string\n *        description: 로그 ID\n *        example: '611dbf22739c10ccdbffad39'\n *      advertisementId:\n *        type: string\n *        description: 광고 ID\n *        example: '611dbf22739c10ccdbffad39'\n *      logType:\n *        type: string\n *        description: 로그유형(impression 노출, reach 도달)\n *        example: impression\n *      logDate:\n *        type: string\n *        description: 로그발생일자\n *        format: date-time\n *        example: \"2023-08-15T08:30:00Z\"\n */\n// #endregion\n\nexport interface IAdvertisementLog {\n  _id: Types.ObjectId;\n  advertisementId: Types.ObjectId;\n  logType: string;\n  logDate: Date;\n}\n\nexport interface IAdvertisementLogDocument extends IAdvertisementLog, Document {}\n\nexport interface IAdvertisementLogModel extends Model<IAdvertisementLogDocument> {\n  findADResult: (advertiesmentId: Types.ObjectId[]) => Promise<any>;\n}\n\nconst advertisementLogSchema = new Schema<IAdvertisementLogDocument>(\n  {\n    advertisementId: { type: Types.ObjectId, ref: 'Avertisement', required: true }, // 광고 Id\n    logType: { type: String, required: true }, // 로그유형(impression 노출, reach 도달)\n    logDate: { type: Date, required: true }, //  로그 생성일\n  },\n  {\n    timestamps: true,\n  }\n);\n\n// 광고 성과 집계\nadvertisementLogSchema.statics.findADResult = async function (advertiesmentId: Types.ObjectId[]) {\n  const result = await this.aggregate([\n    {\n      $match: {\n        advertisementId: { $in: advertiesmentId },\n      },\n    },\n    {\n      $group: {\n        _id: {\n          advertisementId: '$advertisementId',\n          logType: '$logType',\n        },\n        count: { $sum: 1 },\n      },\n    },\n    {\n      $lookup: {\n        from: 'advertisements',\n        localField: '_id.advertisementId',\n        foreignField: '_id',\n        pipeline: [{ $project: { advertisementType: 1 } }],\n        as: 'advertisements',\n      },\n    },\n    { $unwind: '$advertisements' },\n  ]).sort('advertisements.advertisementType _id.logType');\n  return result;\n};\n\nconst AdvertisementLog = model<IAdvertisementLogDocument, IAdvertisementLogModel>(\n  'AdvertisementLog',\n  advertisementLogSchema\n);\n\nexport { AdvertisementLog };\n"]}