{"version":3,"file":"Post.js","sourceRoot":"/","sources":["models/Post.ts"],"names":[],"mappings":"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","sourcesContent":["import { Model, Schema, model, Types, Document, QueryCursor } from 'mongoose';\nimport CustomError from '../CustomError';\nimport { isNumber } from '../utills/isNumber';\n// eslint-disable-next-line import/no-unresolved\nimport { studyOrProjectCode, onlineOrOfflineCode, recruitsCode, expectedPeriodCode } from '../CommonCode';\n// 대댓글\nexport interface IReply {\n  contnet: string;\n  author: Types.ObjectId;\n}\n/**\n * @swagger\n *  components:\n *  schemas:\n *   Post:\n *     properties:\n *      _id:\n *        type: string\n *        description: 글 ID\n *        example: '6355eee637ad670014118738'\n *      author:\n *        type: string\n *        description: 글 등록자 정보\n *        example: '634e1a1537ad67001410d1f4'\n *      language:\n *        type: array\n *        items:\n *          type: string\n *        description: 사용 언어\n *        example:\n *          - react\n *          - java\n *      title:\n *        type: string\n *        description: 제목\n *      content:\n *        type: string\n *        description: 내용\n *      isDeleted:\n *        type: boolean\n *        description: 삭제 여부\n *      isClosed:\n *        type: boolean\n *        description: 마감 여부\n *      views:\n *        type: number\n *        description: 조회수\n *        example: 219\n *      likes:\n *        type: array\n *        description: 관심 등록한 사용자 리스트\n *        items:\n *          type: string\n *        example:\n *          - '634e1a1537ad67001410d1f4'\n *          - '61063a70ed4b420bbcfa0b4b'\n *      totalLikes:\n *        type: number\n *        description: 관심 등록 수\n *        example: 2\n *      type:\n *        type: string\n *        description: '모집 구분(1 : 프로젝트, 2: 스터디)'\n *        example: '1'\n *      recruits:\n *        type: string\n *        description: '모집인원(und: 인원 미정, 1, 2, 3, mo: 10명 이상)'\n *        example: 'und'\n *      onlineOrOffline:\n *        type: string\n *        description: '진행방식(on: 온라인/ off: 오프라인)'\n *        example: 'on'\n *      contactType:\n *        type: string\n *        description: '연락방법(ok: 오픈 카카오톡, em: 이메일, pk: 개인 카카오톡, gf: 구글폼)'\n *        example: 'em'\n *      contactPoint:\n *        type: string\n *        description: '연락링크'\n *        example: 'https://open.kakao.com/o/sKdsLWGe'\n *      expectedPeriod:\n *        type: string\n *        description: '예상 진행기간(und: 기간 미정, 1, 2, 3, mo: 장기)'\n *        example: '3'\n *      positions:\n *        type: array\n *        description: '포지션(FE: 프론트엔드, BE: 백엔드, DE: 디자이너, IOS: IOS, AND: 안드로이드, DEVOPS: DevOps, PM)'\n *        items:\n *          type: string\n *        example:\n *          - 'FE'\n *          - 'BE'\n *      state:\n *        type: string\n *        description: '글 상태(new : 신규글, deadline : 마감임박, hot:인기)'\n *        items:\n *          type: string\n *        example:\n *          - '1'\n *          - 'new'\n *      createdAt:\n *        type: string\n *        description: 생성일\n *        format: date-time\n *        example: \"2021-01-30T08:30:00Z\"\n *      startDate:\n *        type: string\n *        description: 시작예정일\n *        format: date-time\n *        example: \"2021-01-30T08:30:00Z\"\n *      endDate:\n *        type: string\n *        description: 모집 마감일\n *        format: date-time\n *        example: \"2021-01-30T08:30:00Z\"\n *      closeDate:\n *        type: string\n *        description: 마감처리일\n *        format: date-time\n *        example: \"2021-01-30T08:30:00Z\"\n *      deleteDate:\n *        type: string\n *        description: 삭제일\n *        format: date-time\n *        example: \"2021-01-30T08:30:00Z\"\n *      comments:\n *        type: array\n *        items:\n *          $ref: '#/components/schemas/Comment'\n *   Comment:\n *     properties:\n *      _id:\n *        type: string\n *        description: 댓글 ID\n *        example: '6355eee637ad670014118738'\n *      author:\n *        type: string\n *        description: 작성자 ID\n *        example: '63574b3b37ad67001411ba50'\n *      content:\n *        type: string\n *        description: 댓글 내용\n *        example: '신청합니다!'\n */\n\n/**\n * @swagger\n *  components:\n *  schemas:\n *   PostMain:\n *     properties:\n *      _id:\n *        type: string\n *        description: 글 ID\n *        example: '6355eee637ad670014118738'\n *      author:\n *        type: string\n *        description: 글 등록자 정보\n *        example: '634e1a1537ad67001410d1f4'\n *      language:\n *        type: array\n *        items:\n *          type: string\n *        description: 사용 언어\n *        example:\n *          - react\n *          - java\n *      title:\n *        type: string\n *        description: 제목\n *      isClosed:\n *        type: boolean\n *        description: 마감 여부\n *      views:\n *        type: number\n *        description: 조회수\n *        example: 219\n *      likes:\n *        type: array\n *        description: 관심 등록한 사용자 리스트\n *        items:\n *          type: string\n *        example:\n *          - '634e1a1537ad67001410d1f4'\n *          - '61063a70ed4b420bbcfa0b4b'\n *      totalLikes:\n *        type: number\n *        description: 관심 등록 수\n *        example: 2\n *      isLiked:\n *        type: boolean\n *        description: 사용자의 관심 등록 여부\n *        example: false\n *      type:\n *        type: string\n *        description: '모집 구분(1 : 프로젝트, 2: 스터디)'\n *        example: '1'\n *      recruits:\n *        type: string\n *        description: '모집인원(und: 인원 미정, 1, 2, 3, mo: 10명 이상)'\n *        example: 'und'\n *      onlineOrOffline:\n *        type: string\n *        description: '진행방식(on: 온라인/ off: 오프라인)'\n *        example: 'on'\n *      contactType:\n *        type: string\n *        description: '연락방법(ok: 오픈 카카오톡, em: 이메일, pk: 개인 카카오톡, gf: 구글폼)'\n *        example: 'em'\n *      expectedPeriod:\n *        type: string\n *        description: '예상 진행기간(und: 기간 미정, 1, 2, 3, mo: 장기)'\n *        example: '3'\n *      positions:\n *        type: array\n *        description: '포지션(FE: 프론트엔드, BE: 백엔드, DE: 디자이너, IOS: IOS, AND: 안드로이드, DEVOPS: DevOps, PM)'\n *        items:\n *          type: string\n *        example:\n *          - 'FE'\n *          - 'BE'\n *      state:\n *        type: string\n *        description: '글 상태(new : 신규글, deadline : 마감임박, hot:인기)'\n *        items:\n *          type: string\n *        example:\n *          - '1'\n *          - 'new'\n *      createdAt:\n *        type: string\n *        description: 생성일\n *        format: date-time\n *        example: \"2021-01-30T08:30:00Z\"\n *      startDate:\n *        type: string\n *        description: 시작예정일\n *        format: date-time\n *        example: \"2021-01-30T08:30:00Z\"\n *      endDate:\n *        type: string\n *        description: 모집 마감일\n *        format: date-time\n *        example: \"2021-01-30T08:30:00Z\"\n *      closeDate:\n *        type: string\n *        description: 마감처리일\n *        format: date-time\n *        example: \"2021-01-30T08:30:00Z\"\n */\nexport interface IReplyDocument extends IReply, Document {}\n\nexport type IReplyModel = Model<IReplyDocument>;\n\n// 댓글\nexport interface IComment {\n  content: string;\n  author: Types.ObjectId;\n  replies: IReplyDocument[] | undefined;\n}\n\nexport interface ICommentDocument extends IComment, Document {}\n\nexport type ICommentModel = Model<ICommentDocument>;\n\n// 글\nexport interface IPost {\n  author: Types.ObjectId; // 글 등록자 정보\n  language: string[]; // 사용 언어 리스트\n  title: string; // 글 제목\n  content: string; // 글 내용\n  isDeleted: boolean; // 글 삭제 여부\n  isClosed: boolean; // 글 마감 여부\n  isLiked: boolean; // 관심 등록 여부\n  views: number; // 글 조회수\n  comments: ICommentDocument[]; // 글 댓글 정보\n  likes: Types.ObjectId[]; // 관심 등록한 사용자 리스트\n  totalLikes: number; // 관심 등록 수\n  type: string; // 모집 구분(스터디/프로젝트)\n  recruits: string; // 모집인원\n  onlineOrOffline: string; // 진행방식(온라인/오프라인)\n  contactType: string; // 연락방법(오픈 카카오톡, 이메일, 개인 카카오톡)\n  contactPoint: string; // 연락 링크\n  udemyLecture: string; // udemy 강의\n  expectedPeriod: string; // 예상 종료일\n  positions: string[]; // 포지션\n  createdAt: Date; // 등록일\n  startDate: Date; // 시작예정일\n  closeDate: Date; // 마감일\n  deleteDate: Date; // 삭제일\n}\nexport interface IPostDocument extends IPost, Document {}\n\nexport interface IPostModel extends Model<IPostDocument> {\n  findPost: (\n    offset: number | null,\n    limit: number | null,\n    sort: string | null,\n    language: string | null,\n    period: number | null,\n    isClosed: string | null,\n    type: string | null,\n    position: string | null,\n    search: string | null,\n  ) => Promise<IPostDocument[]>;\n  findPostPagination: (\n    page: string | null,\n    previousPage: string | null,\n    lastId: Types.ObjectId | string,\n    sort: string | null,\n    language: string | null,\n    period: number | null,\n    isClosed: string | null,\n    type: string | null,\n    position: string | null,\n    search: string | null,\n  ) => Promise<IPostDocument[]>;\n  countPost: (\n    language: string | null,\n    period: number | null,\n    isClosed: string | null,\n    type: string | null,\n    position: string | null,\n    search: string | null,\n  ) => Promise<number>;\n  findPopularPosts: (postId: Types.ObjectId | null, userId: Types.ObjectId | null) => Promise<IPostDocument[]>;\n  findPostRecommend: (\n    sort: string | null,\n    language: string[] | null,\n    postId: Types.ObjectId | null,\n    userId: Types.ObjectId | null,\n    limit: number | null,\n  ) => Promise<IPostDocument[]>;\n  registerComment: (\n    postId: Types.ObjectId,\n    content: string,\n    author: Types.ObjectId,\n  ) => Promise<{ post: IPostDocument; commentId: Types.ObjectId }>;\n  registerReply: (\n    postId: Types.ObjectId,\n    commentId: Types.ObjectId,\n    content: string,\n    author: Types.ObjectId,\n  ) => Promise<{ post: IPostDocument; replyId: Types.ObjectId }>;\n  findComments: (id: Types.ObjectId) => Promise<IPostDocument>;\n  deletePost: (id: Types.ObjectId) => void;\n  modifyPost: (id: Types.ObjectId, post: IPost) => Promise<IPostDocument>;\n  modifyComment: (comment: IComment) => Promise<IPostDocument>;\n  modifyReply: (comment: IReply) => Promise<IPostDocument>;\n  deleteComment: (id: Types.ObjectId) => Promise<IPostDocument>;\n  deleteReply: (id: Types.ObjectId) => Promise<IPostDocument>;\n  addLike: (postId: Types.ObjectId, userId: Types.ObjectId) => Promise<{ post: IPostDocument; isLikeExist: boolean }>;\n  deleteLike: (\n    postId: Types.ObjectId,\n    userId: Types.ObjectId,\n  ) => Promise<{ post: IPostDocument; isLikeExist: boolean }>;\n  increaseView: (postId: Types.ObjectId) => void;\n  findAuthorByCommentId: (commentId: Types.ObjectId) => Promise<Types.ObjectId | null>;\n  findAuthorByReplyId: (replyId: Types.ObjectId) => Promise<Types.ObjectId | null>;\n  checkPostAuthorization: (postId: Types.ObjectId, tokenUserId: Types.ObjectId, tokenType: string) => void;\n  checkCommentAuthorization: (commentId: Types.ObjectId, tokenUserId: Types.ObjectId, tokenType: string) => void;\n  checkReplyAuthorization: (replyId: Types.ObjectId, tokenUserId: Types.ObjectId) => void;\n  autoClosing: () => void;\n}\n\n// 대댓글 스키마\nconst replySchema = new Schema<IReplyDocument>(\n  {\n    content: String, // 댓글 내용\n    author: { type: Types.ObjectId, ref: 'User', required: true }, // 댓글 등록자 정보\n  },\n  {\n    versionKey: false,\n    timestamps: true, // createdAt, updatedAt 컬럼 사용\n  },\n);\n\n// 댓글 스키마\nconst commentSchema = new Schema<ICommentDocument>(\n  {\n    content: String, // 댓글 내용\n    author: { type: Types.ObjectId, ref: 'User', required: true }, // 댓글 등록자 정보\n    replies: [replySchema],\n  },\n  {\n    versionKey: false,\n    timestamps: true, // createdAt, updatedAt 컬럼 사용\n  },\n);\n\nconst postSchema = new Schema<IPostDocument>(\n  {\n    author: { type: Types.ObjectId, ref: 'User', required: true }, // 글 등록자 정보\n    language: { type: [String], validate: (v: any) => Array.isArray(v) && v.length > 0 }, // 사용 언어 리스트\n    title: { type: String, required: true }, // 글 제목\n    content: { type: String, required: true }, // 글 내용\n    isDeleted: { type: Boolean, default: false }, // 글 삭제 여부\n    isClosed: { type: Boolean, default: false }, // 글 마감 여부\n    views: { type: Number, default: 0 }, // 글 조회수\n    comments: [commentSchema], // 글 댓글 정보\n    likes: [{ type: Types.ObjectId, ref: 'User' }], // 관심 등록한 사용자 리스트\n    totalLikes: { type: Number, default: 0 }, // 관심 등록 수\n    startDate: { type: Date, default: null }, // 시작예정일\n    endDate: { type: Date, default: null }, //  진행 종료일\n    type: { type: String, default: null }, // 모집 구분(스터디/프로젝트)\n    recruits: { type: String, default: null }, // 모집인원\n    onlineOrOffline: { type: String, default: null }, // 진행방식(온라인/오프라인)\n    contactType: { type: String, default: null }, // 연락방법(오픈 카카오톡, 이메일, 개인 카카오톡)\n    contactPoint: { type: String, default: null }, // 연락 링크\n    udemyLecture: { type: String, default: null }, // udemy 강의\n    expectedPeriod: { type: String, default: null }, // 예상 종료일\n    positions: { type: [String] },\n    closeDate: { type: Date, default: null }, //  마감일\n    deleteDate: { type: Date, default: null }, //  삭제일\n  },\n  {\n    versionKey: false,\n    timestamps: true,\n    toObject: { virtuals: true },\n    toJSON: { virtuals: true },\n  },\n);\n\n// 글 상태(뱃지)\npostSchema.virtual('state').get(function (this: IPost) {\n  let state = '';\n\n  // 글 상태\n  const today: Date = new Date();\n  const daysAgo: Date = new Date();\n  const millisecondDay: number = 1000 * 60 * 60 * 24;\n  daysAgo.setDate(today.getDate() - 1); // 24시간 이내\n  // 1. 3일 이내에 등록된 글이면 최신 글\n  // 2. 3일 이내 글이면 마감 임박\n  // 3. 일 조회수가 60 이상이면 인기\n  if (this.createdAt > daysAgo) state = 'new';\n  else if (this.startDate > today && (this.startDate.getTime() - today.getTime()) / millisecondDay <= 3)\n    state = 'deadline';\n  else if (Math.abs(this.views / Math.ceil((today.getTime() - this.createdAt.getTime()) / millisecondDay)) >= 60)\n    state = 'hot';\n  return state;\n});\n\npostSchema.virtual('totalComments').get(function (this: IPost) {\n  return this.comments.length;\n});\n\n// 조회 query 생성\nconst makeFindPostQuery = (\n  language: string | null,\n  period: string | null,\n  isClosed: string | null,\n  type: string | null,\n  position: string | null,\n  search: string | null,\n) => {\n  // Query\n  const query: any = {};\n\n  if (typeof language === 'string') query.language = { $in: language.split(',') };\n  if (typeof position === 'string' && position && position !== 'ALL') query.positions = position;\n\n  if (typeof period === 'number' && !Number.isNaN(period)) {\n    const today = new Date();\n    query.createdAt = { $gte: today.setDate(today.getDate() - period) };\n  }\n  // 마감된 글 안보기 기능(false만 지원)\n  if (typeof isClosed === 'string' && (isClosed === 'true' || isClosed === 'false')) {\n    query.isClosed = { $eq: JSON.parse(isClosed) };\n  }\n\n  query.isDeleted = { $eq: false };\n  // 글 구분(0: 전체, 1: 프로젝트, 2: 스터디)\n  if (typeof type === 'string') {\n    if (type === '0') query.$or = [{ type: '1' }, { type: '2' }];\n    else query.type = { $eq: type };\n  }\n\n  // 텍스트 검색\n  if (typeof search === 'string') {\n    query.$text = { $search: search };\n  }\n  return query;\n};\n\n// 최신, 트레딩 조회\npostSchema.statics.findPost = async function (offset, limit, sort, language, period, isClosed, type, position, search) {\n  // Pagenation\n  const offsetQuery = parseInt(offset, 10) || 0;\n  const limitQuery = parseInt(limit, 10) || 20;\n\n  let sortQuery = [];\n  // Sorting\n  if (sort) {\n    const sortableColumns = ['views', 'createdAt', 'totalLikes'];\n    sortQuery = sort.split(',').filter((value: string) => {\n      return sortableColumns.indexOf(value.substr(1, value.length)) !== -1 || sortableColumns.indexOf(value) !== -1;\n    });\n    sortQuery.push('-createdAt');\n  } else {\n    sortQuery.push('createdAt');\n  }\n  // Query\n  const query = makeFindPostQuery(language, period, isClosed, type, position, search); // 조회 query 생성\n  const result = await this.find(query)\n    .where('isDeleted')\n    .equals(false)\n    .sort(sortQuery.join(' '))\n    .skip(Number(offsetQuery))\n    .limit(Number(limitQuery))\n    .select(\n      `title views comments likes language isClosed totalLikes startDate endDate type onlineOrOffline contactType recruits expectedPeriod author positions createdAt`,\n    )\n    .populate('author', 'nickName image');\n  return result;\n};\n\n// 최신, 트레딩 조회\npostSchema.statics.findPostPagination = async function (\n  page: string | null,\n  previousPage: string | null,\n  lastId: Types.ObjectId | string,\n  sort,\n  language,\n  period,\n  isClosed,\n  type,\n  position,\n  search,\n) {\n  let sortQuery = [];\n  // Sorting\n  if (sort) {\n    const sortableColumns = ['views', 'createdAt', 'totalLikes'];\n    sortQuery = sort.split(',').filter((value: string) => {\n      return sortableColumns.indexOf(value.substr(1, value.length)) !== -1 || sortableColumns.indexOf(value) !== -1;\n    });\n    sortQuery.push('-createdAt');\n  } else {\n    sortQuery.push('createdAt');\n  }\n  const query = makeFindPostQuery(language, period, isClosed, type, position, search); // 조회 query 생성\n\n  // Pagenation\n  const itemsPerPage = 4 * 6; // 한 페이지에 표현할 수\n  let pagesToSkip = 0;\n  let skip = 0;\n\n  // Get last page\n  const count = await this.countDocuments(query);\n  const lastPage = Math.ceil(count / itemsPerPage);\n\n  // skip할 페이지 계산\n  if (isNumber(page) && isNumber(previousPage)) {\n    pagesToSkip = Number(page) - Number(previousPage);\n    if (lastId && pagesToSkip !== 0) {\n      const sortOperator = pagesToSkip <= 0 ? '$gt' : '$lt';\n      query._id = { [sortOperator]: lastId };\n      // 실제 skip할 페이지 계산\n      if (pagesToSkip > 0) skip = Number(itemsPerPage * Math.abs(pagesToSkip - 1));\n      else if (pagesToSkip < 0) skip = Number(itemsPerPage * (Number(page) - 1));\n    }\n  }\n\n  const posts = await this.find(query)\n    .sort(sortQuery.join(' '))\n    .skip(skip)\n    .limit(Number(itemsPerPage))\n    .select(\n      `title views comments likes language isClosed totalLikes startDate endDate type onlineOrOffline contactType recruits expectedPeriod author positions createdAt`,\n    )\n    .populate('author', 'nickName image')\n    .lean();\n\n  return {\n    posts,\n    lastPage,\n  };\n};\n// 최신, 트레딩 조회\npostSchema.statics.countPost = async function (language, period, isClosed, type, position, search) {\n  const query = makeFindPostQuery(language, period, isClosed, type, position, search); // 조회 query 생성\n  const count = await this.countDocuments(query);\n  return count;\n};\n\n// 인기글 조회\npostSchema.statics.findPopularPosts = async function (postId, userId) {\n  // Query\n  const query: any = {};\n\n  // 14일 이내 조회\n  const today = new Date();\n  query.createdAt = { $gte: today.setDate(today.getDate() - 14) };\n\n  // 현재 읽고 있는 글은 제외하고 조회\n  query._id = { $ne: postId };\n\n  // 사용자가 작성한 글 제외하고 조회\n  if (userId) query.author = { $ne: userId };\n\n  // 마감글, 인기글 제외\n  query.isDeleted = { $eq: false };\n  query.isClosed = { $eq: false };\n\n  const posts = await this.find(query).sort('-views').limit(10).select('title').lean();\n\n  return posts;\n};\n\n// 사용자에게 추천 조회\npostSchema.statics.findPostRecommend = async function (sort, language, postId, userId, limit) {\n  const sortQuery = [];\n  // Sorting\n  if (sort == false) {\n    sortQuery.push('createdAt');\n  }\n  // Query\n  const query: any = {};\n  if (typeof language === 'object' && language.length > 0) query.language = { $in: language };\n\n  // 14일 이내 조회\n  const today = new Date();\n  query.createdAt = { $gte: today.setDate(today.getDate() - 14) };\n\n  // 현재 읽고 있는 글은 제외하고 조회\n  query._id = { $ne: postId };\n\n  // 사용자가 작성한 글 제외하고 조회\n  if (userId) query.author = { $ne: userId };\n\n  const posts = await this.find(query)\n    .where('isDeleted')\n    .equals(false)\n    .where('isClosed')\n    .equals(false)\n    .sort(sortQuery.join(' '))\n    .limit(limit)\n    .select('title')\n    .lean();\n\n  // 부족한 개수만큼 추가 조회\n  if (posts.length < limit - 1) {\n    const notInPostIdArr = posts.map((post: IPostDocument) => {\n      return post._id;\n    });\n    notInPostIdArr.push(postId);\n    query._id = { $nin: notInPostIdArr }; // 이미 조회된 글들은 중복 x\n    delete query.language;\n    const shortPosts = await this.find(query)\n      .where('isDeleted')\n      .equals(false)\n      .where('isClosed')\n      .equals(false)\n      .sort(sortQuery.join(' '))\n      .limit(limit - posts.length)\n      .select('title')\n      .lean();\n\n    posts.push(...shortPosts);\n  }\n  return posts;\n};\n\npostSchema.statics.registerComment = async function (postId, content, author) {\n  const commentId = new Types.ObjectId();\n  const post = await this.findOneAndUpdate(\n    { _id: postId },\n    { $push: { comments: { _id: commentId, content, author } } },\n    { new: true, upsert: true },\n  );\n  return { post, commentId };\n};\n\npostSchema.statics.registerReply = async function (postId, commentId, content, author) {\n  const replyId = new Types.ObjectId();\n  const post = await this.findOneAndUpdate(\n    { _id: postId, comments: { $elemMatch: { _id: commentId } } },\n    { $push: { 'comments.$.replies': { _id: replyId, content, author } } },\n    { new: true, upsert: true },\n  );\n  return { post, replyId };\n};\n\npostSchema.statics.findComments = async function (id) {\n  const result = await this.findById(id)\n    .populate('comments.author', 'nickName image')\n    .populate('comments.replies.author', 'nickName image');\n  return result;\n};\n\npostSchema.statics.deletePost = async function (id) {\n  await this.findOneAndUpdate({ _id: id }, { isDeleted: true, deleteDate: new Date() });\n};\n\npostSchema.statics.modifyPost = async function (id, post) {\n  const postRecord = await this.findByIdAndUpdate({ _id: id }, post, {\n    new: true,\n  });\n  return postRecord;\n};\n\n// 댓글 수정\npostSchema.statics.modifyComment = async function (comment) {\n  const { _id, content } = comment;\n  const commentRecord = await this.findOneAndUpdate(\n    { comments: { $elemMatch: { _id } } },\n    { $set: { 'comments.$.content': content } },\n    { new: true },\n  );\n  return commentRecord;\n};\n\n// 대댓글 수정\npostSchema.statics.modifyReply = async function (comment) {\n  const { _id, content, commentId } = comment;\n  const commentRecord = await this.findOneAndUpdate(\n    {\n      comments: { $elemMatch: { _id: commentId } },\n    },\n    {\n      $set: { 'comments.$[].replies.$[i].content': content },\n    },\n    {\n      arrayFilters: [{ 'i._id': _id }],\n      new: true,\n    },\n  );\n  return commentRecord;\n};\n\npostSchema.statics.deleteComment = async function (id) {\n  const commentRecord = await this.findOneAndUpdate(\n    { comments: { $elemMatch: { _id: id } } },\n    { $pull: { comments: { _id: id } } },\n  );\n  return commentRecord;\n};\n\npostSchema.statics.deleteReply = async function (id) {\n  const commentRecord = await this.findOneAndUpdate(\n    { 'comments.replies': { $elemMatch: { _id: id } } },\n    { $pull: { 'comments.$.replies': { _id: id } } },\n  );\n  return commentRecord;\n};\n\n// 관심등록 추가\n// 디바운스 실패 경우를 위해 예외처리\npostSchema.statics.addLike = async function (postId, userId) {\n  const post: IPost[] = await this.find({ _id: postId, likes: { $in: [userId] } });\n  const isLikeExist = post.length > 0;\n  let result: IPost;\n\n  if (!isLikeExist) {\n    result = await this.findByIdAndUpdate(\n      { _id: postId },\n      {\n        $push: {\n          likes: {\n            _id: userId,\n          },\n        },\n        $inc: {\n          totalLikes: 1,\n        },\n      },\n      {\n        new: true,\n        upsert: true,\n      },\n    );\n  } else {\n    result = post[post.length - 1];\n  }\n  return { post: result, isLikeExist };\n};\n\npostSchema.statics.deleteLike = async function (postId, userId) {\n  const posts = await this.find({ _id: postId });\n  let post: IPost | null = posts[posts.length - 1];\n  const isLikeExist = post && post.likes.indexOf(userId) > -1;\n  if (isLikeExist) {\n    post = await this.findOneAndUpdate(\n      { _id: postId },\n      {\n        $pull: { likes: userId },\n        $inc: {\n          totalLikes: -1,\n        },\n      },\n      {\n        new: true,\n      },\n    );\n  }\n  return { post, isLikeExist };\n};\n\n// 조회수 증가\npostSchema.statics.increaseView = async function (postId) {\n  await this.findByIdAndUpdate(postId, {\n    $inc: {\n      views: 1,\n    },\n  });\n};\n\n// 댓글 등록한 사용자 아이디 조회\npostSchema.statics.findAuthorByCommentId = async function (commentId) {\n  const post = await this.findOne({ comments: { $elemMatch: { _id: commentId } } });\n  if (post) {\n    const { author } = post.comments[post.comments.length - 1];\n    return author;\n  }\n  return null;\n};\n\n// 대댓글 등록한 사용자 아이디 조회\npostSchema.statics.findAuthorByReplyId = async function (replyId) {\n  const post = await this.findOne({ 'comments.replies': { $elemMatch: { _id: replyId } } });\n  if (post) {\n    const { author } = post.comments[post.comments.length - 1];\n    return author;\n  }\n  return null;\n};\n\n// 글 수정 권한 체크\npostSchema.statics.checkPostAuthorization = async function (postId, tokenUserId, tokenType) {\n  if (tokenType !== 'admin') {\n    const post = await this.findOne({ _id: postId, author: tokenUserId });\n    if (!post) {\n      throw new CustomError('NotAuthenticatedError', 401, 'User does not match');\n    }\n  }\n};\n\n// 댓글 수정 권한 체크\npostSchema.statics.checkCommentAuthorization = async function (commentId, tokenUserId, tokenType) {\n  if (tokenType !== 'admin') {\n    const post = await this.findOne({ comments: { $elemMatch: { _id: commentId, author: tokenUserId } } });\n    if (!post) {\n      throw new CustomError('NotAuthenticatedError', 401, 'User does not match');\n    }\n  }\n};\n\n// 대댓글 수정 권한 체크\npostSchema.statics.checkReplyAuthorization = async function (replyId, tokenUserId) {\n  const post = await this.findOne({ 'comments.replies': { $elemMatch: { _id: replyId, author: tokenUserId } } });\n  if (!post) {\n    throw new CustomError('NotAuthenticatedError', 401, 'User does not match');\n  }\n};\n\n// 글 자동 마감\npostSchema.statics.autoClosing = async function () {\n  const today = new Date();\n  await this.updateMany(\n    { $and: [{ isClosed: false }, { endDate: { $ne: null } }, { endDate: { $lte: today } }] },\n    { isClosed: true },\n  );\n};\n\nconst Post = model<IPostDocument, IPostModel>('Post', postSchema);\n\nexport { Post };\n"]}