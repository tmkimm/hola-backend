{"version":3,"file":"Post.js","sourceRoot":"/","sources":["models/Post.ts"],"names":[],"mappings":"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","sourcesContent":["import { Model, Schema, model, Types, Document } from 'mongoose';\nimport CustomError from '../CustomError';\n\n// 대댓글\nexport interface IReply {\n  contnet: string;\n  author: Types.ObjectId;\n}\n\nexport interface IReplyDocument extends IReply, Document {}\n\nexport type IReplyModel = Model<IReplyDocument>;\n\n// 댓글\nexport interface IComment {\n  content: string;\n  author: Types.ObjectId;\n  replies: IReplyDocument[] | undefined;\n}\n\nexport interface ICommentDocument extends IComment, Document {}\n\nexport type ICommentModel = Model<ICommentDocument>;\n\n// 글\nexport interface IPost {\n  author: Types.ObjectId; // 글 등록자 정보\n  language: string[]; // 사용 언어 리스트\n  title: string; // 글 제목\n  content: string; // 글 내용\n  isDeleted: boolean; // 글 삭제 여부\n  isClosed: boolean; // 글 마감 여부\n  views: number; // 글 조회수\n  comments: ICommentDocument[]; // 글 댓글 정보\n  likes: Types.ObjectId[]; // 관심 등록한 사용자 리스트\n  totalLikes: number; // 관심 등록 수\n}\n\nexport interface IPostDocument extends IPost, Document {}\n\nexport interface IPostModel extends Model<IPostDocument> {\n  findPost: (\n    offset: number | null,\n    limit: number | null,\n    sort: string | null,\n    language: string | null,\n    period: number | null,\n    isClosed: string | null,\n  ) => Promise<IPostDocument[]>;\n  findPostRecommend: (\n    sort: string | null,\n    language: string[] | null,\n    postId: Types.ObjectId | null,\n    userId: Types.ObjectId | null,\n    limit: number | null,\n  ) => Promise<IPostDocument[]>;\n  registerComment: (\n    postId: Types.ObjectId,\n    content: string,\n    author: Types.ObjectId,\n  ) => Promise<{ post: IPostDocument; commentId: Types.ObjectId }>;\n  registerReply: (\n    postId: Types.ObjectId,\n    commentId: Types.ObjectId,\n    content: string,\n    author: Types.ObjectId,\n  ) => Promise<{ post: IPostDocument; replyId: Types.ObjectId }>;\n  findComments: (id: Types.ObjectId) => Promise<IPostDocument>;\n  deletePost: (id: Types.ObjectId) => void;\n  modifyPost: (id: Types.ObjectId, post: IPost) => Promise<IPostDocument>;\n  modifyComment: (comment: IComment) => Promise<IPostDocument>;\n  modifyReply: (comment: IReply) => Promise<IPostDocument>;\n  deleteComment: (id: Types.ObjectId) => Promise<IPostDocument>;\n  deleteReply: (id: Types.ObjectId) => Promise<IPostDocument>;\n  addLike: (postId: Types.ObjectId, userId: Types.ObjectId) => Promise<{ post: IPostDocument; isLikeExist: boolean }>;\n  deleteLike: (\n    postId: Types.ObjectId,\n    userId: Types.ObjectId,\n  ) => Promise<{ post: IPostDocument; isLikeExist: boolean }>;\n  increaseView: (postId: Types.ObjectId) => void;\n  findAuthorByCommentId: (commentId: Types.ObjectId) => Promise<Types.ObjectId | null>;\n  findAuthorByReplyId: (replyId: Types.ObjectId) => Promise<Types.ObjectId | null>;\n  checkPostAuthorization: (postId: Types.ObjectId, tokenUserId: Types.ObjectId) => void;\n  checkCommentAuthorization: (commentId: Types.ObjectId, tokenUserId: Types.ObjectId) => void;\n  checkReplyAuthorization: (replyId: Types.ObjectId, tokenUserId: Types.ObjectId) => void;\n}\n\n// 대댓글 스키마\nconst replySchema = new Schema<IReplyDocument>(\n  {\n    content: String, // 댓글 내용\n    author: { type: Types.ObjectId, ref: 'User', required: true }, // 댓글 등록자 정보\n  },\n  {\n    versionKey: false,\n    timestamps: true, // createdAt, updatedAt 컬럼 사용\n  },\n);\n\n// 댓글 스키마\nconst commentSchema = new Schema<ICommentDocument>(\n  {\n    content: String, // 댓글 내용\n    author: { type: Types.ObjectId, ref: 'User', required: true }, // 댓글 등록자 정보\n    replies: [replySchema],\n  },\n  {\n    versionKey: false,\n    timestamps: true, // createdAt, updatedAt 컬럼 사용\n  },\n);\n\nconst postSchema = new Schema<IPostDocument>(\n  {\n    author: { type: Types.ObjectId, ref: 'User', required: true }, // 글 등록자 정보\n    language: { type: [String], validate: (v: any) => Array.isArray(v) && v.length > 0 }, // 사용 언어 리스트\n    title: { type: String, required: true }, // 글 제목\n    content: { type: String, required: true }, // 글 내용\n    isDeleted: { type: Boolean, default: false }, // 글 삭제 여부\n    isClosed: { type: Boolean, default: false }, // 글 마감 여부\n    views: { type: Number, default: 0 }, // 글 조회수\n    comments: [commentSchema], // 글 댓글 정보\n    likes: [{ type: Types.ObjectId, ref: 'User' }], // 관심 등록한 사용자 리스트\n    totalLikes: { type: Number, default: 0 }, // 관심 등록 수\n    startDate: { type: Date }, // 진행 시작일\n    endDate: { type: Date }, //  진행 종료일\n    hashTag: { type: [String] }, // 해시태그\n  },\n  {\n    versionKey: false,\n    timestamps: true,\n    toObject: { virtuals: true },\n    toJSON: { virtuals: true },\n  },\n);\n\npostSchema.virtual('totalComments').get(function (this: IPost) {\n  return this.comments.length;\n});\n// 최신, 트레딩 조회\npostSchema.statics.findPost = async function (offset, limit, sort, language, period, isClosed) {\n  // Pagenation\n  const offsetQuery = parseInt(offset, 10) || 0;\n  const limitQuery = parseInt(limit, 10) || 20;\n\n  let sortQuery = [];\n  // Sorting\n  if (sort) {\n    const sortableColumns = ['views', 'createdAt', 'totalLikes'];\n    sortQuery = sort.split(',').filter((value: string) => {\n      return sortableColumns.indexOf(value.substr(1, value.length)) !== -1 || sortableColumns.indexOf(value) !== -1;\n    });\n    sortQuery.push('-createdAt');\n  } else {\n    sortQuery.push('createdAt');\n  }\n  // Query\n  const query: any = {};\n  if (typeof language === 'string') query.language = { $in: language.split(',') };\n  else if (typeof language === 'undefined') return [];\n\n  if (typeof period === 'number' && !Number.isNaN(period)) {\n    const today = new Date();\n    query.createdAt = { $gte: today.setDate(today.getDate() - period) };\n  }\n\n  // 마감된 글 안보기 기능(false만 지원)\n  if (typeof isClosed === 'string' && !(isClosed === 'true')) {\n    query.isClosed = { $eq: isClosed === 'true' };\n  }\n  const result = await this.find(query)\n    .where('isDeleted')\n    .equals(false)\n    .sort(sortQuery.join(' '))\n    .skip(Number(offsetQuery))\n    .limit(Number(limitQuery))\n    .select(`title views comments likes language isClosed totalLikes hashtag startDate endDate type`);\n  return result;\n};\n// 사용자에게 추천 조회\npostSchema.statics.findPostRecommend = async function (sort, language, postId, userId, limit) {\n  let sortQuery = [];\n  // Sorting\n  if (sort) {\n    const sortableColumns = ['views', 'createdAt', 'totalLikes'];\n    sortQuery = sort.split(',').filter((value: string) => {\n      return sortableColumns.indexOf(value.substr(1, value.length)) !== -1 || sortableColumns.indexOf(value) !== -1;\n    });\n  } else {\n    sortQuery.push('createdAt');\n  }\n  // Query\n  const query: any = {};\n  if (typeof language === 'object' && language.length > 0) query.language = { $in: language };\n\n  // 14일 이내 조회\n  const today = new Date();\n  query.createdAt = { $gte: today.setDate(today.getDate() - 14) };\n\n  // 현재 읽고 있는 글은 제외하고 조회\n  query._id = { $ne: postId };\n\n  // 사용자가 작성한 글 제외하고 조회\n  if (userId) query.author = { $ne: userId };\n\n  const posts = await this.find(query)\n    .where('isDeleted')\n    .equals(false)\n    .where('isClosed')\n    .equals(false)\n    .sort(sortQuery.join(' '))\n    .limit(limit)\n    .select('title')\n    .lean();\n\n  // 부족한 개수만큼 추가 조회\n  if (posts.length < limit - 1) {\n    const notInPostIdArr = posts.map((post: IPostDocument) => {\n      return post._id;\n    });\n    notInPostIdArr.push(postId);\n    query._id = { $nin: notInPostIdArr }; // 이미 조회된 글들은 중복 x\n    delete query.language;\n    const shortPosts = await this.find(query)\n      .where('isDeleted')\n      .equals(false)\n      .where('isClosed')\n      .equals(false)\n      .sort(sortQuery.join(' '))\n      .limit(limit - posts.length)\n      .select('title')\n      .lean();\n\n    posts.push(...shortPosts);\n  }\n  return posts;\n};\n\npostSchema.statics.registerComment = async function (postId, content, author) {\n  const commentId = new Types.ObjectId();\n  const post = await this.findOneAndUpdate(\n    { _id: postId },\n    { $push: { comments: { _id: commentId, content, author } } },\n    { new: true, upsert: true },\n  );\n  return { post, commentId };\n};\n\npostSchema.statics.registerReply = async function (postId, commentId, content, author) {\n  const replyId = new Types.ObjectId();\n  const post = await this.findOneAndUpdate(\n    { _id: postId, comments: { $elemMatch: { _id: commentId } } },\n    { $push: { 'comments.$.replies': { _id: replyId, content, author } } },\n    { new: true, upsert: true },\n  );\n  return { post, replyId };\n};\n\npostSchema.statics.findComments = async function (id) {\n  const result = await this.findById(id)\n    .populate('comments.author', 'nickName image')\n    .populate('comments.replies.author', 'nickName image');\n  return result;\n};\n\npostSchema.statics.deletePost = async function (id) {\n  await this.findOneAndUpdate({ _id: id }, { isDeleted: true });\n};\n\npostSchema.statics.modifyPost = async function (id, post) {\n  const postRecord = await this.findByIdAndUpdate({ _id: id }, post, {\n    new: true,\n  });\n  return postRecord;\n};\n\n// 댓글 수정\npostSchema.statics.modifyComment = async function (comment) {\n  const { _id, content } = comment;\n  const commentRecord = await this.findOneAndUpdate(\n    { comments: { $elemMatch: { _id } } },\n    { $set: { 'comments.$.content': content } },\n    { new: true },\n  );\n  return commentRecord;\n};\n\n// 대댓글 수정\npostSchema.statics.modifyReply = async function (comment) {\n  const { _id, content, commentId } = comment;\n  const commentRecord = await this.findOneAndUpdate(\n    {\n      comments: { $elemMatch: { _id: commentId } },\n    },\n    {\n      $set: { 'comments.$[].replies.$[i].content': content },\n    },\n    {\n      arrayFilters: [{ 'i._id': _id }],\n      new: true,\n    },\n  );\n  return commentRecord;\n};\n\npostSchema.statics.deleteComment = async function (id) {\n  const commentRecord = await this.findOneAndUpdate(\n    { comments: { $elemMatch: { _id: id } } },\n    { $pull: { comments: { _id: id } } },\n  );\n  return commentRecord;\n};\n\npostSchema.statics.deleteReply = async function (id) {\n  const commentRecord = await this.findOneAndUpdate(\n    { 'comments.replies': { $elemMatch: { _id: id } } },\n    { $pull: { 'comments.$.replies': { _id: id } } },\n  );\n  return commentRecord;\n};\n\n// 관심등록 추가\n// 디바운스 실패 경우를 위해 예외처리\npostSchema.statics.addLike = async function (postId, userId) {\n  const post: IPost[] = await this.find({ _id: postId, likes: { $in: [userId] } });\n  const isLikeExist = post.length > 0;\n  let result: IPost;\n\n  if (!isLikeExist) {\n    result = await this.findByIdAndUpdate(\n      { _id: postId },\n      {\n        $push: {\n          likes: {\n            _id: userId,\n          },\n        },\n        $inc: {\n          totalLikes: 1,\n        },\n      },\n      {\n        new: true,\n        upsert: true,\n      },\n    );\n  } else {\n    result = post[post.length - 1];\n  }\n  return { post: result, isLikeExist };\n};\n\npostSchema.statics.deleteLike = async function (postId, userId) {\n  const posts = await this.find({ _id: postId });\n  let post: IPost | null = posts[posts.length - 1];\n\n  const isLikeExist = post && post.likes.indexOf(userId) > 0;\n  if (isLikeExist) {\n    post = await this.findOneAndUpdate(\n      { _id: postId },\n      {\n        $pull: { likes: userId },\n        $inc: {\n          totalLikes: -1,\n        },\n      },\n      {\n        new: true,\n      },\n    );\n  }\n  return { post, isLikeExist };\n};\n\n// 조회수 증가\npostSchema.statics.increaseView = async function (postId) {\n  await this.findOneAndUpdate(\n    { _id: postId },\n    {\n      $inc: {\n        views: 1,\n      },\n    },\n  );\n};\n\n// 댓글 등록한 사용자 아이디 조회\npostSchema.statics.findAuthorByCommentId = async function (commentId) {\n  const post = await this.findOne({ comments: { $elemMatch: { _id: commentId } } });\n  if (post) {\n    const { author } = post.comments[post.comments.length - 1];\n    return author;\n  }\n  return null;\n};\n\n// 대댓글 등록한 사용자 아이디 조회\npostSchema.statics.findAuthorByReplyId = async function (replyId) {\n  const post = await this.findOne({ 'comments.replies': { $elemMatch: { _id: replyId } } });\n  if (post) {\n    const { author } = post.comments[post.comments.length - 1];\n    return author;\n  }\n  return null;\n};\n\n// 글 수정 권한 체크\npostSchema.statics.checkPostAuthorization = async function (postId, tokenUserId) {\n  const post = await this.findOne({ _id: postId, author: tokenUserId });\n  if (!post) {\n    throw new CustomError('NotAuthenticatedError', 401, 'User does not match');\n  }\n};\n\n// 댓글 수정 권한 체크\npostSchema.statics.checkCommentAuthorization = async function (commentId, tokenUserId) {\n  const post = await this.findOne({ comments: { $elemMatch: { _id: commentId, author: tokenUserId } } });\n  if (!post) {\n    throw new CustomError('NotAuthenticatedError', 401, 'User does not match');\n  }\n};\n\n// 대댓글 수정 권한 체크\npostSchema.statics.checkReplyAuthorization = async function (replyId, tokenUserId) {\n  const post = await this.findOne({ 'comments.replies': { $elemMatch: { _id: replyId, author: tokenUserId } } });\n  if (!post) {\n    throw new CustomError('NotAuthenticatedError', 401, 'User does not match');\n  }\n};\n\nconst Post = model<IPostDocument, IPostModel>('Post', postSchema);\n\nexport { Post };\n"]}