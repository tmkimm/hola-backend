{"version":3,"file":"Notification.js","sourceRoot":"/","sources":["models/Notification.ts"],"names":[],"mappings":"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","sourcesContent":["import { Model, Schema, model, Types } from 'mongoose';\n\ninterface INotification {\n  targetUserId: Types.ObjectId;\n  generateUserId: Types.ObjectId;\n  generateObjectId: Types.ObjectId;\n  postId: Types.ObjectId;\n  readAt?: Date;\n  isRead: boolean;\n  noticeCode: string;\n  noticeType: string;\n}\n\nexport interface INotificationDocument extends INotification, Document {}\n\nexport interface INotificationModel extends Model<INotificationDocument> {\n  findMyNotifications: (targetUserId: Types.ObjectId) => Promise<INotificationDocument>;\n  findUnReadCount: (targetUserId: Types.ObjectId) => Promise<number>;\n  registerNotification: (\n    postId: Types.ObjectId,\n    targetUserId: Types.ObjectId,\n    generateUserId: Types.ObjectId,\n    noticeType: string,\n    generateObjectId: Types.ObjectId,\n  ) => Promise<void>;\n  deleteNotification: (generateObjectId: Types.ObjectId) => Promise<void>;\n  deleteNotificationByPost: (postId: Types.ObjectId) => Promise<void>;\n  deleteNotificationByUser: (userId: Types.ObjectId) => Promise<void>;\n  updateReadAt: (postId: Types.ObjectId, userId: Types.ObjectId) => Promise<void>;\n}\n\nconst notificationSchema = new Schema<INotification>(\n  {\n    targetUserId: { type: Types.ObjectId, ref: 'User' }, // 대상자 정보\n    generateUserId: { type: Types.ObjectId, ref: 'User' }, // 사용자 정보\n    generateObjectId: { type: Types.ObjectId }, // 알림 대상 Object Id\n    postId: { type: Types.ObjectId, ref: 'Post' }, // 글 ID\n    readAt: Date, // 읽은 시간\n    isRead: { type: Boolean, default: false },\n    noticeCode: String,\n    noticeType: String,\n  },\n  {\n    versionKey: false,\n    timestamps: true,\n    toObject: { virtuals: true },\n    toJSON: { virtuals: true },\n  },\n);\n\n// 내 알림 조회\nnotificationSchema.statics.findMyNotifications = async function (\n  targetUserId: Types.ObjectId,\n): Promise<INotificationDocument> {\n  let limit = 5;\n  const unReadCount = await this.countDocuments({ targetUserId, isRead: false });\n  if (unReadCount >= 6) limit = unReadCount;\n\n  const result = await this.find({ targetUserId })\n    .populate('generateUserId', 'nickName')\n    .populate({ path: 'postId', match: { isDeleted: false }, select: 'title' })\n    .sort('+isRead -createdAt')\n    .limit(limit)\n    .lean();\n  return result;\n};\n\n// 읽지 않은 알림 수 조회\nnotificationSchema.statics.findUnReadCount = async function (targetUserId: Types.ObjectId): Promise<number> {\n  const unReadCount = await this.countDocuments({ targetUserId, isRead: false });\n  return unReadCount;\n};\n\n// 신규 알림 등록\n// like : 좋아요, comment : 댓글, reply: 대댓글\nnotificationSchema.statics.registerNotification = async function (\n  postId: Types.ObjectId,\n  targetUserId: Types.ObjectId,\n  generateUserId: Types.ObjectId,\n  noticeType: string,\n  generateObjectId: Types.ObjectId,\n): Promise<void> {\n  const isNoticeExist = await this.findOne({ postId, generateObjectId });\n  let noticeCode: string;\n  if (!isNoticeExist && targetUserId !== generateUserId) {\n    switch (noticeType) {\n      case 'like':\n        noticeCode = '0';\n        break;\n      case 'comment':\n        noticeCode = '1';\n        break;\n      case 'reply':\n        noticeCode = '2';\n        break;\n      default:\n        noticeCode = '0';\n        break;\n    }\n    // const noticeCode = noticeType === 'like' ? '0' : noticeType === 'comment' ? '1' : noticeType === 'reply' ? '2' : '';\n    await this.create({ targetUserId, generateUserId, postId, noticeCode, noticeType, generateObjectId });\n  }\n};\n\n// 알림 삭제\nnotificationSchema.statics.deleteNotification = async function (generateObjectId: Types.ObjectId): Promise<void> {\n  await this.deleteMany({ generateObjectId });\n};\n\n// 글 삭제 시 관련 알림 제거\nnotificationSchema.statics.deleteNotificationByPost = async function (postId: Types.ObjectId): Promise<void> {\n  await this.deleteMany({ postId });\n};\n\n// 회원 탈퇴 시 관련 알림 제거\nnotificationSchema.statics.deleteNotificationByUser = async function (userId: Types.ObjectId): Promise<void> {\n  await this.deleteMany({ $or: [{ targetUserId: userId }, { generateUserId: userId }] });\n};\n\n// 알림 읽음 처리\nnotificationSchema.statics.updateReadAt = async function (\n  postId: Types.ObjectId,\n  userId: Types.ObjectId,\n): Promise<void> {\n  await this.updateMany(\n    {\n      postId,\n      targetUserId: userId,\n      readAt: undefined,\n    },\n    {\n      readAt: new Date(),\n      isRead: true,\n    },\n  );\n};\n\nconst Notification = model<INotificationDocument, INotificationModel>('Notification', notificationSchema);\n\nexport { Notification };\n"]}