{"version":3,"file":"Notification.js","sourceRoot":"/","sources":["models/Notification.ts"],"names":[],"mappings":"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","sourcesContent":["import { Model, Schema, model, Types } from 'mongoose';\n\ninterface INotification {\n  title: string;\n  content: string;\n  isRead: boolean;\n  targetUserId: Types.ObjectId;\n  createUserId: Types.ObjectId;\n  createObjectId: Types.ObjectId;\n  href: string;\n  readAt?: Date;\n  noticeType: string;\n}\n\nexport interface INotificationDocument extends INotification, Document {}\n\nexport interface INotificationModel extends Model<INotificationDocument> {\n  findNotifications: (targetUserId: Types.ObjectId) => Promise<INotificationDocument>;\n  findNotification: (_id: Types.ObjectId) => Promise<INotificationDocument>;\n  findUnReadCount: (targetUserId: Types.ObjectId) => Promise<number>;\n  registerNotification: (\n    postId: Types.ObjectId,\n    targetUserId: Types.ObjectId,\n    createUserId: Types.ObjectId,\n    noticeType: string,\n    createObjectId: Types.ObjectId,\n    nickName: string,\n  ) => Promise<void>;\n  deleteNotification: (createObjectId: Types.ObjectId) => Promise<void>;\n  deleteNotificationByPost: (href: Types.ObjectId) => Promise<void>;\n  deleteNotificationByUser: (userId: Types.ObjectId) => Promise<void>;\n  readNotification: (_id: Types.ObjectId) => Promise<void>;\n  readAll: (targetUserId: Types.ObjectId) => Promise<void>;\n}\n\nconst notificationSchema = new Schema<INotification>(\n  {\n    title: { type: String, default: null }, // ÏïåÎ¶º ÌÉÄÏù¥ÌãÄ\n    content: { type: String, default: null }, // ÏïåÎ¶º ÎÇ¥Ïö©\n    isRead: { type: Boolean, default: false }, // ÏùΩÏùå Ïó¨Î∂Ä\n    targetUserId: { type: Types.ObjectId, ref: 'User' }, // ÏïåÎ¶º Î∞õÏùÑÏÇ¨Îûå id\n    createUserId: { type: Types.ObjectId, ref: 'User' }, // ÏïåÎ¶º Î≥¥ÎÇ∏ÏÇ¨Îûå id\n    createObjectId: { type: Types.ObjectId }, // ÏïåÎ¶º Î∞úÏÉùÌïú Í≥≥  Id(Í∏Ä, ÎåìÍ∏Ä Îì±)\n    href: { type: String, default: null }, // Ïù¥ÎèôÌï† ÎßÅÌÅ¨\n    readAt: Date, // ÏùΩÏùÄ ÏãúÍ∞Ñ\n    noticeType: String, // ÏïåÎ¶º Íµ¨Î∂Ñ(like, comment, reply, couphone, notice)\n  },\n  {\n    versionKey: false,\n    timestamps: true,\n    toObject: { virtuals: true },\n    toJSON: { virtuals: true },\n  },\n);\n\n// ÏïåÎ¶º Î¶¨Ïä§Ìä∏ Ï°∞Ìöå\nnotificationSchema.statics.findNotifications = async function (\n  targetUserId: Types.ObjectId,\n): Promise<INotificationDocument> {\n  // let limit = 5;\n  // const unReadCount = await this.countDocuments({ targetUserId, isRead: false });\n  // if (unReadCount >= 6) limit = unReadCount;\n\n  const result = await this.find({ targetUserId })\n    .populate('createUserId', 'nickName')\n    // .populate({ path: 'postId', match: { isDeleted: false }, select: 'title' })\n    .sort('+isRead -createdAt')\n    .select(`title content isRead href createUserId noticeType createdAt`)\n    // .limit(limit)\n    .lean();\n  return result;\n};\n\n// ÏïåÎ¶º ÏÉÅÏÑ∏ Ï°∞Ìöå\nnotificationSchema.statics.findNotification = async function (_id: Types.ObjectId): Promise<INotificationDocument> {\n  const result = await this.findOne({ _id })\n    .populate('createUserId', 'nickName')\n    .select(`title content isRead href createUserId noticeType createdAt`);\n\n  return result;\n};\n\n// ÏùΩÏßÄ ÏïäÏùÄ ÏïåÎ¶º Ïàò Ï°∞Ìöå\nnotificationSchema.statics.findUnReadCount = async function (targetUserId: Types.ObjectId): Promise<number> {\n  const unReadCount = await this.countDocuments({ targetUserId, isRead: false });\n  return unReadCount;\n};\n\n// Ïã†Í∑ú ÏïåÎ¶º Îì±Î°ù\nnotificationSchema.statics.registerNotification = async function (\n  postId: Types.ObjectId,\n  targetUserId: Types.ObjectId,\n  createUserId: Types.ObjectId,\n  noticeType: string,\n  createObjectId: Types.ObjectId,\n  nickName: string,\n): Promise<void> {\n  const isNoticeExist = await this.findOne({ href: postId.toString(), createUserId });\n\n  let title: string;\n  // // ÏïåÎ¶º Íµ¨Î∂Ñ(like, comment, reply, couphone, notice)\n  if (!isNoticeExist && targetUserId !== createUserId) {\n    switch (noticeType) {\n      case 'like':\n        title = `üëÄ ${nickName}ÎãòÏù¥ ÎÇ¥ Í∏ÄÏùÑ Î∂ÅÎßàÌÅ¨ÌñàÏñ¥Ïöî.`;\n        break;\n      case 'comment':\n        title = `üëÄ ${nickName}ÎãòÏù¥ ÎÇ¥ Í∏ÄÏóê ÎåìÍ∏ÄÏùÑ ÎÇ®Í≤ºÏñ¥Ïöî.`;\n        break;\n      case 'reply':\n        title = `üëÄ ${nickName}ÎãòÏù¥ ÎÇ¥ Í∏ÄÏóê ÎãµÍ∏ÄÏùÑ ÎÇ®Í≤ºÏñ¥Ïöî.`;\n        break;\n      default:\n        title = ``;\n        break;\n    }\n    await this.create({ targetUserId, createUserId, href: postId, title, noticeType, createObjectId });\n  }\n};\n\n// ÏïåÎ¶º ÏÇ≠Ï†ú\nnotificationSchema.statics.deleteNotification = async function (createObjectId: Types.ObjectId): Promise<void> {\n  await this.deleteMany({ createObjectId });\n};\n\n// Í∏Ä ÏÇ≠Ï†ú Ïãú Í¥ÄÎ†® ÏïåÎ¶º Ï†úÍ±∞\nnotificationSchema.statics.deleteNotificationByPost = async function (href: string): Promise<void> {\n  await this.deleteMany({ href });\n};\n\n// ÌöåÏõê ÌÉàÌá¥ Ïãú Í¥ÄÎ†® ÏïåÎ¶º Ï†úÍ±∞\nnotificationSchema.statics.deleteNotificationByUser = async function (userId: Types.ObjectId): Promise<void> {\n  await this.deleteMany({ $or: [{ targetUserId: userId }, { createUserId: userId }] });\n};\n\n// updateReadAt, updateReadAtByPost Î∂ÑÎ¶¨ÌïòÍ∏∞\n\n// ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨\nnotificationSchema.statics.readNotification = async function (_id: Types.ObjectId): Promise<void> {\n  await this.updateMany(\n    {\n      _id,\n      isRead: false,\n    },\n    {\n      readAt: new Date(),\n      isRead: true,\n    },\n  );\n};\n// ÏïåÎ¶º Ï†ÑÏ≤¥ ÏùΩÏùå Ï≤òÎ¶¨\nnotificationSchema.statics.readAll = async function (targetUserId: Types.ObjectId): Promise<void> {\n  await this.updateMany(\n    {\n      targetUserId,\n      isRead: false,\n    },\n    {\n      readAt: new Date(),\n      isRead: true,\n    },\n  );\n};\n\nconst Notification = model<INotificationDocument, INotificationModel>('Notification', notificationSchema);\n\nexport { Notification };\n"]}