{"version":3,"file":"Notification.js","sourceRoot":"/","sources":["models/Notification.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAAuD;AAmFvD,IAAM,kBAAkB,GAAG,IAAI,iBAAM,CACnC;IACE,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE;IACtC,MAAM,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE;IACzC,YAAY,EAAE,EAAE,IAAI,EAAE,gBAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE;IACnD,YAAY,EAAE,EAAE,IAAI,EAAE,gBAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE;IACnD,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE;IACrC,QAAQ,EAAE,EAAC,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAC;IACrC,UAAU,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE;IAC/C,WAAW,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE;IAC5C,UAAU,EAAE,MAAM;IAClB,cAAc,EAAE,EAAE,IAAI,EAAE,gBAAK,CAAC,QAAQ,EAAE;IACxC,cAAc,EAAE,EAAE,IAAI,EAAE,gBAAK,CAAC,QAAQ,EAAE;IACxC,IAAI,EAAE,MAAM;CACb,EACD;IACE,UAAU,EAAE,KAAK;IACjB,UAAU,EAAE,IAAI;IAChB,QAAQ,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE;IAC5B,MAAM,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE;CAC3B,CACF,CAAC;AAEF,YAAY;AACZ,kBAAkB,CAAC,OAAO,CAAC,iBAAiB,GAAG,UAC7C,YAA4B;;;;;;oBAEtB,KAAK,GAAS,IAAI,IAAI,EAAE,CAAC;oBACzB,WAAW,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;oBAEpD,qBAAM,IAAI,CAAC,IAAI,CAAC,EAAE,YAAY,cAAA,EAAE,SAAS,EAAE,EAAE,IAAI,EAAE,WAAW,EAAC,EAAE,CAAC;6BAC9E,QAAQ,CAAC,cAAc,EAAE,UAAU,CAAC;6BACpC,IAAI,CAAC,mBAAmB,CAAC;6BACzB,MAAM,CAAC,sEAAsE,CAAC;6BAC9E,IAAI,EAAE,EAAA;;oBAJH,MAAM,GAAG,SAIN;oBACT,sBAAO,MAAM,EAAC;;;;CACf,CAAC;AAEF,gBAAgB;AAChB,kBAAkB,CAAC,OAAO,CAAC,eAAe,GAAG,UAAgB,YAA4B;;;;;;oBACjF,KAAK,GAAS,IAAI,IAAI,EAAE,CAAC;oBACzB,WAAW,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC/C,qBAAM,IAAI,CAAC,cAAc,CAAC,EAAE,YAAY,cAAA,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,IAAI,EAAE,WAAW,EAAC,EAAE,CAAC,EAAA;;oBAAzG,WAAW,GAAG,SAA2F;oBAC/G,sBAAO,WAAW,EAAC;;;;CACpB,CAAC;AAGF,WAAW;AACX,kBAAkB,CAAC,OAAO,CAAC,kBAAkB,GAAG,UAC9C,UAAkB,EAClB,YAA4B,EAC5B,GAAW,EACX,KAAa,EACb,IAAY,EACZ,WAAmB,EACnB,YAA6B,EAC7B,cAA+B,EAC/B,cAA+B;;;;;;oBAE3B,MAAM,GAAW,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,CAAC,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,sBAAsB,CAAC;oBAC3G,IAAI,GAAG,MAAM,GAAG,GAAG,CAAC;oBACxB,qBAAM,IAAI,CAAC,MAAM,CAAC,EAAE,YAAY,cAAA,EAAE,YAAY,cAAA,EAAE,IAAI,MAAA,EAAE,KAAK,OAAA,EAAE,UAAU,YAAA,EAAE,cAAc,gBAAA,EAAE,WAAW,aAAA,EAAE,cAAc,gBAAA,EAAE,IAAI,MAAA,EAAE,CAAC,EAAA;;oBAA7H,SAA6H,CAAC;;;;;CAC/H,CAAC;AAEF,QAAQ;AACR,kBAAkB,CAAC,OAAO,CAAC,uBAAuB,GAAG,UAAgB,cAA8B,EAAE,KAAK;;;;wBACxG,qBAAM,IAAI,CAAC,gBAAgB,CAAC,EAAC,cAAc,gBAAA,EAAC,EAAE,EAAC,KAAK,EAAE,KAAK,EAAC,CAAC,EAAA;;oBAA7D,SAA6D,CAAC;;;;;CAC/D,CAAC;AAEF,QAAQ;AACR,kBAAkB,CAAC,OAAO,CAAC,kBAAkB,GAAG,UAAgB,cAA8B;;;;wBAC5F,qBAAM,IAAI,CAAC,UAAU,CAAC,EAAE,cAAc,gBAAA,EAAE,CAAC,EAAA;;oBAAzC,SAAyC,CAAC;;;;;CAC3C,CAAC;AAEF,kBAAkB;AAClB,kBAAkB,CAAC,OAAO,CAAC,wBAAwB,GAAG,UAAgB,MAAc;;;;wBAClF,qBAAM,IAAI,CAAC,UAAU,CAAC,EAAE,cAAc,EAAC,MAAM,EAAE,CAAC,EAAA;;oBAAhD,SAAgD,CAAC;;;;;CAClD,CAAC;AAEF,mBAAmB;AACnB,kBAAkB,CAAC,OAAO,CAAC,wBAAwB,GAAG,UAAgB,MAAsB;;;;wBAC1F,qBAAM,IAAI,CAAC,UAAU,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,YAAY,EAAE,MAAM,EAAE,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAA;;oBAApF,SAAoF,CAAC;;;;;CACtF,CAAC;AAEF,WAAW;AACX,kBAAkB,CAAC,OAAO,CAAC,gBAAgB,GAAG,UAAgB,GAAmB;;;;wBAC/E,qBAAM,IAAI,CAAC,UAAU,CACnB;wBACE,GAAG,KAAA;wBACH,MAAM,EAAE,KAAK;qBACd,EACD;wBACE,QAAQ,EAAE,IAAI,IAAI,EAAE;wBACpB,MAAM,EAAE,IAAI;qBACb,CACF,EAAA;;oBATD,SASC,CAAC;;;;;CACH,CAAC;AACF,cAAc;AACd,kBAAkB,CAAC,OAAO,CAAC,OAAO,GAAG,UAAgB,YAA4B;;;;wBAC/E,qBAAM,IAAI,CAAC,UAAU,CACnB;wBACE,YAAY,cAAA;wBACZ,MAAM,EAAE,KAAK;qBACd,EACD;wBACE,QAAQ,EAAE,IAAI,IAAI,EAAE;wBACpB,MAAM,EAAE,IAAI;qBACb,CACF,EAAA;;oBATD,SASC,CAAC;;;;;CACH,CAAC;AAEF,IAAM,YAAY,GAAG,IAAA,gBAAK,EAA4C,cAAc,EAAE,kBAAkB,CAAC,CAAC;AAEjG,oCAAY","sourcesContent":["import { Model, Schema, model, Types } from 'mongoose';\n\n/**\n * @swagger\n *  components:\n *  schemas:\n *   Notification:\n *     properties:\n *      _id:\n *        type: string\n *        description: ÏïåÎ¶º ID\n *        example: '611dbf22739c10ccdbffad39'\n *      title:\n *        type: string\n *        description: 'ÏïåÎ¶º title'\n *        example: 'ÏûêÎ∞îÎëò ÎãòÏù¥ ÎåìÍ∏ÄÏùÑ ÎÇ®Í≤ºÏñ¥Ïöî: Ï∞∏Ïó¨Ìï†ÎûòÏöî!'\n *      isRead:\n *        type: boolean\n *        description: 'ÏùΩÏùå Ïó¨Î∂Ä(false: ÏùΩÏßÄ ÏïäÏùå, true: ÏùΩÏùå)'\n *        example: false\n *      href:\n *        type: string\n *        description: 'ÌïòÏù¥ÌçºÎßÅÌÅ¨(ÌÅ¥Î¶≠ Ïãú Ïù¥Îèô)'\n *        example: 'http://localhost:3000/study/64be012194b3593f58bffcff'\n *      icon:\n *        type: string\n *        description: 'ÏïÑÏù¥ÏΩò'\n *        example: 'üí¨'\n *      noticeType:\n *        type: string\n *        description: 'ÏïåÎ¶º Ïú†Ìòï(comment: ÎåìÍ∏Ä Îì±Î°ù ÏïåÎ¶º, signup: ÌöåÏõê Í∞ÄÏûÖ ÏïåÎ¶º)'\n *        example: 'comment'\n *      timeAgo:\n *        type: string\n *        description: '~ÏãúÍ∞Ñ Ï†Ñ, ~Î∂Ñ Ï†Ñ'\n *        example: '2ÏãúÍ∞Ñ Ï†Ñ'\n *      createdAt:\n *        type: string\n *        description: ÏÉùÏÑ±Ïùº\n *        format: date-time\n *        example: \"2022-01-30T08:30:00Z\"\n */\n\nexport interface INotification {\n    title: string;\n    isRead: boolean;\n    targetUserId: Types.ObjectId;\n  createUserId: Types.ObjectId;\n  createObjectId: Types.ObjectId;\n    href: string;\n  readDate?: Date;\n    noticeType: string;\n    buttonType: string;\n    buttonLabel: string;\n    con: string;\n    timeAgo: string;\n    createdAt: Date;\n}\n\nexport interface INotificationDocument extends INotification, Document {}\n\nexport interface INotificationModel extends Model<INotificationDocument> {\n  findNotifications: (targetUserId: Types.ObjectId) => Promise<INotificationDocument[]>;\n  findUnReadCount: (targetUserId: Types.ObjectId) => Promise<number>;\n  createNotification: (\n    noticeType: string,\n    targetUserId: Types.ObjectId,\n    urn: string,\n    title: string,\n    icon: string,\n    buttonLabel: string,\n    createUserId?: Types.ObjectId,\n    createObjectId?: Types.ObjectId,\n    parentObjectId?: Types.ObjectId,\n  ) => Promise<void>;  \n  modifyNotificationTitle: (createObjectId: Types.ObjectId, title: string) => Promise<void>;\n  deleteNotification: (createObjectId: Types.ObjectId) => Promise<void>;\n  deleteNotificationByPost: (href: Types.ObjectId) => Promise<void>;\n  deleteNotificationByUser: (userId: Types.ObjectId) => Promise<void>;\n  readNotification: (_id: Types.ObjectId) => Promise<void>;\n  readAll: (targetUserId: Types.ObjectId) => Promise<void>;\n}\n\nconst notificationSchema = new Schema<INotification>(\n  {\n    title: { type: String, default: null }, // ÏïåÎ¶º ÌÉÄÏù¥ÌãÄ\n    isRead: { type: Boolean, default: false }, // ÏùΩÏùå Ïó¨Î∂Ä\n    targetUserId: { type: Types.ObjectId, ref: 'User' }, // ÏïåÎ¶º Î∞õÏùÑÏÇ¨Îûå id\n    createUserId: { type: Types.ObjectId, ref: 'User' }, // ÏïåÎ¶º Î≥¥ÎÇ∏ÏÇ¨Îûå id\n    href: { type: String, default: null }, // Ïù¥ÎèôÌï† ÎßÅÌÅ¨\n    readDate: {type: Date, default: null}, // ÏùΩÏùÄ ÏãúÍ∞Ñ\n    buttonType: { type: String, default: 'BUTTON' },\n    buttonLabel: { type: String, default: null },\n    noticeType: String, // ÏïåÎ¶º Íµ¨Î∂Ñ(like, comment, reply, couphone, notice)\n    createObjectId: { type: Types.ObjectId }, // ÏïåÎ¶º ÎåÄÏÉÅ Object Id(Í∏Ä, ÎåìÍ∏Ä Îì±)\n    parentObjectId: { type: Types.ObjectId },   // ÏïåÎ¶º Î∞úÏÉùÌïú Í≥≥ Id(ÏÇ≠Ï†ú Ïö©ÎèÑ)\n    icon: String,\n  },\n  {\n    versionKey: false,\n    timestamps: true,\n    toObject: { virtuals: true },\n    toJSON: { virtuals: true },\n  },\n);\n\n// ÏïåÎ¶º Î¶¨Ïä§Ìä∏ Ï°∞Ìöå\nnotificationSchema.statics.findNotifications = async function (\n  targetUserId: Types.ObjectId,\n): Promise<INotificationDocument> {\n  const today: Date = new Date();\n  const oneMonthAgo = new Date(today.setMonth(today.getMonth() - 1));\n\n  const result = await this.find({ targetUserId, createdAt: { $gte: oneMonthAgo} })\n    .populate('createUserId', 'nickName')\n    .sort('isRead -createdAt')\n    .select(`title isRead href createUserId noticeType createdAt icon buttonLabel`)\n    .lean();\n  return result;\n};\n\n// ÏùΩÏßÄ ÏïäÏùÄ ÏïåÎ¶º Ïàò Ï°∞Ìöå\nnotificationSchema.statics.findUnReadCount = async function (targetUserId: Types.ObjectId): Promise<number> {\n  const today: Date = new Date();\n  const oneMonthAgo = new Date(today.setMonth(today.getMonth() - 1));\n  const unReadCount = await this.countDocuments({ targetUserId, isRead: false, createdAt: { $gte: oneMonthAgo} });\n  return unReadCount;\n};\n\n\n// Ïã†Í∑ú ÏïåÎ¶º Îì±Î°ù\nnotificationSchema.statics.createNotification = async function (\n  noticeType: string,\n  targetUserId: Types.ObjectId,\n  urn: string,\n  title: string,\n  icon: string,\n  buttonLabel: string,\n  createUserId?: Types.ObjectId,\n  createObjectId?: Types.ObjectId,\n  parentObjectId?: Types.ObjectId,\n): Promise<void> {\n  let domain: string = process.env.NODE_ENV === 'development' ? 'http://localhost:3000' : 'https://holaworld.io';\n  let href = domain + urn;\n  await this.create({ targetUserId, createUserId, href, title, noticeType, createObjectId, buttonLabel, parentObjectId, icon });\n};\n\n// ÏïåÎ¶º ÏÇ≠Ï†ú\nnotificationSchema.statics.modifyNotificationTitle = async function (createObjectId: Types.ObjectId, title): Promise<void> {\n  await this.findOneAndUpdate({createObjectId}, {title: title});\n};\n\n// ÏïåÎ¶º ÏÇ≠Ï†ú\nnotificationSchema.statics.deleteNotification = async function (createObjectId: Types.ObjectId): Promise<void> {\n  await this.deleteMany({ createObjectId });\n};\n\n// Í∏Ä ÏÇ≠Ï†ú Ïãú Í¥ÄÎ†® ÏïåÎ¶º Ï†úÍ±∞\nnotificationSchema.statics.deleteNotificationByPost = async function (postId: string): Promise<void> {\n  await this.deleteMany({ parentObjectId:postId });\n};\n\n// ÌöåÏõê ÌÉàÌá¥ Ïãú Í¥ÄÎ†® ÏïåÎ¶º Ï†úÍ±∞\nnotificationSchema.statics.deleteNotificationByUser = async function (userId: Types.ObjectId): Promise<void> {\n  await this.deleteMany({ $or: [{ targetUserId: userId }, { createUserId: userId }] });\n};\n\n// ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨\nnotificationSchema.statics.readNotification = async function (_id: Types.ObjectId): Promise<void> {\n  await this.updateMany(\n    {\n      _id,\n      isRead: false,\n    },\n    {\n      readDate: new Date(),\n      isRead: true,\n    },\n  );\n};\n// ÏïåÎ¶º Ï†ÑÏ≤¥ ÏùΩÏùå Ï≤òÎ¶¨\nnotificationSchema.statics.readAll = async function (targetUserId: Types.ObjectId): Promise<void> {\n  await this.updateMany(\n    {\n      targetUserId,\n      isRead: false,\n    },\n    {\n      readDate: new Date(),\n      isRead: true,\n    },\n  );\n};\n\nconst Notification = model<INotificationDocument, INotificationModel>('Notification', notificationSchema);\n\nexport { Notification };\n"]}