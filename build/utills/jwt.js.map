{"version":3,"file":"jwt.js","sourceRoot":"/","sources":["utills/jwt.ts"],"names":[],"mappings":";;;;;;AAAA,8DAA+C;AAC/C,iDAA2C;AAC3C,0DAAqC;AAOrC,SAAgB,OAAO,CAAC,OAAmB,EAAE,SAAiB;IAC5D,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;QACjC,sBAAG,CAAC,IAAI,CACN,OAAO,EACP,eAAM,CAAC,YAAY,EACnB;YACE,SAAS,WAAA;YACT,MAAM,EAAE,eAAM,CAAC,MAAM;SACtB,EACD,UAAC,GAAG,EAAE,KAAK;YACT,IAAI,GAAG,IAAI,CAAC,IAAA,wBAAQ,EAAC,KAAK,CAAC;gBAAE,MAAM,CAAC,GAAG,CAAC,CAAC;YACzC,OAAO,CAAC,KAAe,CAAC,CAAC;QAC3B,CAAC,CACF,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC;AAfD,0BAeC;AAED,SAAgB,SAAS,CAAC,KAAa;IACrC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;QACjC,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,eAAM,CAAC,YAAY,EAAE,UAAC,GAAG,EAAE,OAAY;YACvD,IAAI,GAAG;gBAAE,MAAM,CAAC,GAAG,CAAC,CAAC;YACrB,OAAO,CAAC,OAAO,CAAC,CAAC;QACnB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAPD,8BAOC;AAED,SAAgB,kBAAkB,CAAC,OAA4B;IAC7D,OAAO,CAAC,CAAC,CAAC,OAAO,OAAO,KAAK,QAAQ,IAAK,CAAC,SAAS,IAAI,OAAO,CAAS,CAAC,CAAC;AAC5E,CAAC;AAFD,gDAEC","sourcesContent":["import JWT, { JwtPayload } from 'jsonwebtoken';\nimport { isString } from './isStringEmpty';\nimport config from '../config/index';\n\ntype jwtPayload = {\n  nickName?: string;\n  idToken?: string;\n  _id?: string;\n};\nexport function signJWT(payload: jwtPayload, expiresIn: string): Promise<JWT.Secret> {\n  return new Promise((resolve, reject) => {\n    JWT.sign(\n      payload,\n      config.jwtSecretKey,\n      {\n        expiresIn,\n        issuer: config.issuer,\n      },\n      (err, token) => {\n        if (err || !isString(token)) reject(err);\n        resolve(token as string);\n      },\n    );\n  });\n}\n\nexport function verifyJWT(token: string): Promise<any> {\n  return new Promise((resolve, reject) => {\n    JWT.verify(token, config.jwtSecretKey, (err, decoded: any) => {\n      if (err) reject(err);\n      resolve(decoded);\n    });\n  });\n}\n\nexport function isValidAccessToken(decoded: string | JwtPayload): boolean {\n  return !!(typeof decoded !== 'string' && (('idToken' in decoded) as any));\n}\n"]}